{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Breadboard Mates Resources Our Focus At Breadboard Mates, we create novel and exciting products that inspire creativity in the project-maker community. What We Provide An ever increasing range of hardware and continuously evolving software suite and tools to aid project development About Us Breadboard Mates was established in October 2020 to bring breadboard-friendly products to the market, significantly reducing the time and components required to develop and experiment with electronics. From hobbyist to engineering professional, Breadboard Mates cutting edge products can be utilised for seamless development with the help of the integrated products like TIMI (Tiny Intelligent Modular Instrument) and the Mates Studio software development tool. Mates Studio is unlike any other, offering four different programming methods with a library of hundreds of pre-designed pages and widgets. The result is an unprecedented increase in development speed for stand-alone, host driven or PC testing applications. With investment backing from 4D Systems , Breadboard Mates operates as an independent venture, with its own engineering delivery model and dedicated management and R&D team focused on bringing breadboard-friendly products to the market. The partnership is predicted to significantly scale up the efforts of the fast-growth Breadboard Mates team, with support and resourcing coming from a highly reputable partner.","title":"Welcome to Breadboard Mates Resources"},{"location":"#welcome-to-breadboard-mates-resources","text":"","title":"Welcome to Breadboard Mates Resources"},{"location":"#our-focus","text":"At Breadboard Mates, we create novel and exciting products that inspire creativity in the project-maker community.","title":"Our Focus"},{"location":"#what-we-provide","text":"An ever increasing range of hardware and continuously evolving software suite and tools to aid project development","title":"What We Provide"},{"location":"#about-us","text":"Breadboard Mates was established in October 2020 to bring breadboard-friendly products to the market, significantly reducing the time and components required to develop and experiment with electronics. From hobbyist to engineering professional, Breadboard Mates cutting edge products can be utilised for seamless development with the help of the integrated products like TIMI (Tiny Intelligent Modular Instrument) and the Mates Studio software development tool. Mates Studio is unlike any other, offering four different programming methods with a library of hundreds of pre-designed pages and widgets. The result is an unprecedented increase in development speed for stand-alone, host driven or PC testing applications. With investment backing from 4D Systems , Breadboard Mates operates as an independent venture, with its own engineering delivery model and dedicated management and R&D team focused on bringing breadboard-friendly products to the market. The partnership is predicted to significantly scale up the efforts of the fast-growth Breadboard Mates team, with support and resourcing coming from a highly reputable partner.","title":"About Us"},{"location":"docs/","text":"The MkDocs Documentation Build Process INTRODUCTION The document explains how to set up a robust documentation system using MkDocs, GitHub and GitHub Actions, and any server that integrates with GitHub. You can find the source codes and website of the sample in the links below: Source code - https://github.com/iSOLveIT/mkdocs-gen Website - https://resources.breadboardmates.com Topics covered in this document are: Setting up MkDocs application or working environment on local machine Setting up automation using GitHub and GitHub Actions Updating documentation website automatically Maintaining documentation Starting a new document Updating an old document Pre-Requisites To implement this documentation build process, you must have: Python 3.6+ installed. Knowledge about writing documentation using the Markdown format. A GitHub account and a repository for the documentation source files. A hosting platform like Plesk that has a GitHub client. SETTING UP MKDOCS APPLICATION OR WORKING ENVIRONMENT ON LOCAL MACHINE MkDocs is a Python documentation tool that uses Markdown as its markup language to generate intelligent and beautiful documentation in HTML . Building and testing the documentation source using Mkdocs on the local machine To write and build the documentation website, you need to set up a Python virtual environment and install MkDocs. Set up the Python virtual environment using this command: python --m venv <folder_name ( e.g: .virenv ) > Install MkDocs using this command: pip install mkdocs With MkDocs installed, you can run the command, Create a new MkDocs project mkdocs new <project_directory> to create a new MkDocs project that contains a source directory ( docs ) and a default mkdocs.yml file with the most useful configuration values. The mkdocs.yml contains the MkDocs configurations, where you can configure all aspects of how MkDocs reads your sources and builds your documentation. Fig. 1: Source directory for a MkDocs documentation MkDocs reads its contents from files with the extension .MD which you have referenced in the mkdocs.yml file. These .MD files contain the structure of the documentation and the text to be displayed on the documentation website. After you have set up the source directory for the documentation, you can use the command below to run the built-in development server provided by MkDocs. Run the built-in development server mkdocs serve You can use the development server to test your documentation while building it. It is important to note that this command does not provide the documentation build files. To generate the documentation build files, you can run this command: Build the MkDocs documentation mkdocs build The command above builds the MkDocs documentation into a folder called site . After writing and testing the documentation source on the local machine, you can transfer the source files (without the site folder) to your GitHub remote repository. SETTING UP AUTOMATION USING GitHub AND GitHub ACTIONS On the GitHub remote repository, we must set up GitHub Action workflows to handle automatic testing and building of the documentation whenever we trigger a push or pull request event. What is GitHub Action? GitHub Action is a (CI/CD) platform that allows you to automate your build, test, and deployment pipeline using workflows. When using GitHub Action, GitHub will provide you with Linux, Windows, and macOS virtual machines to run your workflows. You can configure GitHub Action workflows to trigger when an event, such as a push, occurs in your repository. Configuring a GitHub Actions Workflow What is a workflow? A workflow is a configurable and automated process that runs one or more jobs. Each job runs inside its virtual machine runner, or a container, and has one or more steps that either run a script you defined or run an action from the GitHub Marketplace. Workflows are defined by a YAML file checked in your repository and are triggered either manually or by an event in the repository. Below is an example of a GitHub Action workflow. Fig. 2: A YAML file for a GitHub Action workflow Using GitHub workflow to automate build and test process for our documentation For us to build and test the documentation, we will configure two (2) GitHub Actions workflows and store them under the .github/workflows directory. The two (2) GitHub Actions workflows are mkdocs_test.yml and main.yml . The mkdocs_test.yml workflow runs a CI test to check if the links in the documentation works. We trigger this workflow on each pull request events sent to the main branch of the official repository. The main.yml workflow, on the other hand, check if the links in the documentation works, compiles the MkDocs sources in the official repository's main branch, and updates the docs-build branch with the build files. We trigger this workflow on each push events on the main branch of the official repository. Testing and Publishing Documentation Changes On the official repository, if a contributor sends a pull request to the repository's main branch, we test the changes by running the \" Pull Request MkDocs Check \" (i.e., mkdocs_test.yml) workflow. If the test is successful, then the documentation project maintainer will merge the pull request changes after reviewing the pull request. This is to ensure that we review the changes in the pull request before merging into the official repository. When the documentation project maintainer merges the pull request changes to the repository's main branch, GitHub triggers the \" Compile MkDocs source and update docs-build branch \" (i.e., main.yml) workflow automatically to build the documentation. If the build is successful, it sends the documentation build files to the docs-build branch. The docs-build branch is where the hosting platform copies the documentation build files to update the documentation website. MAINTAINING DOCUMENTATION Creating the structure of a document Markdown lets you add structural elements to your document, such as headings ( h1 , h2 , h3 etc.). The hashes move lower-level headings further to the right, so they appear indented. There are a few ways to add headings in Markdown. The recommended one is to prefix a heading with hashes # , one for each level of heading: # Heading 1 ## Heading 2 ### Heading 3 And this is a paragraph. Sections of a document can be separated using horizontal rules ( <hr /> ), or lines. You create these in Markdown using three (or more) hyphens - , asterisks * , underscores _ or equals = signs. Place them alone on a line, with blank lines on either side: Brief introduction. === # Chapter 1 Lots of text. --- # Chapter 2 Some more text --- Lists are another important structural element. Unordered lists ( <ul> ) are created by beginning the line with an asterisk * , plus + symbol, or hyphen - , followed by a space or tab, then the text. Ordered lists ( <ol> ) are numbers followed by periods. The numbers don't necessarily have to be in order. Below is an example of an unordered and ordered lists ### Unordered List * this is an * unordered list + this is another + unordered list ### Ordered List 1. this is an 2. ordered 3. list 1. and so 1. is this too Note If you want to start a line with a number and a period without starting a list, you need to escape the period with a backslash \\: 2020\\. A year we'll never forget. Finally, paragraphs of normal text are separated by one or more blank lines: This will be formatted as an HTML paragraph. Starting a new document MkDocs uses regular Markdown ( .md ) files as the source for its documentation. We place these Markdown files in the documentation directory called docs which exist at the top level of your project, alongside the mkdocs.yml configuration file. All Markdown files included in your documentation directory will be rendered in the built site, regardless of any settings. The simplest project you can create will look something like this: mkdocs.yml docs/ index.md You can also create multipage documentation, by creating several Markdown files: mkdocs.yml docs/ index.md about.md changelog.md The file layout you use determines the URLs that are used for the generated pages. Given the above layout, pages would be generated for the following URLs: / /about/ /changelog/ You can also include your Markdown files in nested directories if that better suits your documentation layout. docs/ index.md user-guide/getting-started.md user-guide/configuration-options.md changelog.md Source files inside nested directories will cause pages to be generated with nested URLs, like so: / /user-guide/getting-started/ /user-guide/configuration-options/ /changelog/ After creating the Markdown files in your documentation directory, you must configure pages and navigation in the mkdocs.yml file. The nav configuration setting in your mkdocs.yml file defines which pages are included in the global site navigation menu, as well as the structure of that menu. If not provided, the navigation will be automatically created by discovering all the Markdown files in the documentation directory. A minimal navigation configuration could look like this: nav : - 'index.md' - 'about.md' or With user-defined titles nav : - Home : 'index.md' - About : 'about.md' After configuring pages and navigation, you can test the documentation by executing the command below to start the built-in development server: Run built-in development server mkdocs serve Note The development server will not start successfully if there is an error in the source files. Updating an old document Updating an old document is easy. You just have to find the old document ( .md ) file and make the necessary changes to it. You must ensure the configuration file ( mkdocs.yml ) is intact. After making the changes, execute the command below to start the built-in development server: Run built-in development server mkdocs serve Note The development server will not start successfully if there is an error in the source files. Serving images in a document In MkDocs, images are served from the img folder in the docs directory. You can then link an image in a source file by using the relative path to that image. Note It is not compulsory to store the images under the img folder. You can decide to store your images in any folder, but the folder should be in the docs directory. The code below shows how to add an image using the Markdown syntax: <![Alt text](relative_path_to_image)> ![ Example of an image ]( img/example.png ) Fig. 3: Output of the code above Tip To properly maintain images for large documentation sources, it will be appropriate to divide your images into parts and store them in separate sub-folders under the img folder. For example, all images for the homepage should be stored in the folder called homepage and images for the about section should be stored in the folder called about . How to generate a PDF for a specific page in the documentation To generate a PDF for a specific page, you need to add the MkDocs PDF Export Plugin to your MkDocs project. The MkDocs PDF Export Plugin is a plugin to export content pages as PDF files. Before installing the plugin, you need to have some packages, which the plugin\u2019s documentation explain. Install the package with pip: pip install mkdocs-pdf-export-plugin Enable the plugin in your mkdocs.yml : plugins : - search - pdf-export When you build the documentation, you will see a download button, as described in Fig. 4 below, for every page in your MkDocs project. Fig. 4: PDF download button for index page","title":"The MkDocs Documentation Build Process"},{"location":"docs/#the-mkdocs-documentation-build-process","text":"","title":"The MkDocs Documentation Build Process"},{"location":"docs/#introduction","text":"The document explains how to set up a robust documentation system using MkDocs, GitHub and GitHub Actions, and any server that integrates with GitHub. You can find the source codes and website of the sample in the links below: Source code - https://github.com/iSOLveIT/mkdocs-gen Website - https://resources.breadboardmates.com Topics covered in this document are: Setting up MkDocs application or working environment on local machine Setting up automation using GitHub and GitHub Actions Updating documentation website automatically Maintaining documentation Starting a new document Updating an old document","title":"INTRODUCTION"},{"location":"docs/#pre-requisites","text":"To implement this documentation build process, you must have: Python 3.6+ installed. Knowledge about writing documentation using the Markdown format. A GitHub account and a repository for the documentation source files. A hosting platform like Plesk that has a GitHub client.","title":"Pre-Requisites"},{"location":"docs/#setting-up-mkdocs-application-or-working-environment-on-local-machine","text":"MkDocs is a Python documentation tool that uses Markdown as its markup language to generate intelligent and beautiful documentation in HTML .","title":"SETTING UP MKDOCS APPLICATION OR WORKING ENVIRONMENT ON LOCAL MACHINE"},{"location":"docs/#building-and-testing-the-documentation-source-using-mkdocs-on-the-local-machine","text":"To write and build the documentation website, you need to set up a Python virtual environment and install MkDocs. Set up the Python virtual environment using this command: python --m venv <folder_name ( e.g: .virenv ) > Install MkDocs using this command: pip install mkdocs With MkDocs installed, you can run the command, Create a new MkDocs project mkdocs new <project_directory> to create a new MkDocs project that contains a source directory ( docs ) and a default mkdocs.yml file with the most useful configuration values. The mkdocs.yml contains the MkDocs configurations, where you can configure all aspects of how MkDocs reads your sources and builds your documentation. Fig. 1: Source directory for a MkDocs documentation MkDocs reads its contents from files with the extension .MD which you have referenced in the mkdocs.yml file. These .MD files contain the structure of the documentation and the text to be displayed on the documentation website. After you have set up the source directory for the documentation, you can use the command below to run the built-in development server provided by MkDocs. Run the built-in development server mkdocs serve You can use the development server to test your documentation while building it. It is important to note that this command does not provide the documentation build files. To generate the documentation build files, you can run this command: Build the MkDocs documentation mkdocs build The command above builds the MkDocs documentation into a folder called site . After writing and testing the documentation source on the local machine, you can transfer the source files (without the site folder) to your GitHub remote repository.","title":"Building and testing the documentation source using Mkdocs on the local machine"},{"location":"docs/#setting-up-automation-using-github-and-github-actions","text":"On the GitHub remote repository, we must set up GitHub Action workflows to handle automatic testing and building of the documentation whenever we trigger a push or pull request event.","title":"SETTING UP AUTOMATION USING GitHub AND GitHub ACTIONS"},{"location":"docs/#what-is-github-action","text":"GitHub Action is a (CI/CD) platform that allows you to automate your build, test, and deployment pipeline using workflows. When using GitHub Action, GitHub will provide you with Linux, Windows, and macOS virtual machines to run your workflows. You can configure GitHub Action workflows to trigger when an event, such as a push, occurs in your repository.","title":"What is GitHub Action?"},{"location":"docs/#configuring-a-github-actions-workflow","text":"","title":"Configuring a GitHub Actions Workflow"},{"location":"docs/#what-is-a-workflow","text":"A workflow is a configurable and automated process that runs one or more jobs. Each job runs inside its virtual machine runner, or a container, and has one or more steps that either run a script you defined or run an action from the GitHub Marketplace. Workflows are defined by a YAML file checked in your repository and are triggered either manually or by an event in the repository. Below is an example of a GitHub Action workflow. Fig. 2: A YAML file for a GitHub Action workflow","title":"What is a workflow?"},{"location":"docs/#using-github-workflow-to-automate-build-and-test-process-for-our-documentation","text":"For us to build and test the documentation, we will configure two (2) GitHub Actions workflows and store them under the .github/workflows directory. The two (2) GitHub Actions workflows are mkdocs_test.yml and main.yml . The mkdocs_test.yml workflow runs a CI test to check if the links in the documentation works. We trigger this workflow on each pull request events sent to the main branch of the official repository. The main.yml workflow, on the other hand, check if the links in the documentation works, compiles the MkDocs sources in the official repository's main branch, and updates the docs-build branch with the build files. We trigger this workflow on each push events on the main branch of the official repository.","title":"Using GitHub workflow to automate build and test process for our documentation"},{"location":"docs/#testing-and-publishing-documentation-changes","text":"On the official repository, if a contributor sends a pull request to the repository's main branch, we test the changes by running the \" Pull Request MkDocs Check \" (i.e., mkdocs_test.yml) workflow. If the test is successful, then the documentation project maintainer will merge the pull request changes after reviewing the pull request. This is to ensure that we review the changes in the pull request before merging into the official repository. When the documentation project maintainer merges the pull request changes to the repository's main branch, GitHub triggers the \" Compile MkDocs source and update docs-build branch \" (i.e., main.yml) workflow automatically to build the documentation. If the build is successful, it sends the documentation build files to the docs-build branch. The docs-build branch is where the hosting platform copies the documentation build files to update the documentation website.","title":"Testing and Publishing Documentation Changes"},{"location":"docs/#maintaining-documentation","text":"","title":"MAINTAINING DOCUMENTATION"},{"location":"docs/#creating-the-structure-of-a-document","text":"Markdown lets you add structural elements to your document, such as headings ( h1 , h2 , h3 etc.). The hashes move lower-level headings further to the right, so they appear indented. There are a few ways to add headings in Markdown. The recommended one is to prefix a heading with hashes # , one for each level of heading: # Heading 1 ## Heading 2 ### Heading 3 And this is a paragraph. Sections of a document can be separated using horizontal rules ( <hr /> ), or lines. You create these in Markdown using three (or more) hyphens - , asterisks * , underscores _ or equals = signs. Place them alone on a line, with blank lines on either side: Brief introduction. === # Chapter 1 Lots of text. --- # Chapter 2 Some more text --- Lists are another important structural element. Unordered lists ( <ul> ) are created by beginning the line with an asterisk * , plus + symbol, or hyphen - , followed by a space or tab, then the text. Ordered lists ( <ol> ) are numbers followed by periods. The numbers don't necessarily have to be in order. Below is an example of an unordered and ordered lists ### Unordered List * this is an * unordered list + this is another + unordered list ### Ordered List 1. this is an 2. ordered 3. list 1. and so 1. is this too Note If you want to start a line with a number and a period without starting a list, you need to escape the period with a backslash \\: 2020\\. A year we'll never forget. Finally, paragraphs of normal text are separated by one or more blank lines: This will be formatted as an HTML paragraph.","title":"Creating the structure of a document"},{"location":"docs/#starting-a-new-document","text":"MkDocs uses regular Markdown ( .md ) files as the source for its documentation. We place these Markdown files in the documentation directory called docs which exist at the top level of your project, alongside the mkdocs.yml configuration file. All Markdown files included in your documentation directory will be rendered in the built site, regardless of any settings. The simplest project you can create will look something like this: mkdocs.yml docs/ index.md You can also create multipage documentation, by creating several Markdown files: mkdocs.yml docs/ index.md about.md changelog.md The file layout you use determines the URLs that are used for the generated pages. Given the above layout, pages would be generated for the following URLs: / /about/ /changelog/ You can also include your Markdown files in nested directories if that better suits your documentation layout. docs/ index.md user-guide/getting-started.md user-guide/configuration-options.md changelog.md Source files inside nested directories will cause pages to be generated with nested URLs, like so: / /user-guide/getting-started/ /user-guide/configuration-options/ /changelog/ After creating the Markdown files in your documentation directory, you must configure pages and navigation in the mkdocs.yml file. The nav configuration setting in your mkdocs.yml file defines which pages are included in the global site navigation menu, as well as the structure of that menu. If not provided, the navigation will be automatically created by discovering all the Markdown files in the documentation directory. A minimal navigation configuration could look like this: nav : - 'index.md' - 'about.md' or With user-defined titles nav : - Home : 'index.md' - About : 'about.md' After configuring pages and navigation, you can test the documentation by executing the command below to start the built-in development server: Run built-in development server mkdocs serve Note The development server will not start successfully if there is an error in the source files.","title":"Starting a new document"},{"location":"docs/#updating-an-old-document","text":"Updating an old document is easy. You just have to find the old document ( .md ) file and make the necessary changes to it. You must ensure the configuration file ( mkdocs.yml ) is intact. After making the changes, execute the command below to start the built-in development server: Run built-in development server mkdocs serve Note The development server will not start successfully if there is an error in the source files.","title":"Updating an old document"},{"location":"docs/#serving-images-in-a-document","text":"In MkDocs, images are served from the img folder in the docs directory. You can then link an image in a source file by using the relative path to that image. Note It is not compulsory to store the images under the img folder. You can decide to store your images in any folder, but the folder should be in the docs directory. The code below shows how to add an image using the Markdown syntax: <![Alt text](relative_path_to_image)> ![ Example of an image ]( img/example.png ) Fig. 3: Output of the code above Tip To properly maintain images for large documentation sources, it will be appropriate to divide your images into parts and store them in separate sub-folders under the img folder. For example, all images for the homepage should be stored in the folder called homepage and images for the about section should be stored in the folder called about .","title":"Serving images in a document"},{"location":"docs/#how-to-generate-a-pdf-for-a-specific-page-in-the-documentation","text":"To generate a PDF for a specific page, you need to add the MkDocs PDF Export Plugin to your MkDocs project. The MkDocs PDF Export Plugin is a plugin to export content pages as PDF files. Before installing the plugin, you need to have some packages, which the plugin\u2019s documentation explain. Install the package with pip: pip install mkdocs-pdf-export-plugin Enable the plugin in your mkdocs.yml : plugins : - search - pdf-export When you build the documentation, you will see a download button, as described in Fig. 4 below, for every page in your MkDocs project. Fig. 4: PDF download button for index page","title":"How to generate a PDF for a specific page in the documentation"},{"location":"controller/arduino-mates-controller/","text":"Mates Controller Arduino Library Introduction This library is developed to easily control Breadboard Mates modules using Arduino-compatible boards by utilizing the Mates Controller Command Protocol . This applies to projects developed using Commander and Architect environments. For working examples of using the library and its functions in a project, refer to the examples and extras directories in the repository . Constructors This section serves to provide brief discussion about the constructors that can be used to initialize the library. MatesController(serial, resetPin, mode) This is the main constructor for the library. It creates a unique instance and sets the specified display serial port and reset pin. If serial is not a HardwareSerial (or SoftwareSerial for AVR devices), the Serial stream needs to be initialized manually before running begin(baudrate, resetModule) function. Parameters Type Description serial Stream The serial port to use for controlling the display module resetPin (optional) uint8_t Arduino reset pin to use for resetting the display module (default: 4) mode (optional) uint8_t Arduino reset pulse to use when performing reset (default: LOW) Example No. 1 // Creates a new instance named 'mates' which utilizes: // - Serial as UART // - Pin 4 of Arduino as Reset Pin (default) // - Reset mode as a LOW pulse (default) MatesController mates = MatesController ( Serial ); Example No. 2 // Creates a new instance named 'mates' which utilizes: // - Serial as UART // - Pin 5 of Arduino as Reset Pin // - Reset mode as a LOW pulse (default) MatesController mates = MatesController ( Serial , 5 ); Example No. 3 // Creates a new instance named 'mates' which utilizes: // - Serial as UART // - Pin 6 of Arduino as Reset Pin // - Reset mode as a HIGH pulse MatesController mates = MatesController ( Serial , 6 , HIGH ); MatesController(serial, dbSerial, resetPin, mode) This is an alternative constructor for the library. It creates a unique instance and sets the specified display serial port, debug serial and reset pin. If not using a HardwareSerial (or SoftwareSerial for AVR devices), the Serial stream needs to be initialized manually before running the begin(baudrate, resetModule) function. Parameters Type Description serial Stream The serial port to use for controlling the display module dbSerial Stream The serial port to use for printing debug messages resetPin (optional) uint8_t Arduino reset pin to use for resetting the display module (default: 4) mode (optional) uint8_t Arduino reset pulse to use when performing reset (default: LOW) Example No. 1 // Creates a new instance named 'mates' which utilizes: // - Serial1 as display UART // - Serial as debug UART // - Pin 4 of Arduino as Reset Pin (default) MatesController mates = MatesController ( Serial1 , Serial ); Example No. 2 // Creates a new instance named 'mates' which utilizes: // - Serial1 as display UART // - Serial as debug UART // - Pin 5 of Arduino as Reset Pin MatesController mates = MatesController ( Serial1 , Serial , 5 ); Note If a debug serial port is specified, it should be initialized before running the begin() function of this library. Functions This section serves to provide brief discussion about the functions that can be used with an initialized MatesController object. begin(baudrate, resetModule) This function must be used once to initialize the Serial port at the start of the Arduino application and to reset or synchronize with the display. Parameters Type Description baudrate (optional) int32_t Baudrate setting to be used to control the display module (default: 9600) resetModule (optional) bool Indicates whether the module should be reset from the hardware reset pin (default: true) Note Baudrate is ignored when not using a HardwareSerial (or SoftwareSerial for AVR devices) to communicate with the display. In that case, the Serial/Stream instance needs to be initialize before using this function. If resetModule is false, this function will attempt to synchronize with the display. Return success or failure ( boolean ) Example No. 1 // Initializes display serial port with 9600 (default) and resets the display mates . begin (); Example No. 2 // Initializes display serial port with 115200 baud and resets the display mates . begin ( 115200 ); Example No. 3 // Initializes display serial port with 19200 baud and skips reset mates . begin ( 19200 , false ); Note Ensure that the baudrate matches the baudrate setting of the Mates Studio Commander/Architect project If a debug serial port is specified, it should be initialized manually before running the begin() function of this library. If not using reset, users needs to be aware of the boot timing of the module. This should be around 3-5 seconds or more depending on the project after power on. If more time is needed to sync, set a higher boot timeout using setBootTimeout(timeout) isReady() This function can be used to determine if the module is in sync with the Arduino host. Return Sync Status ( boolean ) Example // Check if the module is in sync if ( mates . isReady ()) { // Write to or read from widgets } else { mates . sync (); // Try to resync with the module } autoResync(attempts, waitPeriod) This function can be used to setup auto resynchronization when an error occurs. Parameters Type Description attempts uint8_t Number of resync attempts to perform waitPeriod (optional) uint16_t Timeout period to wait for every resync attempt (default: boot timeout) Return none Example No. 1 // Setup 3 automatic attempts to resync with default timeout mates . autoResync ( 3 ); Example No. 2 // Setup 5 automatic attempts to resync with 10000ms timeout mates . autoResync ( 5 , 10000 ); sync(resetToPage0, waitPeriod) This function can be used to establish synchronization between the BBM module and the Arduino compatible host. Parameters Type Description resetToPage0 bool Indicates whether to go to Page0 after a successful synchronization (default: true) waitPeriod (optional) uint16_t Timeout period to wait until the display is ready (default: boot timeout) Return success or failure ( boolean ) Example No. 1 // Attempts to synchronize with the display if ( mates . sync ()) { // Do something if synchronization was successful } else { // Do something if synchronization failed } Example No. 2 // Attempts to synchronize with the display if ( mates . sync ( true )) { // Do something if synchronization was successful // and project returned to Page0 } else { // Do something if synchronization failed } Example No. 3 // Attempts to synchronize with the display with a timeout of 10000 if ( mates . sync ( true , 10000 )) { // Do something if synchronization was successful // and project returned to Page0 } else { // Do something if synchronization failed } reset(waitPeriod) This function can be used to reset the display by sending a reset pulse from the reset pin specified through the contructor. The default wait period is 5 seconds (5000 ms) or as specified by setBootTimeout(timeout) . The function finishes as soon as the display sends the ready signal or the wait period passes. Parameters Type Description waitPeriod (optional) uint16_t Timeout period to wait until the display is ready (default: boot timeout) Return success or failure ( boolean ) Example No. 1 // Reset the display and wait for mates . reset (); // a period of 5 seconds (default) // (actually the current boot timeout which is 5s by default) Example No. 2 // Reset the display and wait for mates . reset ( 4000 ); // a period of 4 seconds softReset(waitPeriod) This function can be used to reset the display by sending a reset command. The default wait period is 5 seconds (5000 ms) or as specified by setBootTimeout(timeout) . The function finishes as soon as the display sends the ready signal or the wait period passes. Parameters Type Description waitPeriod (optional) uint16_t Timeout period to wait until the display is ready (default: boot timeout) Return success or failure ( boolean ) Example No. 1 // Reset the display and wait for mates . softReset (); // a period of 5 seconds (default boot timeout) Example No. 2 // Reset the display and wait for mates . softReset ( 4000 ); // a period of 4 seconds setBootTimeout(timeout) This function can be used to set the wait period during reset and softReset. Parameters Type Description timeout uint32_t New timeout period to wait until the display is ready Return success or failure ( boolean ) Example mates . setBootTimeout ( 10000 ); // sets boot timeout to a period of 10 seconds resetBootTimeout(timeout) This function can be used to reset the wait period during reset and softReset to the default 5 seconds. Return none Example mates . resetBootTimeout (); // resets boot timeout to the default period attachErrorHandler(handler) Parameters Type Description handler MatesErrorHandler Custom function to handle errors as they come This function can be used to attach and error handler function to the library. Return none Example No. 1 MatesController mates = MatesController ( Serial ); void matesErrorHandler ( MatesError error ) { while ( true ) { digitalWrite ( LED_BUILTIN , HIGH ); delay ( 200 ); digitalWrite ( LED_BUILTIN , LOW ); delay ( 200 ); } // Blink builtin LED and block project execution // This is not ideal but can be used to as simple error indication // Errors should be handled as shown in Example 2 } void setup () { pinMode ( LED_BUILTIN , OUTPUT ); digitalWrite ( LED_BUILTIN , LOW ); // Sets 'matesErrorHandler' as the function for handling possible MatesError mates . attachErrorHandler ( matesErrorHandler ); mates . begin ( 9600 ); // do something... } void loop () { // do something... } Example No. 2 MatesController mates = MatesController ( Serial ); void matesErrorHandler ( MatesError error ) { switch ( error ) { case MATES_ERROR_COMMAND_FAILED : // Do something when last command is invalid break ; case MATES_ERROR_RESPONSE_TIMEOUT : // Do something when the expected response from // the last command wasn't received on time break ; case MATES_ERROR_COMMAND_TIMEOUT : // Do something when the expected acknowledgement from // the last command wasn't received on time break ; case MATES_ERROR_NOT_INITIALIZED : // Do something when the display is not yet ready break ; default : break ; } } void setup () { // Sets 'matesErrorHandler' as the function for handling possible MatesError mates . attachErrorHandler ( matesErrorHandler ); mates . begin ( 9600 ); // do something... } void loop () { // do something... } setBacklight(value) This function can be used to set the backlight level to the value specified. Parameters Type Description value uint8_t The target backlight level Return success or failure ( boolean ) Example mates . setBacklight ( 7 ); // Set backlight value to 7 setPage(page) This function can be used to navigate to the specified page . Parameters Type Description page uint16_t The target page index Return success or failure ( boolean ) Example mates . setPage ( 1 ); // Navigate to Page1 getPage() This function can be used to query the current active page. Return Active page index ( uint16_t ) Example uint16_t activePage = mates . getPage (); // Query active page setWidgetValue(widget, value) This function can be used to set the 16-bit integer value of the specified widget Parameters Type Description widget int16_t The ID of the target widget value int16_t The new value for the widget Return success or failure ( boolean ) Example mates . setWidgetValue ( MediaGaugeB0 , 50 ); // Set value of MediaGaugeB0 to 50 Note All applicable widget types are listed in here . This function is not applicable to Int32 and Float LedDigits getWidgetValue(widget) This function can be used to query the specified widget 's value. Parameters Type Description widget int16_t The ID of the target widget Return Value of the specified widget ( int16_t ) Example // Query the current value of MediaLed4 int16_t widgetVal = mates . getWidgetValue ( MediaLed4 ); Note All applicable widget types are listed in here . This function is not applicable to Int32 and Float LedDigits setWidgetValue(type, index, value) This function can be used to set the 16-bit integer value of the widget specified by type and index . Parameters Type Description type MatesWidget The type of the target widget index int8_t The index of the target widget value int16_t The new value for the widget Return success or failure ( boolean ) Example // Set value of MediaGaugeB0 to 50 mates . setWidgetValue ( MATES_MEDIA_GAUGE_B , 0 , 50 ); Note All applicable widget types are listed in here . This function is not applicable to Int32 and Float LedDigits getWidgetValue(type, index) This function can be used to query the value of the widget specified by type and index . Parameters Type Description type MatesWidget The type of the target widget index int8_t The index of the target widget Return Value of the widget specified by type and index ( int16_t ) Example // Query the current value of MediaLed4 int16_t widgetVal = mates . getWidgetValue ( MATES_MEDIA_LED , 4 ); Note All applicable widget types are listed in here . This function is not applicable to Int32 and Float LedDigits setLedDigitsValue(index, value) This function can be used to set the 16-bit integer value of the LedDigits specified by index . Parameters Type Description index uint8_t The index of the target LedDigits value int16_t The new value for the LedDigits Return success or failure ( boolean ) Example mates . setLedDigitsValue ( 0 , 1234 ); // Set value of LedDigits0 to 1234 Note This function is only applicable for Int16 LedDigits setLedDigitsValue(index, value) This function can be used to set the 32-bit integer value of the LedDigits specified by index . Parameters Type Description index uint8_t The index of the target LedDigits value int32_t The new value for the LedDigits Return success or failure ( boolean ) Example mates . setLedDigitsValue ( 0 , 602214076 ); // Set value of LedDigits0 to 602214076 Note This function is only applicable for Int32 LedDigits setLedDigitsValue(index, value) This function can be used to set the float value of the LedDigits specified by index . Parameters Type Description index uint8_t The index of the target LedDigits value float The new value for the LedDigits Return success or failure ( boolean ) Example // Set value of LedDigits1 to 3.1416 mates . setLedDigitsValue ( LedDigits1 , 3.1416 ); Note This function is only applicable for Float LedDigits setSpectrumValue(widget, gaugeIndex, value) This function can be used to set the value of a specified gauge index of the spectrum widget specified. Parameters Type Description widget int16_t The ID of the target spectrum widget gaugeIndex uint8_t The gauge index of the target spectrum widget value uint8_t The new value for the widget Return success or failure ( boolean ) Example // Set value of gauge index 2 of LedSpectrum5 to 64 mates . setSpectrumValue ( LedSpectrum5 , 2 , 64 ); Note This function is only applicable for LedSpectrum and MediaSpectrum setLedSpectrumValue(index, gaugeIndex, value) This function can be used to set the value of a specified gaugeIndex of the Led Spectrum widget determined by index . Parameters Type Description index uint8_t The index of the target Led Spectrum widget gaugeIndex uint8_t The gauge index of the target Led Spectrum widget value uint8_t The new value for the column/row of the widget Return success or failure ( boolean ) Example // Set value of gauge index 2 of LedSpectrum5 to 64 mates . setLedSpectrumValue ( 5 , 2 , 64 ); setMediaSpectrumValue(type, index, gaugeIndex, value) This function can be used to set the value of a specified gaugeIndex of the Media Spectrum widget determined by index . Parameters Type Description index uint8_t The index of the target Led Spectrum widget gaugeIndex uint8_t The gauge index of the target Led Spectrum widget value uint8_t The new value for the column/row of the widget Return success or failure ( boolean ) Example // Set value of gauge index 3 of MediaSpectrum4 to 48 mates . setMediaSpectrumValue ( 4 , 3 , 48 ); setMediaColorLedValue(index, r, g, b) This function can be used to set the 32-bit integer value of the LedDigits specified by index . Parameters Type Description index uint8_t The index of the target MediaColorLed r uint8_t The red component of the new color of the MediaColorLed g uint8_t The green component of the new color of the MediaColorLed b uint8_t The blue component of the new color of the MediaColorLed Return success or failure ( boolean ) Example mates . setMediaColorLedValue ( 3 , 255 , 0 , 0 ); // Set value of MediaColorLed3 to RED Note This function is only applicable for MediaColorLeds setWidgetParam(widget, param, value) This function can be used to set the parameter ( param ) of the target widget to the specified value . Parameters Type Description widget int16_t The ID of the target widget param int16_t The target widget parameter value int16_t The new value for the widget parameter Return success or failure ( boolean ) Example // Set GaugeA3's Background color to BLACK mates . setWidgetParam ( GaugeA3 , MATES_GAUGE_A_BG_COLOR , BLACK ); Note All applicable widget types are listed in here . getWidgetParam(widget, param) This function can be used to query the parameter ( param ) of the target widget . Parameters Type Description widget int16_t The ID of the target widget param int16_t The target widget parameter Return The current param value of the widget (int16_t) Example // Query the background color of GaugeA3 int16_t paramVal = mates . getWidgetParam ( GaugeA3 , MATES_GAUGE_A_BG_COLOR ); Note All applicable widget types are listed in here . setWidgetParam(type, index, param, value); This function can be used to set the parameter ( param ) of the target widget, determined by type and index , to the specified value . Parameters Type Description type MatesWidget The type of the target widget index int8_t The index of the target widget param int16_t The target widget parameter value int16_t The new value for the widget parameter Return success or failure ( boolean ) Example // Set GaugeA3's Background color to BLACK mates . setWidgetParam ( MATES_GAUGE_A , 3 , MATES_GAUGE_A_BG_COLOR , BLACK ); Note All applicable widget types are listed in here . getWidgetParam(type, index, param) This function can be used to query the parameter ( param ) of the target widget, determined by type and index . Parameters Type Description type MatesWidget The type of the target widget index int8_t The index of the target widget param int16_t The target widget parameter Return The current param value of the widget specified by type and index (int16_t) Example // Query the background color of GaugeA3 int16_t paramVal = mates . getWidgetParam ( MATES_GAUGE_A , 3 , MATES_GAUGE_A_BG_COLOR ); Note All applicable widget types are listed in here . setBufferSize(size) This function can be used to adjust the max string buffer size to be used when composing a string for a TextArea or a PrintArea. The string composition is done by updateTextArea(index, format, ...) , updateDotMatrix(index, format, ...) and appendToPrintArea(index, format, ...) Parameters Type Description size uint16_t The new buffer size (max: 1000) Return success or failure (boolean) Example // Increase buffer size to a maximum of 100 characters // including the null terminator mates . setBufferSize ( 100 ); clearTextArea(index) This function can be used to clear the TextArea specified by index . Parameters Type Description index uint16_t The index of the target TextArea widget Return success or failure ( boolean ) Example mates . clearTextArea ( 6 ); // Clear TextArea6 updateTextArea(index, format, ...) This function can be used to update the contents of the TextArea specified by index with the text formed by format and the additional arguments. Parameters Type Description index uint16_t The index of the target TextArea widget format const char * The text to be written to the Text Area ... - Additional values to replace the format specifiers in format Return success or failure ( boolean ) Example No. 1 mates . updateTextArea ( 2 , \"Mates\" ); // Update TextArea2 to \"Mates\" Example No. 2 int value = 76 ; mates . updateTextArea ( 3 , \"Value is %d\" , 76 ); // Print value to TextArea3 updateTextArea(index, str) This function can be used to update the contents of the TextArea specified by index with the String 'str'. Parameters Type Description index uint16_t The index of the target TextArea widget str String The String to be written to the Text Area Return success or failure ( boolean ) Example String str = \"Mates\" ; mates . updateTextArea ( 2 , str ); // Update TextArea2 to 'str' clearPrintArea(index) This function can be used to clear the PrintArea specified by index . Parameters Type Description index uint16_t The index of the target PrintArea widget Return success or failure ( boolean ) Example mates . clearPrintArea ( 5 ); // Clear PrintArea5 setPrintAreaColor(index, rgb565) This function can be used to set the print color ( rgb565 ) used by the PrintArea specified by index . Parameters Type Description index uint16_t The index of the target PrintArea widget rgb565 int16_t The color as a 16-bit RGB565 value Return success or failure ( boolean ) Example // Set print color of PrintArea4 to RED (0xF800) mates . setPrintAreaColor ( 4 , 0xF800 ); setPrintAreaColor(index, r, g, b) This function can be used to set the print color used by the PrintArea specified by index . The color is determined by r , g and b . Parameters Type Description index uint16_t The index of the target PrintArea widget r uint8_t The red component of the new color value g uint8_t The green component of the new color value b uint8_t The blue component of the new color value Return success or failure ( boolean ) Example mates . setPrintAreaColor ( 7 , 0 , 255 , 0 ); // Set print color of PrintArea7 to GREEN appendToPrintArea(index, buffer, len) This function can be used to append a number of bytes ( len ) from the data in buffer to the PrintArea specified by index . Parameters Type Description index uint16_t The index of the target Print Area widget buffer const int8_t * The source of data to be appended len uint16_t The number of bytes to be sent Return success or failure ( boolean ) Example int8_t data [] = { 0xF8 , 0x7F , 0x1F }; mates . appendToPrintArea ( 7 , data , 3 ); // Append data to PrintArea7 appendToPrintArea(index, format, ...) This function can be used to append contents to the PrintArea specified by index with the text formed by format and the additional arguments. Parameters Type Description index uint16_t The index of the target Print Area widget format const char * The text to be written to the PrintArea ... - Additional values to replace the format specifiers in format Return success or failure ( boolean ) Example No. 1 mates . appendToPrintArea ( 8 , \"Mates\" ); // Append \"Mates\" to PrintArea8 Example No. 2 int value = 108 ; // Append value as text to PrintArea9 mates . appendToPrintArea ( 9 , \"Value: %d\" , 108 ); appendToPrintArea(index, str) This function can be used to append contents to the PrintArea specified by index with the String provided. Parameters Type Description index uint16_t The index of the target Print Area widget str String The text to be written to the PrintArea Return success or failure ( boolean ) Example String str = \"Mates\" ; mates . appendToPrintArea ( 2 , str ); // // Append 'str' to PrintArea2 appendToScope(index, buffer, len) This function can be used to append a number of 16-bit values ( len ) from the data in buffer to the Scope widget specified by index . Parameters Type Description index uint16_t The index of the target Scope widget buffer const int16_t * The source of data to be appended len uint16_t The number of values to be sent Return success or failure ( boolean ) Example int16_t data [] = { 0xF8 , 0x7F , 0x1F }; mates . appendToScope ( 7 , data , 3 ); // Append data to Scope7 updateDotMatrix(index, format, ...) This function can be used to append contents to the DotMatrix specified by index with the text formed by format and the additional arguments. Parameters Type Description index uint16_t The index of the target DotMatrix widget format const char * The text to be written to the DotMatrix ... - Additional values to replace the format specifiers in format Return success or failure ( boolean ) Example No. 1 mates . updateDotMatrix ( 8 , \"Mates\" ); // Update DotMatrix0 to \"Mates\" Example No. 2 int value = 108 ; mates . updateDotMatrix ( 9 , \"Value: %d\" , 108 ); // Update DotMatrix0 to show value updateDotMatrix(index, str) This function can be used to update the contents of the DotMatrix specified by index with the String 'str'. Parameters Type Description index uint16_t The index of the target DotMatrix widget str String The String to be written to the DotMatrix Return success or failure ( boolean ) Example String str = \"Mates\" ; mates . updateDotMatrix ( 2 , str ); // Update DotMatrix2 to 'str' getButtonEventCount() This function can be used to query the number of button events recorded by a touch screen module Return Number of recorded button events ( uint16_t ) Example // Query the number of button events recorded uint16_t btnEvents = mates . getButtonEventCount (); getNextButtonEvent() This function can be used to query the source of next recorded button event Return Widget ID of the next event button ( int16_t ) Example // If there is any event recorded if ( mates . getButtonEventCount () > 0 ) { int16_t button = mates . getNextButtonEvent (); switch ( button ) { case MediaButton1 : // if the button pressed is MediaButton1 // do something break ; // add more possible cases here... default : break ; } } getSwipeEventCount() This function can be used to query the number of swipe events recorded by a touch screen module Return Number of recorded swipe events ( uint16_t ) Example // Query the number of swipe events recorded uint16_t swipeEvents = mates . getSwipeEventCount (); getNextButtonEvent() This function can be used to query the source of next recorded button event Return Swipe event (int16_t) Example // If there is any event recorded if ( mates . getSwipeEventCount () > 0 ) { int16_t swipe = mates . getNextSwipeEvent (); if (( swipe & MATES_SWIPE_SOUTH ) == MATES_SWIPE_SOUTH ) { // if swipe is towards from top to bottom } if (( swipe & MATES_SWIPE_EAST ) == MATES_SWIPE_EAST ) { // if swipe is towards from left to right } if (( swipe & MATES_SWIPE_TLBR ) == MATES_SWIPE_TLBR ) { // if swipe is towards from top left to bottom right } } getVersion() This function can be used to query the version number of the library. Return Version Information ( String ) Example // Get the library version number as string String matesVersion = mates . getVersion (); getCompatibility() This function can be used to query the version number of Mates Studio compatible with the version of the library. Return Compatibility Version Information ( String ) Example // Get the compatible Mates Studio version number as string String compatVersion = mates . getCompatibility (); printVersion() This function can be used to print the version number of the library and the compatible Mates Studio version to the debug serial port. If no debug serial was specified in the constructor, this function does nothing. Return none Example // Prints library version and compatible Mates Studio version to debug serial mates . printVersion (); getError() This function can be used to investigate errors that occurred while controlling the display module. Description of the possible errors is discussed in here . Return Current error code ( MatesError ) Example // Checks the last error that occurred int error = mates . getError (); if ( error == MATES_ERROR_NONE ) { // Last command was successful }","title":"Arduino"},{"location":"controller/arduino-mates-controller/#mates-controller-arduino-library","text":"","title":"Mates Controller Arduino Library"},{"location":"controller/arduino-mates-controller/#introduction","text":"This library is developed to easily control Breadboard Mates modules using Arduino-compatible boards by utilizing the Mates Controller Command Protocol . This applies to projects developed using Commander and Architect environments. For working examples of using the library and its functions in a project, refer to the examples and extras directories in the repository .","title":"Introduction"},{"location":"controller/arduino-mates-controller/#constructors","text":"This section serves to provide brief discussion about the constructors that can be used to initialize the library.","title":"Constructors"},{"location":"controller/arduino-mates-controller/#matescontrollerserial-resetpin-mode","text":"This is the main constructor for the library. It creates a unique instance and sets the specified display serial port and reset pin. If serial is not a HardwareSerial (or SoftwareSerial for AVR devices), the Serial stream needs to be initialized manually before running begin(baudrate, resetModule) function. Parameters Type Description serial Stream The serial port to use for controlling the display module resetPin (optional) uint8_t Arduino reset pin to use for resetting the display module (default: 4) mode (optional) uint8_t Arduino reset pulse to use when performing reset (default: LOW) Example No. 1 // Creates a new instance named 'mates' which utilizes: // - Serial as UART // - Pin 4 of Arduino as Reset Pin (default) // - Reset mode as a LOW pulse (default) MatesController mates = MatesController ( Serial ); Example No. 2 // Creates a new instance named 'mates' which utilizes: // - Serial as UART // - Pin 5 of Arduino as Reset Pin // - Reset mode as a LOW pulse (default) MatesController mates = MatesController ( Serial , 5 ); Example No. 3 // Creates a new instance named 'mates' which utilizes: // - Serial as UART // - Pin 6 of Arduino as Reset Pin // - Reset mode as a HIGH pulse MatesController mates = MatesController ( Serial , 6 , HIGH );","title":"MatesController(serial, resetPin, mode)"},{"location":"controller/arduino-mates-controller/#matescontrollerserial-dbserial-resetpin-mode","text":"This is an alternative constructor for the library. It creates a unique instance and sets the specified display serial port, debug serial and reset pin. If not using a HardwareSerial (or SoftwareSerial for AVR devices), the Serial stream needs to be initialized manually before running the begin(baudrate, resetModule) function. Parameters Type Description serial Stream The serial port to use for controlling the display module dbSerial Stream The serial port to use for printing debug messages resetPin (optional) uint8_t Arduino reset pin to use for resetting the display module (default: 4) mode (optional) uint8_t Arduino reset pulse to use when performing reset (default: LOW) Example No. 1 // Creates a new instance named 'mates' which utilizes: // - Serial1 as display UART // - Serial as debug UART // - Pin 4 of Arduino as Reset Pin (default) MatesController mates = MatesController ( Serial1 , Serial ); Example No. 2 // Creates a new instance named 'mates' which utilizes: // - Serial1 as display UART // - Serial as debug UART // - Pin 5 of Arduino as Reset Pin MatesController mates = MatesController ( Serial1 , Serial , 5 ); Note If a debug serial port is specified, it should be initialized before running the begin() function of this library.","title":"MatesController(serial, dbSerial, resetPin, mode)"},{"location":"controller/arduino-mates-controller/#functions","text":"This section serves to provide brief discussion about the functions that can be used with an initialized MatesController object.","title":"Functions"},{"location":"controller/arduino-mates-controller/#beginbaudrate-resetmodule","text":"This function must be used once to initialize the Serial port at the start of the Arduino application and to reset or synchronize with the display. Parameters Type Description baudrate (optional) int32_t Baudrate setting to be used to control the display module (default: 9600) resetModule (optional) bool Indicates whether the module should be reset from the hardware reset pin (default: true) Note Baudrate is ignored when not using a HardwareSerial (or SoftwareSerial for AVR devices) to communicate with the display. In that case, the Serial/Stream instance needs to be initialize before using this function. If resetModule is false, this function will attempt to synchronize with the display. Return success or failure ( boolean ) Example No. 1 // Initializes display serial port with 9600 (default) and resets the display mates . begin (); Example No. 2 // Initializes display serial port with 115200 baud and resets the display mates . begin ( 115200 ); Example No. 3 // Initializes display serial port with 19200 baud and skips reset mates . begin ( 19200 , false ); Note Ensure that the baudrate matches the baudrate setting of the Mates Studio Commander/Architect project If a debug serial port is specified, it should be initialized manually before running the begin() function of this library. If not using reset, users needs to be aware of the boot timing of the module. This should be around 3-5 seconds or more depending on the project after power on. If more time is needed to sync, set a higher boot timeout using setBootTimeout(timeout)","title":"begin(baudrate, resetModule)"},{"location":"controller/arduino-mates-controller/#isready","text":"This function can be used to determine if the module is in sync with the Arduino host. Return Sync Status ( boolean ) Example // Check if the module is in sync if ( mates . isReady ()) { // Write to or read from widgets } else { mates . sync (); // Try to resync with the module }","title":"isReady()"},{"location":"controller/arduino-mates-controller/#autoresyncattempts-waitperiod","text":"This function can be used to setup auto resynchronization when an error occurs. Parameters Type Description attempts uint8_t Number of resync attempts to perform waitPeriod (optional) uint16_t Timeout period to wait for every resync attempt (default: boot timeout) Return none Example No. 1 // Setup 3 automatic attempts to resync with default timeout mates . autoResync ( 3 ); Example No. 2 // Setup 5 automatic attempts to resync with 10000ms timeout mates . autoResync ( 5 , 10000 );","title":"autoResync(attempts, waitPeriod)"},{"location":"controller/arduino-mates-controller/#syncresettopage0-waitperiod","text":"This function can be used to establish synchronization between the BBM module and the Arduino compatible host. Parameters Type Description resetToPage0 bool Indicates whether to go to Page0 after a successful synchronization (default: true) waitPeriod (optional) uint16_t Timeout period to wait until the display is ready (default: boot timeout) Return success or failure ( boolean ) Example No. 1 // Attempts to synchronize with the display if ( mates . sync ()) { // Do something if synchronization was successful } else { // Do something if synchronization failed } Example No. 2 // Attempts to synchronize with the display if ( mates . sync ( true )) { // Do something if synchronization was successful // and project returned to Page0 } else { // Do something if synchronization failed } Example No. 3 // Attempts to synchronize with the display with a timeout of 10000 if ( mates . sync ( true , 10000 )) { // Do something if synchronization was successful // and project returned to Page0 } else { // Do something if synchronization failed }","title":"sync(resetToPage0, waitPeriod)"},{"location":"controller/arduino-mates-controller/#resetwaitperiod","text":"This function can be used to reset the display by sending a reset pulse from the reset pin specified through the contructor. The default wait period is 5 seconds (5000 ms) or as specified by setBootTimeout(timeout) . The function finishes as soon as the display sends the ready signal or the wait period passes. Parameters Type Description waitPeriod (optional) uint16_t Timeout period to wait until the display is ready (default: boot timeout) Return success or failure ( boolean ) Example No. 1 // Reset the display and wait for mates . reset (); // a period of 5 seconds (default) // (actually the current boot timeout which is 5s by default) Example No. 2 // Reset the display and wait for mates . reset ( 4000 ); // a period of 4 seconds","title":"reset(waitPeriod)"},{"location":"controller/arduino-mates-controller/#softresetwaitperiod","text":"This function can be used to reset the display by sending a reset command. The default wait period is 5 seconds (5000 ms) or as specified by setBootTimeout(timeout) . The function finishes as soon as the display sends the ready signal or the wait period passes. Parameters Type Description waitPeriod (optional) uint16_t Timeout period to wait until the display is ready (default: boot timeout) Return success or failure ( boolean ) Example No. 1 // Reset the display and wait for mates . softReset (); // a period of 5 seconds (default boot timeout) Example No. 2 // Reset the display and wait for mates . softReset ( 4000 ); // a period of 4 seconds","title":"softReset(waitPeriod)"},{"location":"controller/arduino-mates-controller/#setboottimeouttimeout","text":"This function can be used to set the wait period during reset and softReset. Parameters Type Description timeout uint32_t New timeout period to wait until the display is ready Return success or failure ( boolean ) Example mates . setBootTimeout ( 10000 ); // sets boot timeout to a period of 10 seconds","title":"setBootTimeout(timeout)"},{"location":"controller/arduino-mates-controller/#resetboottimeouttimeout","text":"This function can be used to reset the wait period during reset and softReset to the default 5 seconds. Return none Example mates . resetBootTimeout (); // resets boot timeout to the default period","title":"resetBootTimeout(timeout)"},{"location":"controller/arduino-mates-controller/#attacherrorhandlerhandler","text":"Parameters Type Description handler MatesErrorHandler Custom function to handle errors as they come This function can be used to attach and error handler function to the library. Return none Example No. 1 MatesController mates = MatesController ( Serial ); void matesErrorHandler ( MatesError error ) { while ( true ) { digitalWrite ( LED_BUILTIN , HIGH ); delay ( 200 ); digitalWrite ( LED_BUILTIN , LOW ); delay ( 200 ); } // Blink builtin LED and block project execution // This is not ideal but can be used to as simple error indication // Errors should be handled as shown in Example 2 } void setup () { pinMode ( LED_BUILTIN , OUTPUT ); digitalWrite ( LED_BUILTIN , LOW ); // Sets 'matesErrorHandler' as the function for handling possible MatesError mates . attachErrorHandler ( matesErrorHandler ); mates . begin ( 9600 ); // do something... } void loop () { // do something... } Example No. 2 MatesController mates = MatesController ( Serial ); void matesErrorHandler ( MatesError error ) { switch ( error ) { case MATES_ERROR_COMMAND_FAILED : // Do something when last command is invalid break ; case MATES_ERROR_RESPONSE_TIMEOUT : // Do something when the expected response from // the last command wasn't received on time break ; case MATES_ERROR_COMMAND_TIMEOUT : // Do something when the expected acknowledgement from // the last command wasn't received on time break ; case MATES_ERROR_NOT_INITIALIZED : // Do something when the display is not yet ready break ; default : break ; } } void setup () { // Sets 'matesErrorHandler' as the function for handling possible MatesError mates . attachErrorHandler ( matesErrorHandler ); mates . begin ( 9600 ); // do something... } void loop () { // do something... }","title":"attachErrorHandler(handler)"},{"location":"controller/arduino-mates-controller/#setbacklightvalue","text":"This function can be used to set the backlight level to the value specified. Parameters Type Description value uint8_t The target backlight level Return success or failure ( boolean ) Example mates . setBacklight ( 7 ); // Set backlight value to 7","title":"setBacklight(value)"},{"location":"controller/arduino-mates-controller/#setpagepage","text":"This function can be used to navigate to the specified page . Parameters Type Description page uint16_t The target page index Return success or failure ( boolean ) Example mates . setPage ( 1 ); // Navigate to Page1","title":"setPage(page)"},{"location":"controller/arduino-mates-controller/#getpage","text":"This function can be used to query the current active page. Return Active page index ( uint16_t ) Example uint16_t activePage = mates . getPage (); // Query active page","title":"getPage()"},{"location":"controller/arduino-mates-controller/#setwidgetvaluewidget-value","text":"This function can be used to set the 16-bit integer value of the specified widget Parameters Type Description widget int16_t The ID of the target widget value int16_t The new value for the widget Return success or failure ( boolean ) Example mates . setWidgetValue ( MediaGaugeB0 , 50 ); // Set value of MediaGaugeB0 to 50 Note All applicable widget types are listed in here . This function is not applicable to Int32 and Float LedDigits","title":"setWidgetValue(widget, value)"},{"location":"controller/arduino-mates-controller/#getwidgetvaluewidget","text":"This function can be used to query the specified widget 's value. Parameters Type Description widget int16_t The ID of the target widget Return Value of the specified widget ( int16_t ) Example // Query the current value of MediaLed4 int16_t widgetVal = mates . getWidgetValue ( MediaLed4 ); Note All applicable widget types are listed in here . This function is not applicable to Int32 and Float LedDigits","title":"getWidgetValue(widget)"},{"location":"controller/arduino-mates-controller/#setwidgetvaluetype-index-value","text":"This function can be used to set the 16-bit integer value of the widget specified by type and index . Parameters Type Description type MatesWidget The type of the target widget index int8_t The index of the target widget value int16_t The new value for the widget Return success or failure ( boolean ) Example // Set value of MediaGaugeB0 to 50 mates . setWidgetValue ( MATES_MEDIA_GAUGE_B , 0 , 50 ); Note All applicable widget types are listed in here . This function is not applicable to Int32 and Float LedDigits","title":"setWidgetValue(type, index, value)"},{"location":"controller/arduino-mates-controller/#getwidgetvaluetype-index","text":"This function can be used to query the value of the widget specified by type and index . Parameters Type Description type MatesWidget The type of the target widget index int8_t The index of the target widget Return Value of the widget specified by type and index ( int16_t ) Example // Query the current value of MediaLed4 int16_t widgetVal = mates . getWidgetValue ( MATES_MEDIA_LED , 4 ); Note All applicable widget types are listed in here . This function is not applicable to Int32 and Float LedDigits","title":"getWidgetValue(type, index)"},{"location":"controller/arduino-mates-controller/#setleddigitsvalueindex-value","text":"This function can be used to set the 16-bit integer value of the LedDigits specified by index . Parameters Type Description index uint8_t The index of the target LedDigits value int16_t The new value for the LedDigits Return success or failure ( boolean ) Example mates . setLedDigitsValue ( 0 , 1234 ); // Set value of LedDigits0 to 1234 Note This function is only applicable for Int16 LedDigits","title":"setLedDigitsValue(index, value)"},{"location":"controller/arduino-mates-controller/#setleddigitsvalueindex-value_1","text":"This function can be used to set the 32-bit integer value of the LedDigits specified by index . Parameters Type Description index uint8_t The index of the target LedDigits value int32_t The new value for the LedDigits Return success or failure ( boolean ) Example mates . setLedDigitsValue ( 0 , 602214076 ); // Set value of LedDigits0 to 602214076 Note This function is only applicable for Int32 LedDigits","title":"setLedDigitsValue(index, value)"},{"location":"controller/arduino-mates-controller/#setleddigitsvalueindex-value_2","text":"This function can be used to set the float value of the LedDigits specified by index . Parameters Type Description index uint8_t The index of the target LedDigits value float The new value for the LedDigits Return success or failure ( boolean ) Example // Set value of LedDigits1 to 3.1416 mates . setLedDigitsValue ( LedDigits1 , 3.1416 ); Note This function is only applicable for Float LedDigits","title":"setLedDigitsValue(index, value)"},{"location":"controller/arduino-mates-controller/#setspectrumvaluewidget-gaugeindex-value","text":"This function can be used to set the value of a specified gauge index of the spectrum widget specified. Parameters Type Description widget int16_t The ID of the target spectrum widget gaugeIndex uint8_t The gauge index of the target spectrum widget value uint8_t The new value for the widget Return success or failure ( boolean ) Example // Set value of gauge index 2 of LedSpectrum5 to 64 mates . setSpectrumValue ( LedSpectrum5 , 2 , 64 ); Note This function is only applicable for LedSpectrum and MediaSpectrum","title":"setSpectrumValue(widget, gaugeIndex, value)"},{"location":"controller/arduino-mates-controller/#setledspectrumvalueindex-gaugeindex-value","text":"This function can be used to set the value of a specified gaugeIndex of the Led Spectrum widget determined by index . Parameters Type Description index uint8_t The index of the target Led Spectrum widget gaugeIndex uint8_t The gauge index of the target Led Spectrum widget value uint8_t The new value for the column/row of the widget Return success or failure ( boolean ) Example // Set value of gauge index 2 of LedSpectrum5 to 64 mates . setLedSpectrumValue ( 5 , 2 , 64 );","title":"setLedSpectrumValue(index, gaugeIndex, value)"},{"location":"controller/arduino-mates-controller/#setmediaspectrumvaluetype-index-gaugeindex-value","text":"This function can be used to set the value of a specified gaugeIndex of the Media Spectrum widget determined by index . Parameters Type Description index uint8_t The index of the target Led Spectrum widget gaugeIndex uint8_t The gauge index of the target Led Spectrum widget value uint8_t The new value for the column/row of the widget Return success or failure ( boolean ) Example // Set value of gauge index 3 of MediaSpectrum4 to 48 mates . setMediaSpectrumValue ( 4 , 3 , 48 );","title":"setMediaSpectrumValue(type, index, gaugeIndex, value)"},{"location":"controller/arduino-mates-controller/#setmediacolorledvalueindex-r-g-b","text":"This function can be used to set the 32-bit integer value of the LedDigits specified by index . Parameters Type Description index uint8_t The index of the target MediaColorLed r uint8_t The red component of the new color of the MediaColorLed g uint8_t The green component of the new color of the MediaColorLed b uint8_t The blue component of the new color of the MediaColorLed Return success or failure ( boolean ) Example mates . setMediaColorLedValue ( 3 , 255 , 0 , 0 ); // Set value of MediaColorLed3 to RED Note This function is only applicable for MediaColorLeds","title":"setMediaColorLedValue(index, r, g, b)"},{"location":"controller/arduino-mates-controller/#setwidgetparamwidget-param-value","text":"This function can be used to set the parameter ( param ) of the target widget to the specified value . Parameters Type Description widget int16_t The ID of the target widget param int16_t The target widget parameter value int16_t The new value for the widget parameter Return success or failure ( boolean ) Example // Set GaugeA3's Background color to BLACK mates . setWidgetParam ( GaugeA3 , MATES_GAUGE_A_BG_COLOR , BLACK ); Note All applicable widget types are listed in here .","title":"setWidgetParam(widget, param, value)"},{"location":"controller/arduino-mates-controller/#getwidgetparamwidget-param","text":"This function can be used to query the parameter ( param ) of the target widget . Parameters Type Description widget int16_t The ID of the target widget param int16_t The target widget parameter Return The current param value of the widget (int16_t) Example // Query the background color of GaugeA3 int16_t paramVal = mates . getWidgetParam ( GaugeA3 , MATES_GAUGE_A_BG_COLOR ); Note All applicable widget types are listed in here .","title":"getWidgetParam(widget, param)"},{"location":"controller/arduino-mates-controller/#setwidgetparamtype-index-param-value","text":"This function can be used to set the parameter ( param ) of the target widget, determined by type and index , to the specified value . Parameters Type Description type MatesWidget The type of the target widget index int8_t The index of the target widget param int16_t The target widget parameter value int16_t The new value for the widget parameter Return success or failure ( boolean ) Example // Set GaugeA3's Background color to BLACK mates . setWidgetParam ( MATES_GAUGE_A , 3 , MATES_GAUGE_A_BG_COLOR , BLACK ); Note All applicable widget types are listed in here .","title":"setWidgetParam(type, index, param, value);"},{"location":"controller/arduino-mates-controller/#getwidgetparamtype-index-param","text":"This function can be used to query the parameter ( param ) of the target widget, determined by type and index . Parameters Type Description type MatesWidget The type of the target widget index int8_t The index of the target widget param int16_t The target widget parameter Return The current param value of the widget specified by type and index (int16_t) Example // Query the background color of GaugeA3 int16_t paramVal = mates . getWidgetParam ( MATES_GAUGE_A , 3 , MATES_GAUGE_A_BG_COLOR ); Note All applicable widget types are listed in here .","title":"getWidgetParam(type, index, param)"},{"location":"controller/arduino-mates-controller/#setbuffersizesize","text":"This function can be used to adjust the max string buffer size to be used when composing a string for a TextArea or a PrintArea. The string composition is done by updateTextArea(index, format, ...) , updateDotMatrix(index, format, ...) and appendToPrintArea(index, format, ...) Parameters Type Description size uint16_t The new buffer size (max: 1000) Return success or failure (boolean) Example // Increase buffer size to a maximum of 100 characters // including the null terminator mates . setBufferSize ( 100 );","title":"setBufferSize(size)"},{"location":"controller/arduino-mates-controller/#cleartextareaindex","text":"This function can be used to clear the TextArea specified by index . Parameters Type Description index uint16_t The index of the target TextArea widget Return success or failure ( boolean ) Example mates . clearTextArea ( 6 ); // Clear TextArea6","title":"clearTextArea(index)"},{"location":"controller/arduino-mates-controller/#updatetextareaindex-format","text":"This function can be used to update the contents of the TextArea specified by index with the text formed by format and the additional arguments. Parameters Type Description index uint16_t The index of the target TextArea widget format const char * The text to be written to the Text Area ... - Additional values to replace the format specifiers in format Return success or failure ( boolean ) Example No. 1 mates . updateTextArea ( 2 , \"Mates\" ); // Update TextArea2 to \"Mates\" Example No. 2 int value = 76 ; mates . updateTextArea ( 3 , \"Value is %d\" , 76 ); // Print value to TextArea3","title":"updateTextArea(index, format, ...)"},{"location":"controller/arduino-mates-controller/#updatetextareaindex-str","text":"This function can be used to update the contents of the TextArea specified by index with the String 'str'. Parameters Type Description index uint16_t The index of the target TextArea widget str String The String to be written to the Text Area Return success or failure ( boolean ) Example String str = \"Mates\" ; mates . updateTextArea ( 2 , str ); // Update TextArea2 to 'str'","title":"updateTextArea(index, str)"},{"location":"controller/arduino-mates-controller/#clearprintareaindex","text":"This function can be used to clear the PrintArea specified by index . Parameters Type Description index uint16_t The index of the target PrintArea widget Return success or failure ( boolean ) Example mates . clearPrintArea ( 5 ); // Clear PrintArea5","title":"clearPrintArea(index)"},{"location":"controller/arduino-mates-controller/#setprintareacolorindex-rgb565","text":"This function can be used to set the print color ( rgb565 ) used by the PrintArea specified by index . Parameters Type Description index uint16_t The index of the target PrintArea widget rgb565 int16_t The color as a 16-bit RGB565 value Return success or failure ( boolean ) Example // Set print color of PrintArea4 to RED (0xF800) mates . setPrintAreaColor ( 4 , 0xF800 );","title":"setPrintAreaColor(index, rgb565)"},{"location":"controller/arduino-mates-controller/#setprintareacolorindex-r-g-b","text":"This function can be used to set the print color used by the PrintArea specified by index . The color is determined by r , g and b . Parameters Type Description index uint16_t The index of the target PrintArea widget r uint8_t The red component of the new color value g uint8_t The green component of the new color value b uint8_t The blue component of the new color value Return success or failure ( boolean ) Example mates . setPrintAreaColor ( 7 , 0 , 255 , 0 ); // Set print color of PrintArea7 to GREEN","title":"setPrintAreaColor(index, r, g, b)"},{"location":"controller/arduino-mates-controller/#appendtoprintareaindex-buffer-len","text":"This function can be used to append a number of bytes ( len ) from the data in buffer to the PrintArea specified by index . Parameters Type Description index uint16_t The index of the target Print Area widget buffer const int8_t * The source of data to be appended len uint16_t The number of bytes to be sent Return success or failure ( boolean ) Example int8_t data [] = { 0xF8 , 0x7F , 0x1F }; mates . appendToPrintArea ( 7 , data , 3 ); // Append data to PrintArea7","title":"appendToPrintArea(index, buffer, len)"},{"location":"controller/arduino-mates-controller/#appendtoprintareaindex-format","text":"This function can be used to append contents to the PrintArea specified by index with the text formed by format and the additional arguments. Parameters Type Description index uint16_t The index of the target Print Area widget format const char * The text to be written to the PrintArea ... - Additional values to replace the format specifiers in format Return success or failure ( boolean ) Example No. 1 mates . appendToPrintArea ( 8 , \"Mates\" ); // Append \"Mates\" to PrintArea8 Example No. 2 int value = 108 ; // Append value as text to PrintArea9 mates . appendToPrintArea ( 9 , \"Value: %d\" , 108 );","title":"appendToPrintArea(index, format, ...)"},{"location":"controller/arduino-mates-controller/#appendtoprintareaindex-str","text":"This function can be used to append contents to the PrintArea specified by index with the String provided. Parameters Type Description index uint16_t The index of the target Print Area widget str String The text to be written to the PrintArea Return success or failure ( boolean ) Example String str = \"Mates\" ; mates . appendToPrintArea ( 2 , str ); // // Append 'str' to PrintArea2","title":"appendToPrintArea(index, str)"},{"location":"controller/arduino-mates-controller/#appendtoscopeindex-buffer-len","text":"This function can be used to append a number of 16-bit values ( len ) from the data in buffer to the Scope widget specified by index . Parameters Type Description index uint16_t The index of the target Scope widget buffer const int16_t * The source of data to be appended len uint16_t The number of values to be sent Return success or failure ( boolean ) Example int16_t data [] = { 0xF8 , 0x7F , 0x1F }; mates . appendToScope ( 7 , data , 3 ); // Append data to Scope7","title":"appendToScope(index, buffer, len)"},{"location":"controller/arduino-mates-controller/#updatedotmatrixindex-format","text":"This function can be used to append contents to the DotMatrix specified by index with the text formed by format and the additional arguments. Parameters Type Description index uint16_t The index of the target DotMatrix widget format const char * The text to be written to the DotMatrix ... - Additional values to replace the format specifiers in format Return success or failure ( boolean ) Example No. 1 mates . updateDotMatrix ( 8 , \"Mates\" ); // Update DotMatrix0 to \"Mates\" Example No. 2 int value = 108 ; mates . updateDotMatrix ( 9 , \"Value: %d\" , 108 ); // Update DotMatrix0 to show value","title":"updateDotMatrix(index, format, ...)"},{"location":"controller/arduino-mates-controller/#updatedotmatrixindex-str","text":"This function can be used to update the contents of the DotMatrix specified by index with the String 'str'. Parameters Type Description index uint16_t The index of the target DotMatrix widget str String The String to be written to the DotMatrix Return success or failure ( boolean ) Example String str = \"Mates\" ; mates . updateDotMatrix ( 2 , str ); // Update DotMatrix2 to 'str'","title":"updateDotMatrix(index, str)"},{"location":"controller/arduino-mates-controller/#getbuttoneventcount","text":"This function can be used to query the number of button events recorded by a touch screen module Return Number of recorded button events ( uint16_t ) Example // Query the number of button events recorded uint16_t btnEvents = mates . getButtonEventCount ();","title":"getButtonEventCount()"},{"location":"controller/arduino-mates-controller/#getnextbuttonevent","text":"This function can be used to query the source of next recorded button event Return Widget ID of the next event button ( int16_t ) Example // If there is any event recorded if ( mates . getButtonEventCount () > 0 ) { int16_t button = mates . getNextButtonEvent (); switch ( button ) { case MediaButton1 : // if the button pressed is MediaButton1 // do something break ; // add more possible cases here... default : break ; } }","title":"getNextButtonEvent()"},{"location":"controller/arduino-mates-controller/#getswipeeventcount","text":"This function can be used to query the number of swipe events recorded by a touch screen module Return Number of recorded swipe events ( uint16_t ) Example // Query the number of swipe events recorded uint16_t swipeEvents = mates . getSwipeEventCount ();","title":"getSwipeEventCount()"},{"location":"controller/arduino-mates-controller/#getnextbuttonevent_1","text":"This function can be used to query the source of next recorded button event Return Swipe event (int16_t) Example // If there is any event recorded if ( mates . getSwipeEventCount () > 0 ) { int16_t swipe = mates . getNextSwipeEvent (); if (( swipe & MATES_SWIPE_SOUTH ) == MATES_SWIPE_SOUTH ) { // if swipe is towards from top to bottom } if (( swipe & MATES_SWIPE_EAST ) == MATES_SWIPE_EAST ) { // if swipe is towards from left to right } if (( swipe & MATES_SWIPE_TLBR ) == MATES_SWIPE_TLBR ) { // if swipe is towards from top left to bottom right } }","title":"getNextButtonEvent()"},{"location":"controller/arduino-mates-controller/#getversion","text":"This function can be used to query the version number of the library. Return Version Information ( String ) Example // Get the library version number as string String matesVersion = mates . getVersion ();","title":"getVersion()"},{"location":"controller/arduino-mates-controller/#getcompatibility","text":"This function can be used to query the version number of Mates Studio compatible with the version of the library. Return Compatibility Version Information ( String ) Example // Get the compatible Mates Studio version number as string String compatVersion = mates . getCompatibility ();","title":"getCompatibility()"},{"location":"controller/arduino-mates-controller/#printversion","text":"This function can be used to print the version number of the library and the compatible Mates Studio version to the debug serial port. If no debug serial was specified in the constructor, this function does nothing. Return none Example // Prints library version and compatible Mates Studio version to debug serial mates . printVersion ();","title":"printVersion()"},{"location":"controller/arduino-mates-controller/#geterror","text":"This function can be used to investigate errors that occurred while controlling the display module. Description of the possible errors is discussed in here . Return Current error code ( MatesError ) Example // Checks the last error that occurred int error = mates . getError (); if ( error == MATES_ERROR_NONE ) { // Last command was successful }","title":"getError()"},{"location":"controller/bbm-python-mates-controller/","text":"","title":"Bbm python mates controller"},{"location":"controller/c-mates-controller/","text":"","title":"C mates controller"},{"location":"controller/micropython-mates-controller/","text":"","title":"Micropython mates controller"},{"location":"controller/python-mates-controller/","text":"Python Mates Controller Library Introduction This library is developed to easily control Breadboard Mates modules using any device that can run Python boards by utilizing the Mates Controller Command Protocol . This applies to projects developed using Commander and Architect environments. Supported Devices This library is developed for Python3 and designed to be used with any operating system as long as it is supported by the pyserial library. Installation This library can be installed from the Python Packaging Index (PyPI) by running the command: pip3 install mates-controller Constructors This section serves to provide brief discussion about the constructors that can be used to initialize the library. MatesController(portName, resetFunction, debugStream, debugFileLength) Constructs all the necessary attributes associated with an instance of a Mates Controller Object. Parameters Type Description portName str The name of the port to be opened. Example: /dev/ttyUSB0 for linux resetFunction function Function used to perform a hard reset debugStream (optional) io.TextIOWrapper Text file object to write debugging code to, supply of none will result in no debugging. Ex. sys.stdout , open('log.txt', 'r+') debugFileLength (optional) int Determines the extent of debug history kept with respect to lines in a file, given a circular log. O indicates full history kept with no circular logging. Users must be careful here to manage storage space effectively Example No. 1 # Creates a new instance named 'mates' which utilizes: # - COM10 as the serial port # - with no reset function and no output stream MatesController mates = MatesController ( \"COM10\" ) Example No. 2 def resetModule (): # perform reset of 100ms pulse to the RST pin # set reset pulse # wait for 100ms # unset reset pulse # Creates a new instance named 'mates' which utilizes: # - COM10 as the serial port # - resetModule as the reset function # - output_file as debug file stream # - debugFileLength of zero indicating no circular logging MatesController mates = MatesController ( \"COM10\" , resetFunction = resetModule , debugStream = output_file , debugFileLength = 0 ) Note If a debug file is specified, it should be opened using either 'w+' or 'r+' before running the begin() function of this library. Methods This section serves to provide brief discussion about the methods that can be used with a MatesController instance. begin(baudrate) Begins the serial connection if portname not supplied in constructor. Parameters Type Description baudrate str the baudrate of the serial port (default: 9600) Return None Example # Initializes display serial port 9600 baud # and resets the display if a reset function is provided mates . begin ( 9600 ) close() Closes opened serial port. Return id Example # Closes serial port mates . close () reset(waitPeriod) Uses hardware driven signal to hard reset companion device. Args : wait_period: int determines how long to wait (milliseconds) before checking for connection. Value must be within the uint16 datatype range (default: 5000) Return success or failure ( boolean ) Example # Reset the display and wait for mates . reset () # a period of 5 seconds (default) # Reset the display and wait for # mates.reset(4000) # a period of 4 seconds softReset(waitPeriod) Sends a serial command to the connected device to trigger a reset. Args : waitPeriod: int determines how long (milliseconds) to wait before timing out after no acknowledgement. Value must be within the uint16 datatype range. Return success or failure ( boolean ) Example # Reset the display and wait for mates . softReset () # a period of 5 seconds (default) # Reset the display and wait for mates . softReset ( 4000 ) # a period of 4 seconds setBacklight(backlightValue) Sets the intensity of the backlight of connected device. Args : backlightValue: int intensity of backlight. Value must be between 0 and 15, and within the uint8 datatype range. Return success or failure ( boolean ) Example # set backlight value of 15 (max) mates . setBacklight ( 15 ) setPage(pageIndex) Sets the page to be displayed on the connected device. Args : pageIndex: int index of page to set as current. Value must be within the uint16 datatype range. Return success or failure ( boolean ) Example mates . setPage ( 1 ) # Navigate to Page1 getPage() Returns the index of the current page displayed by the connected device. Return Active page index ( int ) Example activePage = mates . getPage () # Query active page setWidgetValueById(widgetId, value) Sets the value of a specific widget based on the provided widgetId. Args : widgetId: int - the unique id of the desired widget. Value must exist within the int16 datatype range. value: int the value the corresponding widget will be set to. Value must exist within the int16 datatype range. Return success or failure ( boolean ) Example mates . setWidgetValueById ( MediaGaugeB0 , 50 ) # Set value of MediaGaugeB0 to 50 # Note: The ID of MediaGaugeB0 can be copied or exported from Mates Studio getWidgetValueById(widgetId) Gets the value of a specific widget based on the provided identifier. Args : widgetId: int the unique id of the target widget. Value must be within the uint16 datatype range Return Value of the widget specified by widgetId ( int ) Example widgetVal = mates . getWidgetValue ( MediaLed4 ) # Query the current value of MediaLed4 # Note: The ID of MediaLed4 can be copied or exported from Mates Studio setWidgetValueByIndex(widgetType, widgetIndex, value) Sets the value of a specific widget based on the index within a widget type. Args : widgetType: MatesWidget the unique type of widget to be changed. widgetIndex: int the index of the widget, of a specific type. Value must be within the uint8 datatype range. value: int the value the corresponding widget will be set to. Value must be within the int16 datatype range. Return success or failure ( boolean ) Example mates . setWidgetValue ( MATES_MEDIA_GAUGE_B , 0 , 50 ) # Set value of MediaGaugeB0 to 50 Note All applicable widget types are listed in here . getWidgetValueByIndex(widgetType, widgetIndex) Gets the value of a specific widget based on the index within a widget type. Args : widgetType: MatesWidget the unique type of widget to be changed. widgetIndex: int the index of the widget, of a specific type. Value must be within the uint8 datatype range. Return Value of the widget specified by widgetType and widgetIndex ( int ) Example No. 1 widgetVal = mates . getWidgetValue ( MATES_MEDIA_LED , 4 ) # Query the current value of MediaLed4 Note This function is not applicable to Int32 and Float LedDigits setLedDigitsShortValue(widgetIndex, value) Sets the 16-bit integer value of the Led Digits widget specified by widgetIndex. Args : widgetIndex: int the index of the LED Digits widget. Value must be within uint8 datatype range. value: int, float the value the corresponding widget will be set to. Values must be within the int16 datatype range. Return success or failure ( boolean ) Example mates . setLedDigitsShortValue ( 2 , 50 ) # Set value of LedDigits2 to 50 Note This function is only applicable for Int16 LedDigits setLedDigitsLongValue(widgetIndex, value) Sets the 32-bit integer value of the Led Digits widget specified by widgetIndex. Args : widgetIndex: int the index of the LED Digits widget. Value must be within uint8 datatype range. value: int, float the value the corresponding widget will be set to. Values must be within the int32 datatype range. Return success or failure ( boolean ) Example mates . setLedDigitsLongValue ( 2 , 50 ) # Set value of LedDigits2 to 50 Note This function is only applicable for Int32 LedDigits setLedDigitsFloatValue(widgetIndex, value): Sets the 32-bit float value of the Led Digits widget specified by widgetIndex. Args : widgetIndex: int - the index of the LED Digits widget. Value must be within uint8 datatype range. value: int, float - the value the corresponding widget will be set to. Values must be within the float32 datatype range. Return success or failure ( boolean ) Example mates . setLedDigitsFloatValue ( 2 , 9.989 ) # Set value of LedDigits2 to 9.989 Note This function is only applicable for Float LedDigits setSpectrumValue(spectrumId, gaugeIndex, value) Sets the value of the column (specified by gaugeIndex) of the spectrum widget (specified by spectrumId). Args : spectrumId: int the id of the relevant Spectrum widget. Value must be within the int16 datatype range. gaugeIndex: int the gauge index within the target Spectrum widget. Value must be within the uint8 datatype range. value: int the value the corresponding widget will be set to. Value must be within the uint8 datatype range. Return success or failure ( boolean ) Example mates . setSpectrumValue ( MatesLedSpectrum5 , 2 , 64 ) # Set value of gauge index 2 of LedSpectrum5 to 64 setLedSpectrumValue(ledSpectrumIndex, gaugeIndex, value) Sets the value of the column (specified by gaugeIndex) of the Led Spectrum widget (specified by ledSpectrumIndex). Args : ledSpectrumIndex: int the index of the desired LED Spectrum widget. Value must be within the uint8 datatype range. gaugeIndex: int the gauge index within the target LED Spectrum widget. Value must be within the uint8 datatype range. value: int the value the corresponding widget will be set to. Value must be within the uint8 datatype range. Return success or failure ( boolean ) Example mates . setLedSpectrumValue ( 5 , 2 , 64 ) # Set value of gauge index 2 of LedSpectrum5 to 64 setMediaSpectrumValue(mediaIndex, gaugeIndex, value) Sets the value of the column (specified by gaugeIndex) of the Media Spectrum widget (specified by ledSpectrumIndex). Args : mediaIndex: int the index of the Media Spectrum widget. Value must be within the uint8 datatype range. gaugeIndex: int the index of the desired gauge. Value must be within the uint8 datatype range. value: int the value the corresponding widget will be set to. Value must be within the uint8 datatype range. Return success or failure ( boolean ) Example mates . setMediaSpectrumValue ( 4 , 3 , 48 ) # Set value of gauge index 3 of MediaSpectrum4 to 48 setWidgetParamById(widgetId, param, value) Sets the value of a widget parameter based on widget id and parameter id. Args : widgetId: int the unique id of the target widget. Value must be within the int16 datatype range. param: int the unique id of the target parameter. Value must be within the int16 datatype range. value: int the value the corresponding parameter will be set to. Value must be within the int16 datatype range. Return success or failure ( boolean ) Example # Set GaugeA3's Background color to BLACK mates . setWidgetParamById ( GaugeA3 , MATES_GAUGE_A_BG_COLOR , BLACK ) # Note: The ID of GaugeA3 can be copied or exported from Mates Studio getWidgetParamById(widgetId, param) Gets the value of a widget parameter based on widget id and parameter id. Args : widgetId: int - the unique id of the target widget. Value must be within the int16 datatype range. param: int - the unique id of the target parameter. Value must be within the int16 datatype range. Return The current param value of the widget specified by widgetId ( int ) Example # Query the background color of GaugeA3 paramVal = mates . getWidgetParamById ( GaugeA3 , MATES_GAUGE_A_BG_COLOR ) # Note: The ID of GaugeA3 can be copied or exported from Mates Studio setWidgetParamByIndex(widgetType, widgetIndex, param, value) Sets the value of a widget parameter based on widget index and parameter id. Args : widgetType: MatesWidget the type of the target widget. widgetIndex: int the index of the target widget. Value must be within the uint8 datatype range. param: int the unique id of the target parameter. Value must be within the int16 datatype range. value: int the value the corresponding parameter will be set to. Value must be within the int16 datatype range. Return success or failure ( boolean ) Example # Set GaugeA3's Background color to BLACK mates . setWidgetParamByIndex ( MATES_GAUGE_A , 3 , MATES_GAUGE_A_BG_COLOR , BLACK ) getWidgetParamByIndex(widgetType, widgetIndex, param) Gets the value of a widget parameter based on widget index and parameter id. Args : widgetType: MatesWidget the type of the target widget. widgetIndex: int the index of the target widget. Value must be within the uint8 datatype range. param: int the unique id of the target parameter. Value must be within the int16 datatype range. Return The current param value of the widget specified by widgetType and widgetIndex ( int ) Example # Query the background color of GaugeA3 paramVal = mates . getWidgetParamByIndex ( MATES_GAUGE_A , 3 , MATES_GAUGE_A_BG_COLOR ) clearTextArea(textAreaIndex) Clears a targeted Text Area. Args : textAreaIndex: int the index of the target Text Area widget. Value must be within the uint16 datatype range. Return success or failure ( boolean ) Example mates . clearTextArea ( 6 ) # Clear TextArea6 updateTextArea(textAreaIndex, textFormat, *formatArgs) Updates the text displayed within Text Area widget. Args : textAreaIndex: int the index of the target Text Area widget. Value must be within the uint16 datatype range. textFormat: str the string format to be displayed. formatArgs: zero or more values to be formatted into the provided text format string. Return success or failure ( boolean ) Example No. 1 mates . updateTextArea ( 2 , \"Mates\" ) # Update TextArea2 to \"Mates\" Example No. 2 value = 76 mates . updateTextArea ( 3 , \"Value is {} \" , value ) # Print value to TextArea3 clearPrintArea(printAreaIndex: int) Clears a targeted Print Area. Args : printAreaIndex: int - the index of the target Print Area widget. Value must be within the uint16 datatype range. Return success or failure ( boolean ) Example mates . clearPrintArea ( 5 ) # Clear PrintArea5 setPrintAreaColor565(printAreaIndex, rgb565) Sets the color of a PrintArea Widget based on an rgb565 value. Args : printAreaIndex: int - index of widget, value must be within uint16 datatype range. rgb565: int - colour to set widget to, value must be within uint16 datatype range. Returns: boolean response indicating command success or failure. Example mates . setPrintAreaColor ( 4 , 0xF800 ) # Set print color of PrintArea4 to RED (0xF800) setPrintAreaColorRGB(printAreaIndex, red, green, blue) Sets the colour of a targeted Print Area. Args : printAreaIndex: int the index of the target Print Area widget. Value must be within the uint16 datatype range. red: int Unsigned 8 bit integer value of red concentration. Value must be within the uint8 datatype range. blue: int Unsigned 8 bit integer value of green concentration. Value must be within the uint8 datatype range. green: int Unsigned 8 bit integer value of blue concentration. Value must be within the uint8 datatype range. Return success or failure ( boolean ) Example mates . setPrintAreaColor ( 7 , 0 , 255 , 0 ) # Set print color of PrintArea7 to GREEN appendArrayToPrintArea(printAreaIndex, array) Appends an array of 8-bit integers to a targeted Print Area. Args : printAreaIndex: int the index of the target Print Area widget. Value must be within the uint16 datatype range. buffer: [int] the list of datapoints to be appended to scope widget. Values must be within the uint8 datatype range. Return success or failure ( boolean ) Example arr = [ 0xAB , 0xCD , 0xEF ] mates . appendArrayToPrintArea ( 6 , arr ) # Append \"0xAB, 0xCD, 0xEF\" to PrintArea6 appendStringToPrintArea(printAreaIndex, textFormat, *formatArgs) Appends text to a targeted Print Area. Args : printAreaIndex: int the index of the target Print Area widget. Value must be within the uint16 datatype range. textFormat: str the string to be appended to the Print Area with zero or more format specifiers to be formatted. formatArgs: zero or more args that can be formatted into the textFormat string. Return success or failure ( boolean ) Example No. 1 mates . appendStringToPrintArea ( 8 , \"Mates\" ) # Append \"Mates\" to PrintArea8 Example No. 2 Example No . 2 : value = 108 mates . appendStringToPrintArea ( 9 , \"Value: {} \" , value ) # Append value as text to PrintArea9 appendToScopeWidget(scopeIndex, buffer) Appends a list of integers to a Scope widget. Args : scopeIndex: int the index of the target Scope widget. Value must be within the uint16 datatype range. buffer: [int] the list of datapoints to be appended to scope widget. Values must be within the int16 datatype range. Return success or failure ( boolean ) Example data = { 0xF8 , 0x7F , 0x1F } mates . appendToScopeWidget ( 7 , data , 3 ) # Append data to Scope Widget 7 updateDotMatrixWidget(matrixIndex, textFormat, *formatArgs) Changes the text displayed by the target Dot Matrix widget. Args : matrixIndex (int): matrix index. The index of the target Scope widget. Value must be within the uint16 datatype range. textFormat: str the string to be appended to the Scope widget with zero or more format specifiers to be formatted. formatArgs: zero or more args that can be formatted into the text_format string. Return success or failure ( boolean ) Example No. 1 mates . updateDotMatrix ( 8 , \"Mates\" ) # Update DotMatrix0 to \"Mates\" Example No. 2 value = 108 mates . updateDotMatrix ( 9 , \"Value: {} \" , value ) # Update DotMatrix0 to show value getButtonEventCount() Gets the number of events recorded from applicable button widgets. Return Number of recorded button events ( int ) Example # Get the number of logged button events buttonEvents = mates . getButtonEventCount () getNextButtonEvent() Gets the next event source logged from applicable buttons. Return Widget ID of the next event button ( int ) Example # If there is any event recorded if mates . getButtonEventCount () > 0 : button = mates . getNextButtonEvent () if ( button == MediaButton1 ): # if the button pressed is MediaButton1 # do something # add more possible cases here... getSwipeEventCount() Gets the number of events recorded from swipe gestures. Return Number of recorded swipe events ( int ) Example # Get the number of logged swipe events swipeEvents = mates . getSwipeEventCount () getNextSwipeEvent() Gets the next swipe event value. Return integer corresponding to the swipe event. Example # If there is any event recorded if mates . getSwipeEventCount () > 0 : swipe = mates . getNextSwipeEvent () if (( swipe & MATES_SWIPE_SOUTH ) == MATES_SWIPE_SOUTH ): # if swipe is towards from top to bottom if (( swipe & MATES_SWIPE_EAST ) == MATES_SWIPE_EAST ): # if swipe is towards from left to right if (( swipe & MATES_SWIPE_TLBR ) == MATES_SWIPE_TLBR ): # if swipe is towards from top left to bottom right getVersion() Helper function to obtain the version of the Python Mates Controller library. Return Version Information ( str ) Example # Get the library version number as string matesVersion = mates . getVersion () getCompatibility() Helper function to obtain the version of the Mates Studio compatible with this library version. Return Compatibility Version Information ( str ) Example # Get the compatible Mates Studio version number as string compatVersion = mates . getCompatibility () printVersion() Debugging function to print the version of the Mates Studio compatible along with this specific library version. Return None Example # Prints library version and compatible Mates Studio version to debug serial mates . printVersion () getError() This function can be used to investigate errors that occurred while controlling the display module. Description of the possible errors is discussed in here . Return Current error code ( MatesError ) Example # Checks the last error that occurred error = mates . getError () if error == MATES_ERROR_NONE : # Last command was successful","title":"Python"},{"location":"controller/python-mates-controller/#python-mates-controller-library","text":"","title":"Python Mates Controller Library"},{"location":"controller/python-mates-controller/#introduction","text":"This library is developed to easily control Breadboard Mates modules using any device that can run Python boards by utilizing the Mates Controller Command Protocol . This applies to projects developed using Commander and Architect environments.","title":"Introduction"},{"location":"controller/python-mates-controller/#supported-devices","text":"This library is developed for Python3 and designed to be used with any operating system as long as it is supported by the pyserial library.","title":"Supported Devices"},{"location":"controller/python-mates-controller/#installation","text":"This library can be installed from the Python Packaging Index (PyPI) by running the command: pip3 install mates-controller","title":"Installation"},{"location":"controller/python-mates-controller/#constructors","text":"This section serves to provide brief discussion about the constructors that can be used to initialize the library.","title":"Constructors"},{"location":"controller/python-mates-controller/#matescontrollerportname-resetfunction-debugstream-debugfilelength","text":"Constructs all the necessary attributes associated with an instance of a Mates Controller Object. Parameters Type Description portName str The name of the port to be opened. Example: /dev/ttyUSB0 for linux resetFunction function Function used to perform a hard reset debugStream (optional) io.TextIOWrapper Text file object to write debugging code to, supply of none will result in no debugging. Ex. sys.stdout , open('log.txt', 'r+') debugFileLength (optional) int Determines the extent of debug history kept with respect to lines in a file, given a circular log. O indicates full history kept with no circular logging. Users must be careful here to manage storage space effectively Example No. 1 # Creates a new instance named 'mates' which utilizes: # - COM10 as the serial port # - with no reset function and no output stream MatesController mates = MatesController ( \"COM10\" ) Example No. 2 def resetModule (): # perform reset of 100ms pulse to the RST pin # set reset pulse # wait for 100ms # unset reset pulse # Creates a new instance named 'mates' which utilizes: # - COM10 as the serial port # - resetModule as the reset function # - output_file as debug file stream # - debugFileLength of zero indicating no circular logging MatesController mates = MatesController ( \"COM10\" , resetFunction = resetModule , debugStream = output_file , debugFileLength = 0 ) Note If a debug file is specified, it should be opened using either 'w+' or 'r+' before running the begin() function of this library.","title":"MatesController(portName, resetFunction, debugStream, debugFileLength)"},{"location":"controller/python-mates-controller/#methods","text":"This section serves to provide brief discussion about the methods that can be used with a MatesController instance.","title":"Methods"},{"location":"controller/python-mates-controller/#beginbaudrate","text":"Begins the serial connection if portname not supplied in constructor. Parameters Type Description baudrate str the baudrate of the serial port (default: 9600) Return None Example # Initializes display serial port 9600 baud # and resets the display if a reset function is provided mates . begin ( 9600 )","title":"begin(baudrate)"},{"location":"controller/python-mates-controller/#close","text":"Closes opened serial port. Return id Example # Closes serial port mates . close ()","title":"close()"},{"location":"controller/python-mates-controller/#resetwaitperiod","text":"Uses hardware driven signal to hard reset companion device. Args : wait_period: int determines how long to wait (milliseconds) before checking for connection. Value must be within the uint16 datatype range (default: 5000) Return success or failure ( boolean ) Example # Reset the display and wait for mates . reset () # a period of 5 seconds (default) # Reset the display and wait for # mates.reset(4000) # a period of 4 seconds","title":"reset(waitPeriod)"},{"location":"controller/python-mates-controller/#softresetwaitperiod","text":"Sends a serial command to the connected device to trigger a reset. Args : waitPeriod: int determines how long (milliseconds) to wait before timing out after no acknowledgement. Value must be within the uint16 datatype range. Return success or failure ( boolean ) Example # Reset the display and wait for mates . softReset () # a period of 5 seconds (default) # Reset the display and wait for mates . softReset ( 4000 ) # a period of 4 seconds","title":"softReset(waitPeriod)"},{"location":"controller/python-mates-controller/#setbacklightbacklightvalue","text":"Sets the intensity of the backlight of connected device. Args : backlightValue: int intensity of backlight. Value must be between 0 and 15, and within the uint8 datatype range. Return success or failure ( boolean ) Example # set backlight value of 15 (max) mates . setBacklight ( 15 )","title":"setBacklight(backlightValue)"},{"location":"controller/python-mates-controller/#setpagepageindex","text":"Sets the page to be displayed on the connected device. Args : pageIndex: int index of page to set as current. Value must be within the uint16 datatype range. Return success or failure ( boolean ) Example mates . setPage ( 1 ) # Navigate to Page1","title":"setPage(pageIndex)"},{"location":"controller/python-mates-controller/#getpage","text":"Returns the index of the current page displayed by the connected device. Return Active page index ( int ) Example activePage = mates . getPage () # Query active page","title":"getPage()"},{"location":"controller/python-mates-controller/#setwidgetvaluebyidwidgetid-value","text":"Sets the value of a specific widget based on the provided widgetId. Args : widgetId: int - the unique id of the desired widget. Value must exist within the int16 datatype range. value: int the value the corresponding widget will be set to. Value must exist within the int16 datatype range. Return success or failure ( boolean ) Example mates . setWidgetValueById ( MediaGaugeB0 , 50 ) # Set value of MediaGaugeB0 to 50 # Note: The ID of MediaGaugeB0 can be copied or exported from Mates Studio","title":"setWidgetValueById(widgetId, value)"},{"location":"controller/python-mates-controller/#getwidgetvaluebyidwidgetid","text":"Gets the value of a specific widget based on the provided identifier. Args : widgetId: int the unique id of the target widget. Value must be within the uint16 datatype range Return Value of the widget specified by widgetId ( int ) Example widgetVal = mates . getWidgetValue ( MediaLed4 ) # Query the current value of MediaLed4 # Note: The ID of MediaLed4 can be copied or exported from Mates Studio","title":"getWidgetValueById(widgetId)"},{"location":"controller/python-mates-controller/#setwidgetvaluebyindexwidgettype-widgetindex-value","text":"Sets the value of a specific widget based on the index within a widget type. Args : widgetType: MatesWidget the unique type of widget to be changed. widgetIndex: int the index of the widget, of a specific type. Value must be within the uint8 datatype range. value: int the value the corresponding widget will be set to. Value must be within the int16 datatype range. Return success or failure ( boolean ) Example mates . setWidgetValue ( MATES_MEDIA_GAUGE_B , 0 , 50 ) # Set value of MediaGaugeB0 to 50 Note All applicable widget types are listed in here .","title":"setWidgetValueByIndex(widgetType, widgetIndex, value)"},{"location":"controller/python-mates-controller/#getwidgetvaluebyindexwidgettype-widgetindex","text":"Gets the value of a specific widget based on the index within a widget type. Args : widgetType: MatesWidget the unique type of widget to be changed. widgetIndex: int the index of the widget, of a specific type. Value must be within the uint8 datatype range. Return Value of the widget specified by widgetType and widgetIndex ( int ) Example No. 1 widgetVal = mates . getWidgetValue ( MATES_MEDIA_LED , 4 ) # Query the current value of MediaLed4 Note This function is not applicable to Int32 and Float LedDigits","title":"getWidgetValueByIndex(widgetType, widgetIndex)"},{"location":"controller/python-mates-controller/#setleddigitsshortvaluewidgetindex-value","text":"Sets the 16-bit integer value of the Led Digits widget specified by widgetIndex. Args : widgetIndex: int the index of the LED Digits widget. Value must be within uint8 datatype range. value: int, float the value the corresponding widget will be set to. Values must be within the int16 datatype range. Return success or failure ( boolean ) Example mates . setLedDigitsShortValue ( 2 , 50 ) # Set value of LedDigits2 to 50 Note This function is only applicable for Int16 LedDigits","title":"setLedDigitsShortValue(widgetIndex, value)"},{"location":"controller/python-mates-controller/#setleddigitslongvaluewidgetindex-value","text":"Sets the 32-bit integer value of the Led Digits widget specified by widgetIndex. Args : widgetIndex: int the index of the LED Digits widget. Value must be within uint8 datatype range. value: int, float the value the corresponding widget will be set to. Values must be within the int32 datatype range. Return success or failure ( boolean ) Example mates . setLedDigitsLongValue ( 2 , 50 ) # Set value of LedDigits2 to 50 Note This function is only applicable for Int32 LedDigits","title":"setLedDigitsLongValue(widgetIndex, value)"},{"location":"controller/python-mates-controller/#setleddigitsfloatvaluewidgetindex-value","text":"Sets the 32-bit float value of the Led Digits widget specified by widgetIndex. Args : widgetIndex: int - the index of the LED Digits widget. Value must be within uint8 datatype range. value: int, float - the value the corresponding widget will be set to. Values must be within the float32 datatype range. Return success or failure ( boolean ) Example mates . setLedDigitsFloatValue ( 2 , 9.989 ) # Set value of LedDigits2 to 9.989 Note This function is only applicable for Float LedDigits","title":"setLedDigitsFloatValue(widgetIndex, value):"},{"location":"controller/python-mates-controller/#setspectrumvaluespectrumid-gaugeindex-value","text":"Sets the value of the column (specified by gaugeIndex) of the spectrum widget (specified by spectrumId). Args : spectrumId: int the id of the relevant Spectrum widget. Value must be within the int16 datatype range. gaugeIndex: int the gauge index within the target Spectrum widget. Value must be within the uint8 datatype range. value: int the value the corresponding widget will be set to. Value must be within the uint8 datatype range. Return success or failure ( boolean ) Example mates . setSpectrumValue ( MatesLedSpectrum5 , 2 , 64 ) # Set value of gauge index 2 of LedSpectrum5 to 64","title":"setSpectrumValue(spectrumId, gaugeIndex, value)"},{"location":"controller/python-mates-controller/#setledspectrumvalueledspectrumindex-gaugeindex-value","text":"Sets the value of the column (specified by gaugeIndex) of the Led Spectrum widget (specified by ledSpectrumIndex). Args : ledSpectrumIndex: int the index of the desired LED Spectrum widget. Value must be within the uint8 datatype range. gaugeIndex: int the gauge index within the target LED Spectrum widget. Value must be within the uint8 datatype range. value: int the value the corresponding widget will be set to. Value must be within the uint8 datatype range. Return success or failure ( boolean ) Example mates . setLedSpectrumValue ( 5 , 2 , 64 ) # Set value of gauge index 2 of LedSpectrum5 to 64","title":"setLedSpectrumValue(ledSpectrumIndex, gaugeIndex, value)"},{"location":"controller/python-mates-controller/#setmediaspectrumvaluemediaindex-gaugeindex-value","text":"Sets the value of the column (specified by gaugeIndex) of the Media Spectrum widget (specified by ledSpectrumIndex). Args : mediaIndex: int the index of the Media Spectrum widget. Value must be within the uint8 datatype range. gaugeIndex: int the index of the desired gauge. Value must be within the uint8 datatype range. value: int the value the corresponding widget will be set to. Value must be within the uint8 datatype range. Return success or failure ( boolean ) Example mates . setMediaSpectrumValue ( 4 , 3 , 48 ) # Set value of gauge index 3 of MediaSpectrum4 to 48","title":"setMediaSpectrumValue(mediaIndex, gaugeIndex, value)"},{"location":"controller/python-mates-controller/#setwidgetparambyidwidgetid-param-value","text":"Sets the value of a widget parameter based on widget id and parameter id. Args : widgetId: int the unique id of the target widget. Value must be within the int16 datatype range. param: int the unique id of the target parameter. Value must be within the int16 datatype range. value: int the value the corresponding parameter will be set to. Value must be within the int16 datatype range. Return success or failure ( boolean ) Example # Set GaugeA3's Background color to BLACK mates . setWidgetParamById ( GaugeA3 , MATES_GAUGE_A_BG_COLOR , BLACK ) # Note: The ID of GaugeA3 can be copied or exported from Mates Studio","title":"setWidgetParamById(widgetId, param, value)"},{"location":"controller/python-mates-controller/#getwidgetparambyidwidgetid-param","text":"Gets the value of a widget parameter based on widget id and parameter id. Args : widgetId: int - the unique id of the target widget. Value must be within the int16 datatype range. param: int - the unique id of the target parameter. Value must be within the int16 datatype range. Return The current param value of the widget specified by widgetId ( int ) Example # Query the background color of GaugeA3 paramVal = mates . getWidgetParamById ( GaugeA3 , MATES_GAUGE_A_BG_COLOR ) # Note: The ID of GaugeA3 can be copied or exported from Mates Studio","title":"getWidgetParamById(widgetId, param)"},{"location":"controller/python-mates-controller/#setwidgetparambyindexwidgettype-widgetindex-param-value","text":"Sets the value of a widget parameter based on widget index and parameter id. Args : widgetType: MatesWidget the type of the target widget. widgetIndex: int the index of the target widget. Value must be within the uint8 datatype range. param: int the unique id of the target parameter. Value must be within the int16 datatype range. value: int the value the corresponding parameter will be set to. Value must be within the int16 datatype range. Return success or failure ( boolean ) Example # Set GaugeA3's Background color to BLACK mates . setWidgetParamByIndex ( MATES_GAUGE_A , 3 , MATES_GAUGE_A_BG_COLOR , BLACK )","title":"setWidgetParamByIndex(widgetType, widgetIndex, param, value)"},{"location":"controller/python-mates-controller/#getwidgetparambyindexwidgettype-widgetindex-param","text":"Gets the value of a widget parameter based on widget index and parameter id. Args : widgetType: MatesWidget the type of the target widget. widgetIndex: int the index of the target widget. Value must be within the uint8 datatype range. param: int the unique id of the target parameter. Value must be within the int16 datatype range. Return The current param value of the widget specified by widgetType and widgetIndex ( int ) Example # Query the background color of GaugeA3 paramVal = mates . getWidgetParamByIndex ( MATES_GAUGE_A , 3 , MATES_GAUGE_A_BG_COLOR )","title":"getWidgetParamByIndex(widgetType, widgetIndex, param)"},{"location":"controller/python-mates-controller/#cleartextareatextareaindex","text":"Clears a targeted Text Area. Args : textAreaIndex: int the index of the target Text Area widget. Value must be within the uint16 datatype range. Return success or failure ( boolean ) Example mates . clearTextArea ( 6 ) # Clear TextArea6","title":"clearTextArea(textAreaIndex)"},{"location":"controller/python-mates-controller/#updatetextareatextareaindex-textformat-formatargs","text":"Updates the text displayed within Text Area widget. Args : textAreaIndex: int the index of the target Text Area widget. Value must be within the uint16 datatype range. textFormat: str the string format to be displayed. formatArgs: zero or more values to be formatted into the provided text format string. Return success or failure ( boolean ) Example No. 1 mates . updateTextArea ( 2 , \"Mates\" ) # Update TextArea2 to \"Mates\" Example No. 2 value = 76 mates . updateTextArea ( 3 , \"Value is {} \" , value ) # Print value to TextArea3","title":"updateTextArea(textAreaIndex, textFormat, *formatArgs)"},{"location":"controller/python-mates-controller/#clearprintareaprintareaindex-int","text":"Clears a targeted Print Area. Args : printAreaIndex: int - the index of the target Print Area widget. Value must be within the uint16 datatype range. Return success or failure ( boolean ) Example mates . clearPrintArea ( 5 ) # Clear PrintArea5","title":"clearPrintArea(printAreaIndex: int)"},{"location":"controller/python-mates-controller/#setprintareacolor565printareaindex-rgb565","text":"Sets the color of a PrintArea Widget based on an rgb565 value. Args : printAreaIndex: int - index of widget, value must be within uint16 datatype range. rgb565: int - colour to set widget to, value must be within uint16 datatype range. Returns: boolean response indicating command success or failure. Example mates . setPrintAreaColor ( 4 , 0xF800 ) # Set print color of PrintArea4 to RED (0xF800)","title":"setPrintAreaColor565(printAreaIndex, rgb565)"},{"location":"controller/python-mates-controller/#setprintareacolorrgbprintareaindex-red-green-blue","text":"Sets the colour of a targeted Print Area. Args : printAreaIndex: int the index of the target Print Area widget. Value must be within the uint16 datatype range. red: int Unsigned 8 bit integer value of red concentration. Value must be within the uint8 datatype range. blue: int Unsigned 8 bit integer value of green concentration. Value must be within the uint8 datatype range. green: int Unsigned 8 bit integer value of blue concentration. Value must be within the uint8 datatype range. Return success or failure ( boolean ) Example mates . setPrintAreaColor ( 7 , 0 , 255 , 0 ) # Set print color of PrintArea7 to GREEN","title":"setPrintAreaColorRGB(printAreaIndex, red, green, blue)"},{"location":"controller/python-mates-controller/#appendarraytoprintareaprintareaindex-array","text":"Appends an array of 8-bit integers to a targeted Print Area. Args : printAreaIndex: int the index of the target Print Area widget. Value must be within the uint16 datatype range. buffer: [int] the list of datapoints to be appended to scope widget. Values must be within the uint8 datatype range. Return success or failure ( boolean ) Example arr = [ 0xAB , 0xCD , 0xEF ] mates . appendArrayToPrintArea ( 6 , arr ) # Append \"0xAB, 0xCD, 0xEF\" to PrintArea6","title":"appendArrayToPrintArea(printAreaIndex, array)"},{"location":"controller/python-mates-controller/#appendstringtoprintareaprintareaindex-textformat-formatargs","text":"Appends text to a targeted Print Area. Args : printAreaIndex: int the index of the target Print Area widget. Value must be within the uint16 datatype range. textFormat: str the string to be appended to the Print Area with zero or more format specifiers to be formatted. formatArgs: zero or more args that can be formatted into the textFormat string. Return success or failure ( boolean ) Example No. 1 mates . appendStringToPrintArea ( 8 , \"Mates\" ) # Append \"Mates\" to PrintArea8 Example No. 2 Example No . 2 : value = 108 mates . appendStringToPrintArea ( 9 , \"Value: {} \" , value ) # Append value as text to PrintArea9","title":"appendStringToPrintArea(printAreaIndex, textFormat, *formatArgs)"},{"location":"controller/python-mates-controller/#appendtoscopewidgetscopeindex-buffer","text":"Appends a list of integers to a Scope widget. Args : scopeIndex: int the index of the target Scope widget. Value must be within the uint16 datatype range. buffer: [int] the list of datapoints to be appended to scope widget. Values must be within the int16 datatype range. Return success or failure ( boolean ) Example data = { 0xF8 , 0x7F , 0x1F } mates . appendToScopeWidget ( 7 , data , 3 ) # Append data to Scope Widget 7","title":"appendToScopeWidget(scopeIndex, buffer)"},{"location":"controller/python-mates-controller/#updatedotmatrixwidgetmatrixindex-textformat-formatargs","text":"Changes the text displayed by the target Dot Matrix widget. Args : matrixIndex (int): matrix index. The index of the target Scope widget. Value must be within the uint16 datatype range. textFormat: str the string to be appended to the Scope widget with zero or more format specifiers to be formatted. formatArgs: zero or more args that can be formatted into the text_format string. Return success or failure ( boolean ) Example No. 1 mates . updateDotMatrix ( 8 , \"Mates\" ) # Update DotMatrix0 to \"Mates\" Example No. 2 value = 108 mates . updateDotMatrix ( 9 , \"Value: {} \" , value ) # Update DotMatrix0 to show value","title":"updateDotMatrixWidget(matrixIndex, textFormat, *formatArgs)"},{"location":"controller/python-mates-controller/#getbuttoneventcount","text":"Gets the number of events recorded from applicable button widgets. Return Number of recorded button events ( int ) Example # Get the number of logged button events buttonEvents = mates . getButtonEventCount ()","title":"getButtonEventCount()"},{"location":"controller/python-mates-controller/#getnextbuttonevent","text":"Gets the next event source logged from applicable buttons. Return Widget ID of the next event button ( int ) Example # If there is any event recorded if mates . getButtonEventCount () > 0 : button = mates . getNextButtonEvent () if ( button == MediaButton1 ): # if the button pressed is MediaButton1 # do something # add more possible cases here...","title":"getNextButtonEvent()"},{"location":"controller/python-mates-controller/#getswipeeventcount","text":"Gets the number of events recorded from swipe gestures. Return Number of recorded swipe events ( int ) Example # Get the number of logged swipe events swipeEvents = mates . getSwipeEventCount ()","title":"getSwipeEventCount()"},{"location":"controller/python-mates-controller/#getnextswipeevent","text":"Gets the next swipe event value. Return integer corresponding to the swipe event. Example # If there is any event recorded if mates . getSwipeEventCount () > 0 : swipe = mates . getNextSwipeEvent () if (( swipe & MATES_SWIPE_SOUTH ) == MATES_SWIPE_SOUTH ): # if swipe is towards from top to bottom if (( swipe & MATES_SWIPE_EAST ) == MATES_SWIPE_EAST ): # if swipe is towards from left to right if (( swipe & MATES_SWIPE_TLBR ) == MATES_SWIPE_TLBR ): # if swipe is towards from top left to bottom right","title":"getNextSwipeEvent()"},{"location":"controller/python-mates-controller/#getversion","text":"Helper function to obtain the version of the Python Mates Controller library. Return Version Information ( str ) Example # Get the library version number as string matesVersion = mates . getVersion ()","title":"getVersion()"},{"location":"controller/python-mates-controller/#getcompatibility","text":"Helper function to obtain the version of the Mates Studio compatible with this library version. Return Compatibility Version Information ( str ) Example # Get the compatible Mates Studio version number as string compatVersion = mates . getCompatibility ()","title":"getCompatibility()"},{"location":"controller/python-mates-controller/#printversion","text":"Debugging function to print the version of the Mates Studio compatible along with this specific library version. Return None Example # Prints library version and compatible Mates Studio version to debug serial mates . printVersion ()","title":"printVersion()"},{"location":"controller/python-mates-controller/#geterror","text":"This function can be used to investigate errors that occurred while controlling the display module. Description of the possible errors is discussed in here . Return Current error code ( MatesError ) Example # Checks the last error that occurred error = mates . getError () if error == MATES_ERROR_NONE : # Last command was successful","title":"getError()"},{"location":"controller/rpi-python-mates-controller/","text":"","title":"Rpi python mates controller"},{"location":"controller/keywords/commands/","text":"Mates Commands The table below lists the available commands to control the display module Command Value MATES_CMD_SET_PAGE 0x0000 MATES_CMD_GET_PAGE 0x0001 MATES_CMD_SET_WIDGET_VALUE 0x0002 MATES_CMD_GET_WIDGET_VALUE 0x0003 MATES_CMD_SET_WIDGET_PARAM 0x0004 MATES_CMD_GET_WIDGET_PARAM 0x0005 MATES_CMD_SET_BACKLIGHT 0x0006 MATES_CMD_CLR_PRINT_AREA 0x0007 MATES_CMD_SET_PRINT_COLOR 0x0008 MATES_CMD_SYSTEM_RESET 0x0009 MATES_CMD_PIN_MODE 0x000A MATES_CMD_DIGITAL_WRITE 0x000B MATES_CMD_DIGITAL_READ 0x000C MATES_CMD_BTN_EVENT_COUNT 0x000D MATES_CMD_NEXT_BTN_EVENT 0x000E MATES_CMD_SWP_EVENT_COUNT 0x000F MATES_CMD_NEXT_SWP_EVENT 0x0010 MATES_CMD_UPDATE_TEXT_AREA 0xFFFF MATES_CMD_APPEND_PRINT_AREA 0xFFFE MATES_CMD_SET_WIDGET_32VAL 0xFFFC MATES_CMD_APPEND_SCOPE_DATA 0xFFFB MATES_CMD_UPDATE_DOT_MATRIX 0xFFFA","title":"Mates Commands"},{"location":"controller/keywords/commands/#mates-commands","text":"The table below lists the available commands to control the display module Command Value MATES_CMD_SET_PAGE 0x0000 MATES_CMD_GET_PAGE 0x0001 MATES_CMD_SET_WIDGET_VALUE 0x0002 MATES_CMD_GET_WIDGET_VALUE 0x0003 MATES_CMD_SET_WIDGET_PARAM 0x0004 MATES_CMD_GET_WIDGET_PARAM 0x0005 MATES_CMD_SET_BACKLIGHT 0x0006 MATES_CMD_CLR_PRINT_AREA 0x0007 MATES_CMD_SET_PRINT_COLOR 0x0008 MATES_CMD_SYSTEM_RESET 0x0009 MATES_CMD_PIN_MODE 0x000A MATES_CMD_DIGITAL_WRITE 0x000B MATES_CMD_DIGITAL_READ 0x000C MATES_CMD_BTN_EVENT_COUNT 0x000D MATES_CMD_NEXT_BTN_EVENT 0x000E MATES_CMD_SWP_EVENT_COUNT 0x000F MATES_CMD_NEXT_SWP_EVENT 0x0010 MATES_CMD_UPDATE_TEXT_AREA 0xFFFF MATES_CMD_APPEND_PRINT_AREA 0xFFFE MATES_CMD_SET_WIDGET_32VAL 0xFFFC MATES_CMD_APPEND_SCOPE_DATA 0xFFFB MATES_CMD_UPDATE_DOT_MATRIX 0xFFFA","title":"Mates Commands"},{"location":"controller/keywords/errors/","text":"Communication Errors The table below lists the possible errors after running a function from the library. Value Error Description 0 MATES_ERROR_NONE Last command was completed successfully 1 MATES_ERROR_COMMAND_FAILED The display failed to perform the last command 2 MATES_ERROR_COMMAND_TIMEOUT The display didn't acknowledge the command in time 3 MATES_ERROR_RESPONSE_TIMEOUT The display didn't send a return value in time 4 MATES_ERROR_NOT_INITIALIZED The library hasn't been initialized yet 5 MATES_ERROR_SYNC_TIMEOUT The synchronization attempt reached specified timeout 6 MATES_ERROR_SYNC_ERROR Invalid active page or no reply received after sync","title":"Communication Errors"},{"location":"controller/keywords/errors/#communication-errors","text":"The table below lists the possible errors after running a function from the library. Value Error Description 0 MATES_ERROR_NONE Last command was completed successfully 1 MATES_ERROR_COMMAND_FAILED The display failed to perform the last command 2 MATES_ERROR_COMMAND_TIMEOUT The display didn't acknowledge the command in time 3 MATES_ERROR_RESPONSE_TIMEOUT The display didn't send a return value in time 4 MATES_ERROR_NOT_INITIALIZED The library hasn't been initialized yet 5 MATES_ERROR_SYNC_TIMEOUT The synchronization attempt reached specified timeout 6 MATES_ERROR_SYNC_ERROR Invalid active page or no reply received after sync","title":"Communication Errors"},{"location":"controller/keywords/swipe_consts/","text":"Swipe Event Constants The table below lists the possible swipe flags that can be used for swipe handling. Event Value Check if swipe is Usage MATES_SWIPE_NORTH 0b0001 From bottom to top (event & MATES_SWIPE_NORTH) == MATES_SWIPE_NORTH MATES_SWIPE_SOUTH 0b0010 From top to bottom (event & MATES_SWIPE_SOUTH) == MATES_SWIPE_SOUTH MATES_SWIPE_EAST 0b0100 From left to right (event & MATES_SWIPE_EAST) == MATES_SWIPE_EAST MATES_SWIPE_WEST 0b1000 From right to left (event & MATES_SWIPE_WEST) == MATES_SWIPE_WEST MATES_SWIPE_VERT 0b0011 only done vertically (event & MATES_SWIPE_VERT) != 0 MATES_SWIPE_HORZ 0b1100 only done horizontally (event & MATES_SWIPE_HORZ) != 0 MATES_SWIPE_TLBR 0b0110 From top left to bottom right (event & MATES_SWIPE_TLBR) == MATES_SWIPE_TLBR MATES_SWIPE_TRBL 0b1010 From top right to bottom left (event & MATES_SWIPE_TRBL) == MATES_SWIPE_TRBL MATES_SWIPE_BLTR 0b0101 From bottom left to top right (event & MATES_SWIPE_BLTR) == MATES_SWIPE_BLTR MATES_SWIPE_BRTL 0b1001 From bottom right to top left (event & MATES_SWIPE_BRTL) == MATES_SWIPE_BRTL","title":"Swipe Event Constants"},{"location":"controller/keywords/swipe_consts/#swipe-event-constants","text":"The table below lists the possible swipe flags that can be used for swipe handling. Event Value Check if swipe is Usage MATES_SWIPE_NORTH 0b0001 From bottom to top (event & MATES_SWIPE_NORTH) == MATES_SWIPE_NORTH MATES_SWIPE_SOUTH 0b0010 From top to bottom (event & MATES_SWIPE_SOUTH) == MATES_SWIPE_SOUTH MATES_SWIPE_EAST 0b0100 From left to right (event & MATES_SWIPE_EAST) == MATES_SWIPE_EAST MATES_SWIPE_WEST 0b1000 From right to left (event & MATES_SWIPE_WEST) == MATES_SWIPE_WEST MATES_SWIPE_VERT 0b0011 only done vertically (event & MATES_SWIPE_VERT) != 0 MATES_SWIPE_HORZ 0b1100 only done horizontally (event & MATES_SWIPE_HORZ) != 0 MATES_SWIPE_TLBR 0b0110 From top left to bottom right (event & MATES_SWIPE_TLBR) == MATES_SWIPE_TLBR MATES_SWIPE_TRBL 0b1010 From top right to bottom left (event & MATES_SWIPE_TRBL) == MATES_SWIPE_TRBL MATES_SWIPE_BLTR 0b0101 From bottom left to top right (event & MATES_SWIPE_BLTR) == MATES_SWIPE_BLTR MATES_SWIPE_BRTL 0b1001 From bottom right to top left (event & MATES_SWIPE_BRTL) == MATES_SWIPE_BRTL","title":"Swipe Event Constants"},{"location":"controller/keywords/widgets/","text":"Mates Widgets The table below lists the available widgets that applies to setWidgetValue, getWidgetValue, setWidgetParam and getWidgetParam functions. Widget Value MATES_LED 0 MATES_RULER_GAUGE 1 MATES_ANGULAR_METER 2 MATES_GAUGE_A 3 MATES_GAUGE_B 4 MATES_LED_DIGITS 5 MATES_LABELS 6 MATES_BUTTON_A 32 MATES_SWITCH_A 33 MATES_SLIDER_B 34 MATES_KNOB 35 MATES_MEDIA_LED 64 MATES_MEDIA_COLOR_LED 65 MATES_GAUGE_C 66 MATES_GAUGE_D 67 MATES_GAUGE_E 68 MATES_GAUGE_F 69 MATES_MEDIA_GAUGE_A 70 MATES_MEDIA_GAUGE_B 71 MATES_MEDIA_GAUGE_C 72 MATES_MEDIA_GAUGE_D 73 MATES_MEDIA_THERMOMETER 74 MATES_LED_SPECTRUM 75 MATES_MEDIA_SPECTRUM 76 MATES_SCOPE 77 MATES_SYMBOLS 78 MATES_ROTARY_GAUGE 79 MATES_BUTTON_B 96 MATES_SWITCH_B 97 MATES_MEDIA_BUTTON 98 MATES_SLIDER_A 99 MATES_SLIDER_C 100 MATES_SLIDER_D 101 MATES_SLIDER_E 102 MATES_SLIDER_F 103 MATES_MEDIA_SLIDER 104 MATES_MEDIA_ROTARY 105 MATES_SLIDE_SHOW 128 MATES_ANIMATION 129 MATES_FANCY_LED_A 130 MATES_FANCY_LED_B 131 MATES_FANCY_BUTTON_A 160 MATES_FANCY_BUTTON_B 161 Note: Some widgets available in Mates Studio behaves differently than majority of the widgets. Such widgets doesn't apply for the common set and get widget value and parameter functions.","title":"Mates Widgets"},{"location":"controller/keywords/widgets/#mates-widgets","text":"The table below lists the available widgets that applies to setWidgetValue, getWidgetValue, setWidgetParam and getWidgetParam functions. Widget Value MATES_LED 0 MATES_RULER_GAUGE 1 MATES_ANGULAR_METER 2 MATES_GAUGE_A 3 MATES_GAUGE_B 4 MATES_LED_DIGITS 5 MATES_LABELS 6 MATES_BUTTON_A 32 MATES_SWITCH_A 33 MATES_SLIDER_B 34 MATES_KNOB 35 MATES_MEDIA_LED 64 MATES_MEDIA_COLOR_LED 65 MATES_GAUGE_C 66 MATES_GAUGE_D 67 MATES_GAUGE_E 68 MATES_GAUGE_F 69 MATES_MEDIA_GAUGE_A 70 MATES_MEDIA_GAUGE_B 71 MATES_MEDIA_GAUGE_C 72 MATES_MEDIA_GAUGE_D 73 MATES_MEDIA_THERMOMETER 74 MATES_LED_SPECTRUM 75 MATES_MEDIA_SPECTRUM 76 MATES_SCOPE 77 MATES_SYMBOLS 78 MATES_ROTARY_GAUGE 79 MATES_BUTTON_B 96 MATES_SWITCH_B 97 MATES_MEDIA_BUTTON 98 MATES_SLIDER_A 99 MATES_SLIDER_C 100 MATES_SLIDER_D 101 MATES_SLIDER_E 102 MATES_SLIDER_F 103 MATES_MEDIA_SLIDER 104 MATES_MEDIA_ROTARY 105 MATES_SLIDE_SHOW 128 MATES_ANIMATION 129 MATES_FANCY_LED_A 130 MATES_FANCY_LED_B 131 MATES_FANCY_BUTTON_A 160 MATES_FANCY_BUTTON_B 161 Note: Some widgets available in Mates Studio behaves differently than majority of the widgets. Such widgets doesn't apply for the common set and get widget value and parameter functions.","title":"Mates Widgets"},{"location":"studio/mates-controller-command-protocol/","text":"","title":"Command Protocol"},{"location":"studio/mates-controller-interface/","text":"","title":"Controller Interface"},{"location":"studio/mates-studio-architect-environment/","text":"","title":"Mates studio architect environment"},{"location":"studio/mates-studio-blocks-editor/","text":"","title":"Blocks Editor"},{"location":"studio/mates-studio-builder-environment/","text":"","title":"Mates studio builder environment"},{"location":"studio/mates-studio-code-editor/","text":"","title":"Code Editor"},{"location":"studio/mates-studio-commander-environment/","text":"","title":"Mates studio commander environment"},{"location":"studio/mates-studio-genius-environment/","text":"","title":"Mates studio genius environment"},{"location":"studio/mates-studio-graphics-editor/","text":"","title":"Graphics Editor"},{"location":"studio/mates-studio-release-notes/","text":"Mates Studio Release Notes May 5, 2022 - 1.0.14 Fixed issue when opening projects by double clicking the file April 14, 2022 - 1.0.13 Changed TIMI-Click to TIMI-MB April 5, 2022 - 1.0.12 Fixed copy and paste issue in non-touch modules February 23, 2022 - 1.0.10 Fixed issue with DotMatrix and TextArea not updating February 21, 2022 - 1.0.9 Added 240x240 page designs Added auto update feature Increased UART receive buffer size for Commander and Architect projects January 15, 2022 - 1.0.8 Added 240x240 page designs Fixed display issues when image and page background image when there is no other inherent and GCI widget included January 05, 2022 - 1.0.7 Added 240x240 page designs Added swipe event logging system Added new functions/commands: getSwipeEventCount : counts the number of swipe events that hasn't been read getNextSwipeEvent : reads the next swipe event, returns -1 if no event to read December 14, 2021 - 1.0.6 Added support for REPTOR devices Added automatic touch handling for input widgets Added different modes for button widgets (toggle, momentary and navigation) Added button event log system for momentary buttons Added new functions/commands: getButtonEventCount : counts the number of button events that hasn't been read getNextButtonEvent : reads the next button event, returns -1 if no event to read Implemented Query (getButtonEventCount, getNextButtonEvent) command in Control window/tab of Architect and Commander environments December 03, 2021 - 1.0.5 Prevented input widgets from being used in non-touch modules Changed MediaGaugeA to have the thumb option from MediaSlider Fixed Commander documentation scroll issue Fixed Page designs that uses sliders and knobs as gauges and buttons as leds Fixed RotaryGauge behaving as an input widget Fixed DLL missing from other Windows PCs November 17, 2021 - 1.0.4 Fixed Inherent resource updates for gauges November 14, 2021 - 1.0.3 Fixed MediaGaugeB compile and display error November 08, 2021 - 1.0.1 Fixed Dot Matrix gradient issue caused by incorrect use of the widget's position Fixed Media Gauge D incorrect range computation October 13, 2021 - 1.0.0 Initial Public Release Supported Products - TIMI-96 - TIMI-Click - TIMI-130 - TED-96 Available Widgets - Label - Scale - Panel - Media Panel - Symbol - Image - Led - Media Led - Media Color Led - Fancy Led A - Led Digits - Led Spectrum - Media Spectrum - Dot Matrix - Gauge A - Gauge B - Gauge C - Gauge D - Gauge E - Gauge F - Angular Meter - Ruler Gauge - Media Gauge A - Media Gauge B - Media Gauge C - Media Gauge D - Media Thermometer - Rotary Gauge - Slide Show - Animation - Symbols - Led Digits - Scope - Button A - Button B - Switch A - Switch B - Media Button - Fancy Button A - Slider A - Slider B - Slider C - Slider D - Slider E - Slider F - Media Slider - Knob - Media Rotary - Text Area - Print Area","title":"Release Notes"},{"location":"studio/mates-studio-release-notes/#mates-studio-release-notes","text":"","title":"Mates Studio Release Notes"},{"location":"studio/mates-studio-release-notes/#may-5-2022-1014","text":"Fixed issue when opening projects by double clicking the file","title":"May 5, 2022 - 1.0.14"},{"location":"studio/mates-studio-release-notes/#april-14-2022-1013","text":"Changed TIMI-Click to TIMI-MB","title":"April 14, 2022 - 1.0.13"},{"location":"studio/mates-studio-release-notes/#april-5-2022-1012","text":"Fixed copy and paste issue in non-touch modules","title":"April 5, 2022 - 1.0.12"},{"location":"studio/mates-studio-release-notes/#february-23-2022-1010","text":"Fixed issue with DotMatrix and TextArea not updating","title":"February 23, 2022 - 1.0.10"},{"location":"studio/mates-studio-release-notes/#february-21-2022-109","text":"Added 240x240 page designs Added auto update feature Increased UART receive buffer size for Commander and Architect projects","title":"February 21, 2022 - 1.0.9"},{"location":"studio/mates-studio-release-notes/#january-15-2022-108","text":"Added 240x240 page designs Fixed display issues when image and page background image when there is no other inherent and GCI widget included","title":"January 15, 2022 - 1.0.8"},{"location":"studio/mates-studio-release-notes/#january-05-2022-107","text":"Added 240x240 page designs Added swipe event logging system Added new functions/commands: getSwipeEventCount : counts the number of swipe events that hasn't been read getNextSwipeEvent : reads the next swipe event, returns -1 if no event to read","title":"January 05, 2022 - 1.0.7"},{"location":"studio/mates-studio-release-notes/#december-14-2021-106","text":"Added support for REPTOR devices Added automatic touch handling for input widgets Added different modes for button widgets (toggle, momentary and navigation) Added button event log system for momentary buttons Added new functions/commands: getButtonEventCount : counts the number of button events that hasn't been read getNextButtonEvent : reads the next button event, returns -1 if no event to read Implemented Query (getButtonEventCount, getNextButtonEvent) command in Control window/tab of Architect and Commander environments","title":"December 14, 2021 - 1.0.6"},{"location":"studio/mates-studio-release-notes/#december-03-2021-105","text":"Prevented input widgets from being used in non-touch modules Changed MediaGaugeA to have the thumb option from MediaSlider Fixed Commander documentation scroll issue Fixed Page designs that uses sliders and knobs as gauges and buttons as leds Fixed RotaryGauge behaving as an input widget Fixed DLL missing from other Windows PCs","title":"December 03, 2021 - 1.0.5"},{"location":"studio/mates-studio-release-notes/#november-17-2021-104","text":"Fixed Inherent resource updates for gauges","title":"November 17, 2021 - 1.0.4"},{"location":"studio/mates-studio-release-notes/#november-14-2021-103","text":"Fixed MediaGaugeB compile and display error","title":"November 14, 2021 - 1.0.3"},{"location":"studio/mates-studio-release-notes/#november-08-2021-101","text":"Fixed Dot Matrix gradient issue caused by incorrect use of the widget's position Fixed Media Gauge D incorrect range computation","title":"November 08, 2021 - 1.0.1"},{"location":"studio/mates-studio-release-notes/#october-13-2021-100","text":"Initial Public Release Supported Products - TIMI-96 - TIMI-Click - TIMI-130 - TED-96 Available Widgets - Label - Scale - Panel - Media Panel - Symbol - Image - Led - Media Led - Media Color Led - Fancy Led A - Led Digits - Led Spectrum - Media Spectrum - Dot Matrix - Gauge A - Gauge B - Gauge C - Gauge D - Gauge E - Gauge F - Angular Meter - Ruler Gauge - Media Gauge A - Media Gauge B - Media Gauge C - Media Gauge D - Media Thermometer - Rotary Gauge - Slide Show - Animation - Symbols - Led Digits - Scope - Button A - Button B - Switch A - Switch B - Media Button - Fancy Button A - Slider A - Slider B - Slider C - Slider D - Slider E - Slider F - Media Slider - Knob - Media Rotary - Text Area - Print Area","title":"October 13, 2021 - 1.0.0"},{"location":"studio/mates-studio-user-manual/","text":"Mates Studio User Manual Introduction Mates Studio is an Integrated Development Environment designed to be used with Breadboard Mates products. This software application is developed for Windows PCs. The application includes multiple environments that users can utilize to design and develop simple and complex GUI applications for their prototyping needs. Commander Commander is the simplest among all Mates Studio environments. It allows users to select and utilize different page designs/layouts from a built-in collection provided by the Breadboard Mates team and its community. This allows development of GUI applications in seconds. This environment is designed to program Breadboard Mates modules to be used with a host controller using the Mates Controller Command Protocol . This allows users to control the display using their favorite microcontrollers through Serial UART. This environment also includes a Mates Controller Interface that simulates a microcontroller controlling the display module programmed with a Commander project. Architect Similar to Commander, the Architect environment was designed to program modules to be used with a host controller and features Mates Controller Command Protocol . It also provides the Mates Controller Interface to simulate a host controller. The main advantage of Architect over Commander is the increased flexibility with designing their projects by featuring a Graphics Editor which allows custom widget and page designs. Genius The Genius environment is designed to allow user to write their own custom programs for Breadboard Mates module. This allows Breadboard Mates modules to work as standalone devices. It features a Graphics Editor allowing custom widget and page designs and a Code Editor to write the program in 4D Graphics Language (4DGL) . This provides direct control of the widgets and the unused device peripherals allowing custom functionalities that users need which Commander and Architect are not able to provide. Builder Similar to Genius, the Builder environment is designed to allow user to develop custom programs for their Breadboard Mates modules. It also features a Graphics Editor allowing custom widget and page designs. But instead of a code editor, it features a Blocks Editor . This also provides direct control of the widgets and the unused device peripherals allowing custom functionalities that users need which Commander and Architect are not able to provide. This environment is designed mainly for inexperienced 4DGL developers but can also be used by seasoned developers. This environment can be used to develop varying complexity of projects. However, as the project becomes increasingly complicated, writing the code in Genius can prove to be more managable for experience developers. System Requirements Mates Studio is currently available for 64-bit Windows PCs. Here are the requirements for installing the application: Windows 7 and later are supported, older operating systems are not supported (and do not work). Please note that the ARM version of Windows is not supported. An Intel Pentium 4 processor or later that\u2019s SSE3 capable. At least 300 MB of storage space Minimum 1GB of RAM ( depends on usage ) Installation Mates Studio can be installed for all users (system wide) or only for the current user. By choosing to install for all users, the install will prompt for administrator privileges. Once approved, the application will be installed in Program Files directory. The full path is typically: C:\\Program Files\\Mates Studio If the application is installed only for the current user, the application will be in the current user\u2019s AppData Local Programs directory. In that case, the full path is: C:\\Users\\%USERNAME%\\AppData\\Local\\Programs\\Mates Studio The installer will provide a visual progress bar until the installation completes. After successfully installing Mates Studio, the installer will prompt to optionally launch the application. Tick Run Mates Studio to launch Mates Studio after installation if desired. Creating a New Project Selecting Product and Orientation When the application opens, it will show the splash screen followed by the setup window. Products can be filtered by choosing the category tabs on the left-hand side. The center column provides a filtered selection of products. By selecting a product from the list shown in the center column of the window, a preview of the product will be shown on the right-hand side. By clicking on the preview, the project orientation can be set. After selecting the product and desired orientation, continue by clicking on the CONFIRM button. Selecting Environment After confirming the product, the target environment needs to be selected to start a new project. Opening Projects Browsing Recent Projects While in the setup window, recent projects can be browsed by clicking on the Browse Recent Projects button. Recent projects can be filtered by choosing the category tabs on the left-hand side. By selecting a project from the list shown in the middle column of the window, a preview of the project will be shown on the right-hand side. By clicking on the preview, the other project pages can be browsed. After confirming the project, it can be opened by clicking on the CONFIRM button. Browsing the Computer While in the setup window, the computer can be browsed for projects by clicking on the Browse Computer button. Mates Studio will open a file selection window which can be utilized to find and open a project anywhere in the computer.","title":"Manual"},{"location":"studio/mates-studio-user-manual/#mates-studio-user-manual","text":"","title":"Mates Studio User Manual"},{"location":"studio/mates-studio-user-manual/#introduction","text":"Mates Studio is an Integrated Development Environment designed to be used with Breadboard Mates products. This software application is developed for Windows PCs. The application includes multiple environments that users can utilize to design and develop simple and complex GUI applications for their prototyping needs.","title":"Introduction"},{"location":"studio/mates-studio-user-manual/#commander","text":"Commander is the simplest among all Mates Studio environments. It allows users to select and utilize different page designs/layouts from a built-in collection provided by the Breadboard Mates team and its community. This allows development of GUI applications in seconds. This environment is designed to program Breadboard Mates modules to be used with a host controller using the Mates Controller Command Protocol . This allows users to control the display using their favorite microcontrollers through Serial UART. This environment also includes a Mates Controller Interface that simulates a microcontroller controlling the display module programmed with a Commander project.","title":"Commander"},{"location":"studio/mates-studio-user-manual/#architect","text":"Similar to Commander, the Architect environment was designed to program modules to be used with a host controller and features Mates Controller Command Protocol . It also provides the Mates Controller Interface to simulate a host controller. The main advantage of Architect over Commander is the increased flexibility with designing their projects by featuring a Graphics Editor which allows custom widget and page designs.","title":"Architect"},{"location":"studio/mates-studio-user-manual/#genius","text":"The Genius environment is designed to allow user to write their own custom programs for Breadboard Mates module. This allows Breadboard Mates modules to work as standalone devices. It features a Graphics Editor allowing custom widget and page designs and a Code Editor to write the program in 4D Graphics Language (4DGL) . This provides direct control of the widgets and the unused device peripherals allowing custom functionalities that users need which Commander and Architect are not able to provide.","title":"Genius"},{"location":"studio/mates-studio-user-manual/#builder","text":"Similar to Genius, the Builder environment is designed to allow user to develop custom programs for their Breadboard Mates modules. It also features a Graphics Editor allowing custom widget and page designs. But instead of a code editor, it features a Blocks Editor . This also provides direct control of the widgets and the unused device peripherals allowing custom functionalities that users need which Commander and Architect are not able to provide. This environment is designed mainly for inexperienced 4DGL developers but can also be used by seasoned developers. This environment can be used to develop varying complexity of projects. However, as the project becomes increasingly complicated, writing the code in Genius can prove to be more managable for experience developers.","title":"Builder"},{"location":"studio/mates-studio-user-manual/#system-requirements","text":"Mates Studio is currently available for 64-bit Windows PCs. Here are the requirements for installing the application: Windows 7 and later are supported, older operating systems are not supported (and do not work). Please note that the ARM version of Windows is not supported. An Intel Pentium 4 processor or later that\u2019s SSE3 capable. At least 300 MB of storage space Minimum 1GB of RAM ( depends on usage )","title":"System Requirements"},{"location":"studio/mates-studio-user-manual/#installation","text":"Mates Studio can be installed for all users (system wide) or only for the current user. By choosing to install for all users, the install will prompt for administrator privileges. Once approved, the application will be installed in Program Files directory. The full path is typically: C:\\Program Files\\Mates Studio If the application is installed only for the current user, the application will be in the current user\u2019s AppData Local Programs directory. In that case, the full path is: C:\\Users\\%USERNAME%\\AppData\\Local\\Programs\\Mates Studio The installer will provide a visual progress bar until the installation completes. After successfully installing Mates Studio, the installer will prompt to optionally launch the application. Tick Run Mates Studio to launch Mates Studio after installation if desired.","title":"Installation"},{"location":"studio/mates-studio-user-manual/#creating-a-new-project","text":"","title":"Creating a New Project"},{"location":"studio/mates-studio-user-manual/#selecting-product-and-orientation","text":"When the application opens, it will show the splash screen followed by the setup window. Products can be filtered by choosing the category tabs on the left-hand side. The center column provides a filtered selection of products. By selecting a product from the list shown in the center column of the window, a preview of the product will be shown on the right-hand side. By clicking on the preview, the project orientation can be set. After selecting the product and desired orientation, continue by clicking on the CONFIRM button.","title":"Selecting Product and Orientation"},{"location":"studio/mates-studio-user-manual/#selecting-environment","text":"After confirming the product, the target environment needs to be selected to start a new project.","title":"Selecting Environment"},{"location":"studio/mates-studio-user-manual/#opening-projects","text":"","title":"Opening Projects"},{"location":"studio/mates-studio-user-manual/#browsing-recent-projects","text":"While in the setup window, recent projects can be browsed by clicking on the Browse Recent Projects button. Recent projects can be filtered by choosing the category tabs on the left-hand side. By selecting a project from the list shown in the middle column of the window, a preview of the project will be shown on the right-hand side. By clicking on the preview, the other project pages can be browsed. After confirming the project, it can be opened by clicking on the CONFIRM button.","title":"Browsing Recent Projects"},{"location":"studio/mates-studio-user-manual/#browsing-the-computer","text":"While in the setup window, the computer can be browsed for projects by clicking on the Browse Computer button. Mates Studio will open a file selection window which can be utilized to find and open a project anywhere in the computer.","title":"Browsing the Computer"}]}