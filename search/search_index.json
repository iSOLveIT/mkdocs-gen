{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Breadboard Mates Resource Centre Our Focus At Breadboard Mates, we create novel and exciting products that inspire creativity in the project-maker community. What We Provide An ever-increasing range of hardware and continuously evolving software suite and tools to aid project development About Us Breadboard Mates was established in October 2020 to bring breadboard-friendly products to the market, significantly reducing the time and components required to develop and experiment with electronics. From hobbyist to engineering professional, Breadboard Mates cutting edge products can be utilized for seamless development with the help of the integrated products like TIMI (Tiny Intelligent Modular Instrument) and the Mates Studio software development tool. Mates Studio is unlike any other, offering four different programming methods with a library of hundreds of pre-designed pages and widgets. The result is an unprecedented increase in development speed for stand-alone, host driven or PC testing applications. With investment backing from 4D Systems , Breadboard Mates operates as an independent venture, with its own engineering delivery model and dedicated management and R&D team focused on bringing breadboard-friendly products to the market. The partnership is predicted to significantly scale up the efforts of the fast-growth Breadboard Mates team, with support and resourcing coming from a highly reputable partner. Resource Tags Following is a list of relevant tags: Architect Arduino BBM Python C MicroPython Python RPi Python Mates Studio User Manual Command Protocol Controller Interface Graphics Editor Getting Started with Architect Environment Arduino Arduino RGB Controller BBM Programmer Mates Programmer Builder Mates Studio User Manual Blocks Editor Graphics Editor Getting Started with Builder Environment C C Commander Arduino BBM Python C MicroPython Python RPi Python Mates Studio User Manual Command Protocol Controller Interface Commander Editor Getting Started with Commander Feather Wing Adaptor Genius Mates Studio User Manual Code Editor Graphics Editor Getting Started with Genius Environment MatesBUS MatesBUS MicroPython MicroPython MikroBUS MB Adaptor Python BBM Python Python RPi Python REPTOR REPTOR-250 RGB Controller Pacman REPTOR-250 REPTOR-250 RGB Controller Pacman Raspberry Pi RPi Python Pi Adaptor Status Monitor TED TED-130 TED-96 TED-130 TED-130 TED-96 TED-96 TIMI TIMI-130 TIMI-96 TIMI-MB Status Monitor TIMI-130 TIMI-130 Status Monitor TIMI-96 TIMI-96 TIMI-MB TIMI-MB","title":"Home"},{"location":"#welcome-to-breadboard-mates-resource-centre","text":"","title":"Welcome to Breadboard Mates Resource Centre"},{"location":"#our-focus","text":"At Breadboard Mates, we create novel and exciting products that inspire creativity in the project-maker community.","title":"Our Focus"},{"location":"#what-we-provide","text":"An ever-increasing range of hardware and continuously evolving software suite and tools to aid project development","title":"What We Provide"},{"location":"#about-us","text":"Breadboard Mates was established in October 2020 to bring breadboard-friendly products to the market, significantly reducing the time and components required to develop and experiment with electronics. From hobbyist to engineering professional, Breadboard Mates cutting edge products can be utilized for seamless development with the help of the integrated products like TIMI (Tiny Intelligent Modular Instrument) and the Mates Studio software development tool. Mates Studio is unlike any other, offering four different programming methods with a library of hundreds of pre-designed pages and widgets. The result is an unprecedented increase in development speed for stand-alone, host driven or PC testing applications. With investment backing from 4D Systems , Breadboard Mates operates as an independent venture, with its own engineering delivery model and dedicated management and R&D team focused on bringing breadboard-friendly products to the market. The partnership is predicted to significantly scale up the efforts of the fast-growth Breadboard Mates team, with support and resourcing coming from a highly reputable partner.","title":"About Us"},{"location":"#resource-tags","text":"Following is a list of relevant tags:","title":"Resource Tags"},{"location":"#architect","text":"Arduino BBM Python C MicroPython Python RPi Python Mates Studio User Manual Command Protocol Controller Interface Graphics Editor Getting Started with Architect Environment","title":"Architect"},{"location":"#arduino","text":"Arduino RGB Controller","title":"Arduino"},{"location":"#bbm-programmer","text":"Mates Programmer","title":"BBM Programmer"},{"location":"#builder","text":"Mates Studio User Manual Blocks Editor Graphics Editor Getting Started with Builder Environment","title":"Builder"},{"location":"#c","text":"C","title":"C"},{"location":"#commander","text":"Arduino BBM Python C MicroPython Python RPi Python Mates Studio User Manual Command Protocol Controller Interface Commander Editor Getting Started with Commander","title":"Commander"},{"location":"#feather","text":"Wing Adaptor","title":"Feather"},{"location":"#genius","text":"Mates Studio User Manual Code Editor Graphics Editor Getting Started with Genius Environment","title":"Genius"},{"location":"#matesbus","text":"MatesBUS","title":"MatesBUS"},{"location":"#micropython","text":"MicroPython","title":"MicroPython"},{"location":"#mikrobus","text":"MB Adaptor","title":"MikroBUS"},{"location":"#python","text":"BBM Python Python RPi Python","title":"Python"},{"location":"#reptor","text":"REPTOR-250 RGB Controller Pacman","title":"REPTOR"},{"location":"#reptor-250","text":"REPTOR-250 RGB Controller Pacman","title":"REPTOR-250"},{"location":"#raspberry-pi","text":"RPi Python Pi Adaptor Status Monitor","title":"Raspberry Pi"},{"location":"#ted","text":"TED-130 TED-96","title":"TED"},{"location":"#ted-130","text":"TED-130","title":"TED-130"},{"location":"#ted-96","text":"TED-96","title":"TED-96"},{"location":"#timi","text":"TIMI-130 TIMI-96 TIMI-MB Status Monitor","title":"TIMI"},{"location":"#timi-130","text":"TIMI-130 Status Monitor","title":"TIMI-130"},{"location":"#timi-96","text":"TIMI-96","title":"TIMI-96"},{"location":"#timi-mb","text":"TIMI-MB","title":"TIMI-MB"},{"location":"Mates%20Controller%20Libraries/","text":"Mates Controller Libraries Error Codes The table below lists the possible errors after running a function/method from the libraries. Value Error Description 0 MATES_ERROR_NONE Last command was completed successfully 1 MATES_ERROR_COMMAND_FAILED The display failed to perform the last command 2 MATES_ERROR_COMMAND_TIMEOUT The display didn't acknowledge the command in time 3 MATES_ERROR_RESPONSE_TIMEOUT The display didn't send a return value in time 4 MATES_ERROR_NOT_INITIALIZED The library hasn't been initialized yet 5 MATES_ERROR_SYNC_TIMEOUT The synchronization attempt reached specified timeout 6 MATES_ERROR_SYNC_ERROR Invalid active page or no reply received after sync","title":"Mates Controller Libraries"},{"location":"Mates%20Controller%20Libraries/#mates-controller-libraries","text":"","title":"Mates Controller Libraries"},{"location":"Mates%20Controller%20Libraries/#error-codes","text":"The table below lists the possible errors after running a function/method from the libraries. Value Error Description 0 MATES_ERROR_NONE Last command was completed successfully 1 MATES_ERROR_COMMAND_FAILED The display failed to perform the last command 2 MATES_ERROR_COMMAND_TIMEOUT The display didn't acknowledge the command in time 3 MATES_ERROR_RESPONSE_TIMEOUT The display didn't send a return value in time 4 MATES_ERROR_NOT_INITIALIZED The library hasn't been initialized yet 5 MATES_ERROR_SYNC_TIMEOUT The synchronization attempt reached specified timeout 6 MATES_ERROR_SYNC_ERROR Invalid active page or no reply received after sync","title":"Error Codes"},{"location":"Mates%20Controller%20Libraries/arduino-mates-controller/","tags":["Commander","Architect","Arduino"],"text":"Mates Controller Arduino Library Introduction This library is developed to easily control Breadboard Mates modules using Arduino-compatible boards by utilizing the Mates Controller Command Protocol . This applies to projects developed using Commander and Architect environments. For working examples of using the library and its functions in a project, refer to the examples and extras directories in the repository . Constructors This section serves to provide brief discussion about the constructors that can be used to initialize the library. MatesController(serial, resetPin, mode) This is the main constructor for the library. It creates a unique instance and sets the specified display serial port and reset pin. If serial is not a HardwareSerial (or SoftwareSerial for AVR devices), the Serial stream needs to be initialized manually before running begin(baudrate, resetModule) function. Parameters Type Description serial Stream The serial port to use for controlling the display module resetPin (optional) uint8_t Arduino reset pin to use for resetting the display module (default: 4) mode (optional) uint8_t Arduino reset pulse to use when performing reset (default: LOW) Example Simple Specify Pin Specify Pin and Pulse Mode // Creates a new instance named 'mates' which utilizes: // - Serial as UART // - Pin 4 of Arduino as Reset Pin (default) // - Reset mode as a LOW pulse (default) MatesController mates = MatesController ( Serial ); // Creates a new instance named 'mates' which utilizes: // - Serial as UART // - Pin 5 of Arduino as Reset Pin // - Reset mode as a LOW pulse (default) MatesController mates = MatesController ( Serial , 5 ); // Creates a new instance named 'mates' which utilizes: // - Serial as UART // - Pin 6 of Arduino as Reset Pin // - Reset mode as a HIGH pulse MatesController mates = MatesController ( Serial , 6 , HIGH ); MatesController(serial, dbSerial, resetPin, mode) This is an alternative constructor for the library. It creates a unique instance and sets the specified display serial port, debug serial and reset pin. If not using a HardwareSerial (or SoftwareSerial for AVR devices), the Serial stream needs to be initialized manually before running the begin(baudrate, resetModule) function. Parameters Type Description serial Stream The serial port to use for controlling the display module dbSerial Stream The serial port to use for printing debug messages resetPin (optional) uint8_t Arduino reset pin to use for resetting the display module (default: 4) mode (optional) uint8_t Arduino reset pulse to use when performing reset (default: LOW) Example Simple Specify Pin Specify Pin and Pulse Mode // Creates a new instance named 'mates' which utilizes: // - Serial1 as display UART // - Serial as debug UART // - Pin 4 of Arduino as Reset Pin (default) // - Reset mode as a LOW pulse (default) MatesController mates = MatesController ( Serial1 , Serial ); // Creates a new instance named 'mates' which utilizes: // - Serial1 as display UART // - Serial as debug UART // - Pin 5 of Arduino as Reset Pin // - Reset mode as a LOW pulse (default) MatesController mates = MatesController ( Serial1 , Serial , 5 ); // Creates a new instance named 'mates' which utilizes: // - Serial1 as display UART // - Serial as debug UART // - Pin 6 of Arduino as Reset Pin // - Reset mode as a HIGH pulse MatesController mates = MatesController ( Serial1 , Serial , 6 , HIGH ); Note If a debug serial port is specified, it should be initialized before running the begin() function of this library. Functions This section serves to provide brief discussion about the functions that can be used with an initialized MatesController object. begin(baudrate, resetModule) This function must be used once to initialize the Serial port at the start of the Arduino application and to reset or synchronize with the display. Parameters Type Description baudrate (optional) int32_t Baudrate setting to be used to control the display module (default: 9600) resetModule (optional) bool Indicates whether the module should be reset from the hardware reset pin (default: true) Return success or failure ( boolean ) Note Baudrate is ignored when not using a HardwareSerial (or SoftwareSerial for AVR devices) to communicate with the display. In that case, the Serial/Stream instance needs to be initialize before using this function. If resetModule is false, this function will attempt to synchronize with the display. Developers also need to be aware of the boot timing of the module. This should be around 3-5 seconds or more depending on the project after power on. If more time is needed to sync, set a higher boot timeout using setBootTimeout(timeout) . Ensure that the baudrate matches the baudrate setting of the Mates Studio Commander/Architect project. If a debug serial port is specified, it should be initialized manually before running the begin() function of this library. Example Simple Specify Baudrate Specify Baudrate and Reset Option // Initializes display serial port with 9600 (default) and resets the display mates . begin (); // Initializes display serial port with 115200 baud and resets the display mates . begin ( 115200 ); // Initializes display serial port with 19200 baud and skips reset mates . begin ( 19200 , false ); isReady() This function can be used to determine if the module is in sync with the Arduino host. Return Sync Status ( boolean ) Example // Check if the module is in sync if ( mates . isReady ()) { // Write to or read from widgets } else { mates . sync (); // Try to resync with the module } autoResync(attempts, waitPeriod) This function can be used to setup auto resynchronization when an error occurs. Parameters Type Description attempts uint8_t Number of resync attempts to perform waitPeriod (optional) uint16_t Timeout period to wait for every resync attempt (default: boot timeout) Return none Example Simple Specify Timeout // Setup 3 automatic attempts to resync with default timeout mates . autoResync ( 3 ); // Setup 5 automatic attempts to resync with 10000ms timeout mates . autoResync ( 5 , 10000 ); sync(resetToPage0, waitPeriod) This function can be used to establish synchronization between the BBM module and the Arduino compatible host. Parameters Type Description resetToPage0 bool Indicates whether to go to Page0 after a successful synchronization (default: true) waitPeriod (optional) uint16_t Timeout period to wait until the display is ready (default: boot timeout) Return success or failure ( boolean ) Example Simple Return to Page0 if Successful Specify Timeout // Attempts to synchronize with the display if ( mates . sync ()) { // Do something if synchronization was successful } else { // Do something if synchronization failed } // Attempts to synchronize with the display if ( mates . sync ( true )) { // Do something if synchronization was successful // and project returned to Page0 } else { // Do something if synchronization failed } // Attempts to synchronize with the display with a timeout of 10000 if ( mates . sync ( true , 10000 )) { // Do something if synchronization was successful // and project returned to Page0 } else { // Do something if synchronization failed } reset(waitPeriod) This function can be used to reset the display by sending a reset pulse from the reset pin specified through the contructor. The default wait period is 5 seconds (5000 ms) or as specified by setBootTimeout(timeout) . The function finishes as soon as the display sends the ready signal or the wait period passes. Parameters Type Description waitPeriod (optional) uint16_t Timeout period to wait until the display is ready (default: boot timeout) Return success or failure ( boolean ) Example Simple Specify Timeout // Reset the display and wait for mates . reset (); // a period of 5 seconds (default) // (actually the current boot timeout which is 5s by default) // Reset the display and wait for mates . reset ( 4000 ); // a period of 4 seconds softReset(waitPeriod) This function can be used to reset the display by sending a reset command. The default wait period is 5 seconds (5000 ms) or as specified by setBootTimeout(timeout) . The function finishes as soon as the display sends the ready signal or the wait period passes. Parameters Type Description waitPeriod (optional) uint16_t Timeout period to wait until the display is ready (default: boot timeout) Return success or failure ( boolean ) Example Simple Specify Timeout // Reset the display and wait for mates . softReset (); // a period of 5 seconds (default boot timeout) // Reset the display and wait for mates . softReset ( 4000 ); // a period of 4 seconds setBootTimeout(timeout) This function can be used to set the wait period during reset and softReset. Parameters Type Description timeout uint32_t New timeout period to wait until the display is ready Return success or failure ( boolean ) Example mates . setBootTimeout ( 10000 ); // sets boot timeout to a period of 10 seconds resetBootTimeout(timeout) This function can be used to reset the wait period during reset and softReset to the default 5 seconds. Return none Example mates . resetBootTimeout (); // resets boot timeout to the default period attachErrorHandler(handler) This function can be used to attach and error handler function to the library. Parameters Type Description handler MatesErrorHandler Custom function to handle errors as they come Return none Example Simple Recommended MatesController mates = MatesController ( Serial ); void matesErrorHandler ( MatesError error ) { while ( true ) { digitalWrite ( LED_BUILTIN , HIGH ); delay ( 200 ); digitalWrite ( LED_BUILTIN , LOW ); delay ( 200 ); } // Blink builtin LED and block project execution // This is not ideal but can be used to as simple error indication // Errors should be handled as shown in Example 2 } void setup () { pinMode ( LED_BUILTIN , OUTPUT ); digitalWrite ( LED_BUILTIN , LOW ); // Sets 'matesErrorHandler' as the function for handling possible MatesError mates . attachErrorHandler ( matesErrorHandler ); mates . begin ( 9600 ); // do something... } void loop () { // do something... } MatesController mates = MatesController ( Serial ); void matesErrorHandler ( MatesError error ) { switch ( error ) { case MATES_ERROR_COMMAND_FAILED : // Do something when last command is invalid break ; case MATES_ERROR_RESPONSE_TIMEOUT : // Do something when the expected response from // the last command wasn't received on time break ; case MATES_ERROR_COMMAND_TIMEOUT : // Do something when the expected acknowledgement from // the last command wasn't received on time break ; case MATES_ERROR_NOT_INITIALIZED : // Do something when the display is not yet ready break ; default : break ; } } void setup () { // Sets 'matesErrorHandler' as the function for handling possible MatesError mates . attachErrorHandler ( matesErrorHandler ); mates . begin ( 9600 ); // do something... } void loop () { // do something... } setBacklight(value) This function can be used to set the backlight level to the value specified. Parameters Type Description value uint8_t The target backlight level Return success or failure ( boolean ) Example mates . setBacklight ( 7 ); // Set backlight value to 7 setPage(page) This function can be used to navigate to the specified page . Parameters Type Description page uint16_t The target page index Return success or failure ( boolean ) Example mates . setPage ( 1 ); // Navigate to Page1 getPage() This function can be used to query the current active page. Return Active page index ( uint16_t ) Example uint16_t activePage = mates . getPage (); // Query active page setWidgetValue(widget, value) This function can be used to set the 16-bit integer value of the specified widget Parameters Type Description widget int16_t The ID of the target widget value int16_t The new value for the widget Return success or failure ( boolean ) Note All applicable widget types are listed in here . This function is not applicable to Int32 and Float LedDigits Example mates . setWidgetValue ( MediaGaugeB0 , 50 ); // Set value of MediaGaugeB0 to 50 getWidgetValue(widget) This function can be used to query the specified widget 's value. Parameters Type Description widget int16_t The ID of the target widget Return Value of the specified widget ( int16_t ) Note All applicable widget types are listed in here . This function is not applicable to Int32 and Float LedDigits Example // Query the current value of MediaLed4 int16_t widgetVal = mates . getWidgetValue ( MediaLed4 ); setWidgetValue(type, index, value) This function can be used to set the 16-bit integer value of the widget specified by type and index . Parameters Type Description type MatesWidget The type of the target widget index int8_t The index of the target widget value int16_t The new value for the widget Return success or failure ( boolean ) Note All applicable widget types are listed in here . This function is not applicable to Int32 and Float LedDigits Example // Set value of MediaGaugeB0 to 50 mates . setWidgetValue ( MATES_MEDIA_GAUGE_B , 0 , 50 ); getWidgetValue(type, index) This function can be used to query the value of the widget specified by type and index . Parameters Type Description type MatesWidget The type of the target widget index int8_t The index of the target widget Return Value of the widget specified by type and index ( int16_t ) Note All applicable widget types are listed in here . This function is not applicable to Int32 and Float LedDigits Example // Query the current value of MediaLed4 int16_t widgetVal = mates . getWidgetValue ( MATES_MEDIA_LED , 4 ); setLedDigitsValue(index, value) This function can be used to set the 16-bit integer value of the LedDigits specified by index . Parameters Type Description index uint8_t The index of the target LedDigits value int16_t The new value for the LedDigits Return success or failure ( boolean ) Note This function is only applicable for Int16 LedDigits Example mates . setLedDigitsValue ( 0 , 1234 ); // Set value of LedDigits0 to 1234 setLedDigitsValue(index, value) This function can be used to set the 32-bit integer value of the LedDigits specified by index . Parameters Type Description index uint8_t The index of the target LedDigits value int32_t The new value for the LedDigits Return success or failure ( boolean ) Note This function is only applicable for Int32 LedDigits Example mates . setLedDigitsValue ( 0 , 602214076 ); // Set value of LedDigits0 to 602214076 setLedDigitsValue(index, value) This function can be used to set the float value of the LedDigits specified by index . Parameters Type Description index uint8_t The index of the target LedDigits value float The new value for the LedDigits Return success or failure ( boolean ) Note This function is only applicable for Float LedDigits Example // Set value of LedDigits1 to 3.1416 mates . setLedDigitsValue ( LedDigits1 , 3.1416 ); setSpectrumValue(widget, gaugeIndex, value) This function can be used to set the value of a specified gauge index of the spectrum widget specified. Parameters Type Description widget int16_t The ID of the target spectrum widget gaugeIndex uint8_t The gauge index of the target spectrum widget value uint8_t The new value for the widget Return success or failure ( boolean ) Note This function is only applicable for LedSpectrum and MediaSpectrum Example // Set value of gauge index 2 of LedSpectrum5 to 64 mates . setSpectrumValue ( LedSpectrum5 , 2 , 64 ); setLedSpectrumValue(index, gaugeIndex, value) This function can be used to set the value of a specified gaugeIndex of the Led Spectrum widget determined by index . Parameters Type Description index uint8_t The index of the target Led Spectrum widget gaugeIndex uint8_t The gauge index of the target Led Spectrum widget value uint8_t The new value for the column/row of the widget Return success or failure ( boolean ) Example // Set value of gauge index 2 of LedSpectrum5 to 64 mates . setLedSpectrumValue ( 5 , 2 , 64 ); setMediaSpectrumValue(type, index, gaugeIndex, value) This function can be used to set the value of a specified gaugeIndex of the Media Spectrum widget determined by index . Parameters Type Description index uint8_t The index of the target Led Spectrum widget gaugeIndex uint8_t The gauge index of the target Led Spectrum widget value uint8_t The new value for the column/row of the widget Return success or failure ( boolean ) Example // Set value of gauge index 3 of MediaSpectrum4 to 48 mates . setMediaSpectrumValue ( 4 , 3 , 48 ); setMediaColorLedValue(index, r, g, b) This function can be used to set the 32-bit integer value of the LedDigits specified by index . Parameters Type Description index uint8_t The index of the target MediaColorLed r uint8_t The red component of the new color of the MediaColorLed g uint8_t The green component of the new color of the MediaColorLed b uint8_t The blue component of the new color of the MediaColorLed Return success or failure ( boolean ) Note This function is only applicable for MediaColorLeds Example mates . setMediaColorLedValue ( 3 , 255 , 0 , 0 ); // Set value of MediaColorLed3 to RED setWidgetParam(widget, param, value) This function can be used to set the parameter ( param ) of the target widget to the specified value . Parameters Type Description widget int16_t The ID of the target widget param int16_t The target widget parameter value int16_t The new value for the widget parameter Return success or failure ( boolean ) Note All applicable widget types are listed in here . Example // Set GaugeA3's Background color to BLACK mates . setWidgetParam ( GaugeA3 , MATES_GAUGE_A_BG_COLOR , BLACK ); getWidgetParam(widget, param) This function can be used to query the parameter ( param ) of the target widget . Parameters Type Description widget int16_t The ID of the target widget param int16_t The target widget parameter Return The current param value of the widget (int16_t) Note All applicable widget types are listed in here . Example // Query the background color of GaugeA3 int16_t paramVal = mates . getWidgetParam ( GaugeA3 , MATES_GAUGE_A_BG_COLOR ); setWidgetParam(type, index, param, value); This function can be used to set the parameter ( param ) of the target widget, determined by type and index , to the specified value . Parameters Type Description type MatesWidget The type of the target widget index int8_t The index of the target widget param int16_t The target widget parameter value int16_t The new value for the widget parameter Return success or failure ( boolean ) Note All applicable widget types are listed in here . Example // Set GaugeA3's Background color to BLACK mates . setWidgetParam ( MATES_GAUGE_A , 3 , MATES_GAUGE_A_BG_COLOR , BLACK ); getWidgetParam(type, index, param) This function can be used to query the parameter ( param ) of the target widget, determined by type and index . Parameters Type Description type MatesWidget The type of the target widget index int8_t The index of the target widget param int16_t The target widget parameter Return The current param value of the widget specified by type and index (int16_t) Note All applicable widget types are listed in here . Example // Query the background color of GaugeA3 int16_t paramVal = mates . getWidgetParam ( MATES_GAUGE_A , 3 , MATES_GAUGE_A_BG_COLOR ); setBufferSize(size) This function can be used to adjust the max string buffer size to be used when composing a string for a TextArea or a PrintArea. The string composition is done by updateTextArea(index, format, ...) , updateDotMatrix(index, format, ...) and appendToPrintArea(index, format, ...) Parameters Type Description size uint16_t The new buffer size (max: 1000) Return success or failure (boolean) Example // Increase buffer size to a maximum of 100 characters // including the null terminator mates . setBufferSize ( 100 ); clearTextArea(index) This function can be used to clear the TextArea specified by index . Parameters Type Description index uint16_t The index of the target TextArea widget Return success or failure ( boolean ) Example mates . clearTextArea ( 6 ); // Clear TextArea6 updateTextArea(index, format, ...) This function can be used to update the contents of the TextArea specified by index with the text formed by format and the additional arguments. Parameters Type Description index uint16_t The index of the target TextArea widget format const char * The text to be written to the Text Area ... - Additional values to replace the format specifiers in format Return success or failure ( boolean ) Example Simple Text Formatting mates . updateTextArea ( 2 , \"Mates\" ); // Update TextArea2 to \"Mates\" int value = 76 ; mates . updateTextArea ( 3 , \"Value is %d\" , value ); // Print value to TextArea3 updateTextArea(index, str) This function can be used to update the contents of the TextArea specified by index with the String 'str'. Parameters Type Description index uint16_t The index of the target TextArea widget str String The String to be written to the Text Area Return success or failure ( boolean ) Example String str = \"Mates\" ; mates . updateTextArea ( 2 , str ); // Update TextArea2 to 'str' clearPrintArea(index) This function can be used to clear the PrintArea specified by index . Parameters Type Description index uint16_t The index of the target PrintArea widget Return success or failure ( boolean ) Example mates . clearPrintArea ( 5 ); // Clear PrintArea5 setPrintAreaColor(index, rgb565) This function can be used to set the print color ( rgb565 ) used by the PrintArea specified by index . Parameters Type Description index uint16_t The index of the target PrintArea widget rgb565 int16_t The color as a 16-bit RGB565 value Return success or failure ( boolean ) Example // Set print color of PrintArea4 to RED (0xF800) mates . setPrintAreaColor ( 4 , 0xF800 ); setPrintAreaColor(index, r, g, b) This function can be used to set the print color used by the PrintArea specified by index . The color is determined by r , g and b . Parameters Type Description index uint16_t The index of the target PrintArea widget r uint8_t The red component of the new color value g uint8_t The green component of the new color value b uint8_t The blue component of the new color value Return success or failure ( boolean ) Example mates . setPrintAreaColor ( 7 , 0 , 255 , 0 ); // Set print color of PrintArea7 to GREEN appendToPrintArea(index, buffer, len) This function can be used to append a number of bytes ( len ) from the data in buffer to the PrintArea specified by index . Parameters Type Description index uint16_t The index of the target Print Area widget buffer const int8_t * The source of data to be appended len uint16_t The number of bytes to be sent Return success or failure ( boolean ) Example int8_t data [] = { 0xF8 , 0x7F , 0x1F }; mates . appendToPrintArea ( 7 , data , 3 ); // Append data to PrintArea7 appendToPrintArea(index, format, ...) This function can be used to append contents to the PrintArea specified by index with the text formed by format and the additional arguments. Parameters Type Description index uint16_t The index of the target Print Area widget format const char * The text to be written to the PrintArea ... - Additional values to replace the format specifiers in format Return success or failure ( boolean ) Example Simple Text Formatting mates . appendToPrintArea ( 8 , \"Mates\" ); // Append \"Mates\" to PrintArea8 int value = 108 ; // Append value as text to PrintArea9 mates . appendToPrintArea ( 9 , \"Value: %d\" , value ); appendToPrintArea(index, str) This function can be used to append contents to the PrintArea specified by index with the String provided. Parameters Type Description index uint16_t The index of the target Print Area widget str String The text to be written to the PrintArea Return success or failure ( boolean ) Example String str = \"Mates\" ; mates . appendToPrintArea ( 2 , str ); // // Append 'str' to PrintArea2 appendToScope(index, buffer, len) This function can be used to append a number of 16-bit values ( len ) from the data in buffer to the Scope widget specified by index . Parameters Type Description index uint16_t The index of the target Scope widget buffer const int16_t * The source of data to be appended len uint16_t The number of values to be sent Return success or failure ( boolean ) Example int16_t data [] = { 0xF8 , 0x7F , 0x1F }; mates . appendToScope ( 7 , data , 3 ); // Append data to Scope7 updateDotMatrix(index, format, ...) This function can be used to append contents to the DotMatrix specified by index with the text formed by format and the additional arguments. Parameters Type Description index uint16_t The index of the target DotMatrix widget format const char * The text to be written to the DotMatrix ... - Additional values to replace the format specifiers in format Return success or failure ( boolean ) Example Simple Text Formatting mates . updateDotMatrix ( 8 , \"Mates\" ); // Update DotMatrix0 to \"Mates\" int value = 108 ; mates . updateDotMatrix ( 9 , \"Value: %d\" , value ); // Update DotMatrix0 to show value updateDotMatrix(index, str) This function can be used to update the contents of the DotMatrix specified by index with the String 'str'. Parameters Type Description index uint16_t The index of the target DotMatrix widget str String The String to be written to the DotMatrix Return success or failure ( boolean ) Example String str = \"Mates\" ; mates . updateDotMatrix ( 2 , str ); // Update DotMatrix2 to 'str' getButtonEventCount() This function can be used to query the number of button events recorded by a touch screen module Return Number of recorded button events ( uint16_t ) Example // Query the number of button events recorded uint16_t btnEvents = mates . getButtonEventCount (); getNextButtonEvent() This function can be used to query the source of next recorded button event Return Widget ID of the next event button ( int16_t ) Example // If there is any event recorded if ( mates . getButtonEventCount () > 0 ) { int16_t button = mates . getNextButtonEvent (); switch ( button ) { case MediaButton1 : // if the button pressed is MediaButton1 // do something break ; // add more possible cases here... default : break ; } } getSwipeEventCount() This function can be used to query the number of swipe events recorded by a touch screen module Return Number of recorded swipe events ( uint16_t ) Example // Query the number of swipe events recorded uint16_t swipeEvents = mates . getSwipeEventCount (); getNextButtonEvent() This function can be used to query the source of next recorded button event Return Swipe event (int16_t) Example // If there is any event recorded if ( mates . getSwipeEventCount () > 0 ) { int16_t swipe = mates . getNextSwipeEvent (); if (( swipe & MATES_SWIPE_SOUTH ) == MATES_SWIPE_SOUTH ) { // if swipe is towards from top to bottom } if (( swipe & MATES_SWIPE_EAST ) == MATES_SWIPE_EAST ) { // if swipe is towards from left to right } if (( swipe & MATES_SWIPE_TLBR ) == MATES_SWIPE_TLBR ) { // if swipe is towards from top left to bottom right } } getVersion() This function can be used to query the version number of the library. Return Version Information ( String ) Example // Get the library version number as string String matesVersion = mates . getVersion (); getCompatibility() This function can be used to query the version number of Mates Studio compatible with the version of the library. Return Compatibility Version Information ( String ) Example // Get the compatible Mates Studio version number as string String compatVersion = mates . getCompatibility (); printVersion() This function can be used to print the version number of the library and the compatible Mates Studio version to the debug serial port. If no debug serial was specified in the constructor, this function does nothing. Return none Example // Prints library version and compatible Mates Studio version to debug serial mates . printVersion (); getError() This function can be used to investigate errors that occurred while controlling the display module. Description of the possible errors is discussed in here . Return Current error code ( MatesError ) Example // Checks the last error that occurred int error = mates . getError (); if ( error == MATES_ERROR_NONE ) { // Last command was successful }","title":"Arduino"},{"location":"Mates%20Controller%20Libraries/arduino-mates-controller/#mates-controller-arduino-library","text":"","title":"Mates Controller Arduino Library"},{"location":"Mates%20Controller%20Libraries/arduino-mates-controller/#introduction","text":"This library is developed to easily control Breadboard Mates modules using Arduino-compatible boards by utilizing the Mates Controller Command Protocol . This applies to projects developed using Commander and Architect environments. For working examples of using the library and its functions in a project, refer to the examples and extras directories in the repository .","title":"Introduction"},{"location":"Mates%20Controller%20Libraries/arduino-mates-controller/#constructors","text":"This section serves to provide brief discussion about the constructors that can be used to initialize the library.","title":"Constructors"},{"location":"Mates%20Controller%20Libraries/arduino-mates-controller/#matescontrollerserial-resetpin-mode","text":"This is the main constructor for the library. It creates a unique instance and sets the specified display serial port and reset pin. If serial is not a HardwareSerial (or SoftwareSerial for AVR devices), the Serial stream needs to be initialized manually before running begin(baudrate, resetModule) function. Parameters Type Description serial Stream The serial port to use for controlling the display module resetPin (optional) uint8_t Arduino reset pin to use for resetting the display module (default: 4) mode (optional) uint8_t Arduino reset pulse to use when performing reset (default: LOW) Example Simple Specify Pin Specify Pin and Pulse Mode // Creates a new instance named 'mates' which utilizes: // - Serial as UART // - Pin 4 of Arduino as Reset Pin (default) // - Reset mode as a LOW pulse (default) MatesController mates = MatesController ( Serial ); // Creates a new instance named 'mates' which utilizes: // - Serial as UART // - Pin 5 of Arduino as Reset Pin // - Reset mode as a LOW pulse (default) MatesController mates = MatesController ( Serial , 5 ); // Creates a new instance named 'mates' which utilizes: // - Serial as UART // - Pin 6 of Arduino as Reset Pin // - Reset mode as a HIGH pulse MatesController mates = MatesController ( Serial , 6 , HIGH );","title":"MatesController(serial, resetPin, mode)"},{"location":"Mates%20Controller%20Libraries/arduino-mates-controller/#matescontrollerserial-dbserial-resetpin-mode","text":"This is an alternative constructor for the library. It creates a unique instance and sets the specified display serial port, debug serial and reset pin. If not using a HardwareSerial (or SoftwareSerial for AVR devices), the Serial stream needs to be initialized manually before running the begin(baudrate, resetModule) function. Parameters Type Description serial Stream The serial port to use for controlling the display module dbSerial Stream The serial port to use for printing debug messages resetPin (optional) uint8_t Arduino reset pin to use for resetting the display module (default: 4) mode (optional) uint8_t Arduino reset pulse to use when performing reset (default: LOW) Example Simple Specify Pin Specify Pin and Pulse Mode // Creates a new instance named 'mates' which utilizes: // - Serial1 as display UART // - Serial as debug UART // - Pin 4 of Arduino as Reset Pin (default) // - Reset mode as a LOW pulse (default) MatesController mates = MatesController ( Serial1 , Serial ); // Creates a new instance named 'mates' which utilizes: // - Serial1 as display UART // - Serial as debug UART // - Pin 5 of Arduino as Reset Pin // - Reset mode as a LOW pulse (default) MatesController mates = MatesController ( Serial1 , Serial , 5 ); // Creates a new instance named 'mates' which utilizes: // - Serial1 as display UART // - Serial as debug UART // - Pin 6 of Arduino as Reset Pin // - Reset mode as a HIGH pulse MatesController mates = MatesController ( Serial1 , Serial , 6 , HIGH ); Note If a debug serial port is specified, it should be initialized before running the begin() function of this library.","title":"MatesController(serial, dbSerial, resetPin, mode)"},{"location":"Mates%20Controller%20Libraries/arduino-mates-controller/#functions","text":"This section serves to provide brief discussion about the functions that can be used with an initialized MatesController object.","title":"Functions"},{"location":"Mates%20Controller%20Libraries/arduino-mates-controller/#beginbaudrate-resetmodule","text":"This function must be used once to initialize the Serial port at the start of the Arduino application and to reset or synchronize with the display. Parameters Type Description baudrate (optional) int32_t Baudrate setting to be used to control the display module (default: 9600) resetModule (optional) bool Indicates whether the module should be reset from the hardware reset pin (default: true) Return success or failure ( boolean ) Note Baudrate is ignored when not using a HardwareSerial (or SoftwareSerial for AVR devices) to communicate with the display. In that case, the Serial/Stream instance needs to be initialize before using this function. If resetModule is false, this function will attempt to synchronize with the display. Developers also need to be aware of the boot timing of the module. This should be around 3-5 seconds or more depending on the project after power on. If more time is needed to sync, set a higher boot timeout using setBootTimeout(timeout) . Ensure that the baudrate matches the baudrate setting of the Mates Studio Commander/Architect project. If a debug serial port is specified, it should be initialized manually before running the begin() function of this library. Example Simple Specify Baudrate Specify Baudrate and Reset Option // Initializes display serial port with 9600 (default) and resets the display mates . begin (); // Initializes display serial port with 115200 baud and resets the display mates . begin ( 115200 ); // Initializes display serial port with 19200 baud and skips reset mates . begin ( 19200 , false );","title":"begin(baudrate, resetModule)"},{"location":"Mates%20Controller%20Libraries/arduino-mates-controller/#isready","text":"This function can be used to determine if the module is in sync with the Arduino host. Return Sync Status ( boolean ) Example // Check if the module is in sync if ( mates . isReady ()) { // Write to or read from widgets } else { mates . sync (); // Try to resync with the module }","title":"isReady()"},{"location":"Mates%20Controller%20Libraries/arduino-mates-controller/#autoresyncattempts-waitperiod","text":"This function can be used to setup auto resynchronization when an error occurs. Parameters Type Description attempts uint8_t Number of resync attempts to perform waitPeriod (optional) uint16_t Timeout period to wait for every resync attempt (default: boot timeout) Return none Example Simple Specify Timeout // Setup 3 automatic attempts to resync with default timeout mates . autoResync ( 3 ); // Setup 5 automatic attempts to resync with 10000ms timeout mates . autoResync ( 5 , 10000 );","title":"autoResync(attempts, waitPeriod)"},{"location":"Mates%20Controller%20Libraries/arduino-mates-controller/#syncresettopage0-waitperiod","text":"This function can be used to establish synchronization between the BBM module and the Arduino compatible host. Parameters Type Description resetToPage0 bool Indicates whether to go to Page0 after a successful synchronization (default: true) waitPeriod (optional) uint16_t Timeout period to wait until the display is ready (default: boot timeout) Return success or failure ( boolean ) Example Simple Return to Page0 if Successful Specify Timeout // Attempts to synchronize with the display if ( mates . sync ()) { // Do something if synchronization was successful } else { // Do something if synchronization failed } // Attempts to synchronize with the display if ( mates . sync ( true )) { // Do something if synchronization was successful // and project returned to Page0 } else { // Do something if synchronization failed } // Attempts to synchronize with the display with a timeout of 10000 if ( mates . sync ( true , 10000 )) { // Do something if synchronization was successful // and project returned to Page0 } else { // Do something if synchronization failed }","title":"sync(resetToPage0, waitPeriod)"},{"location":"Mates%20Controller%20Libraries/arduino-mates-controller/#resetwaitperiod","text":"This function can be used to reset the display by sending a reset pulse from the reset pin specified through the contructor. The default wait period is 5 seconds (5000 ms) or as specified by setBootTimeout(timeout) . The function finishes as soon as the display sends the ready signal or the wait period passes. Parameters Type Description waitPeriod (optional) uint16_t Timeout period to wait until the display is ready (default: boot timeout) Return success or failure ( boolean ) Example Simple Specify Timeout // Reset the display and wait for mates . reset (); // a period of 5 seconds (default) // (actually the current boot timeout which is 5s by default) // Reset the display and wait for mates . reset ( 4000 ); // a period of 4 seconds","title":"reset(waitPeriod)"},{"location":"Mates%20Controller%20Libraries/arduino-mates-controller/#softresetwaitperiod","text":"This function can be used to reset the display by sending a reset command. The default wait period is 5 seconds (5000 ms) or as specified by setBootTimeout(timeout) . The function finishes as soon as the display sends the ready signal or the wait period passes. Parameters Type Description waitPeriod (optional) uint16_t Timeout period to wait until the display is ready (default: boot timeout) Return success or failure ( boolean ) Example Simple Specify Timeout // Reset the display and wait for mates . softReset (); // a period of 5 seconds (default boot timeout) // Reset the display and wait for mates . softReset ( 4000 ); // a period of 4 seconds","title":"softReset(waitPeriod)"},{"location":"Mates%20Controller%20Libraries/arduino-mates-controller/#setboottimeouttimeout","text":"This function can be used to set the wait period during reset and softReset. Parameters Type Description timeout uint32_t New timeout period to wait until the display is ready Return success or failure ( boolean ) Example mates . setBootTimeout ( 10000 ); // sets boot timeout to a period of 10 seconds","title":"setBootTimeout(timeout)"},{"location":"Mates%20Controller%20Libraries/arduino-mates-controller/#resetboottimeouttimeout","text":"This function can be used to reset the wait period during reset and softReset to the default 5 seconds. Return none Example mates . resetBootTimeout (); // resets boot timeout to the default period","title":"resetBootTimeout(timeout)"},{"location":"Mates%20Controller%20Libraries/arduino-mates-controller/#attacherrorhandlerhandler","text":"This function can be used to attach and error handler function to the library. Parameters Type Description handler MatesErrorHandler Custom function to handle errors as they come Return none Example Simple Recommended MatesController mates = MatesController ( Serial ); void matesErrorHandler ( MatesError error ) { while ( true ) { digitalWrite ( LED_BUILTIN , HIGH ); delay ( 200 ); digitalWrite ( LED_BUILTIN , LOW ); delay ( 200 ); } // Blink builtin LED and block project execution // This is not ideal but can be used to as simple error indication // Errors should be handled as shown in Example 2 } void setup () { pinMode ( LED_BUILTIN , OUTPUT ); digitalWrite ( LED_BUILTIN , LOW ); // Sets 'matesErrorHandler' as the function for handling possible MatesError mates . attachErrorHandler ( matesErrorHandler ); mates . begin ( 9600 ); // do something... } void loop () { // do something... } MatesController mates = MatesController ( Serial ); void matesErrorHandler ( MatesError error ) { switch ( error ) { case MATES_ERROR_COMMAND_FAILED : // Do something when last command is invalid break ; case MATES_ERROR_RESPONSE_TIMEOUT : // Do something when the expected response from // the last command wasn't received on time break ; case MATES_ERROR_COMMAND_TIMEOUT : // Do something when the expected acknowledgement from // the last command wasn't received on time break ; case MATES_ERROR_NOT_INITIALIZED : // Do something when the display is not yet ready break ; default : break ; } } void setup () { // Sets 'matesErrorHandler' as the function for handling possible MatesError mates . attachErrorHandler ( matesErrorHandler ); mates . begin ( 9600 ); // do something... } void loop () { // do something... }","title":"attachErrorHandler(handler)"},{"location":"Mates%20Controller%20Libraries/arduino-mates-controller/#setbacklightvalue","text":"This function can be used to set the backlight level to the value specified. Parameters Type Description value uint8_t The target backlight level Return success or failure ( boolean ) Example mates . setBacklight ( 7 ); // Set backlight value to 7","title":"setBacklight(value)"},{"location":"Mates%20Controller%20Libraries/arduino-mates-controller/#setpagepage","text":"This function can be used to navigate to the specified page . Parameters Type Description page uint16_t The target page index Return success or failure ( boolean ) Example mates . setPage ( 1 ); // Navigate to Page1","title":"setPage(page)"},{"location":"Mates%20Controller%20Libraries/arduino-mates-controller/#getpage","text":"This function can be used to query the current active page. Return Active page index ( uint16_t ) Example uint16_t activePage = mates . getPage (); // Query active page","title":"getPage()"},{"location":"Mates%20Controller%20Libraries/arduino-mates-controller/#setwidgetvaluewidget-value","text":"This function can be used to set the 16-bit integer value of the specified widget Parameters Type Description widget int16_t The ID of the target widget value int16_t The new value for the widget Return success or failure ( boolean ) Note All applicable widget types are listed in here . This function is not applicable to Int32 and Float LedDigits Example mates . setWidgetValue ( MediaGaugeB0 , 50 ); // Set value of MediaGaugeB0 to 50","title":"setWidgetValue(widget, value)"},{"location":"Mates%20Controller%20Libraries/arduino-mates-controller/#getwidgetvaluewidget","text":"This function can be used to query the specified widget 's value. Parameters Type Description widget int16_t The ID of the target widget Return Value of the specified widget ( int16_t ) Note All applicable widget types are listed in here . This function is not applicable to Int32 and Float LedDigits Example // Query the current value of MediaLed4 int16_t widgetVal = mates . getWidgetValue ( MediaLed4 );","title":"getWidgetValue(widget)"},{"location":"Mates%20Controller%20Libraries/arduino-mates-controller/#setwidgetvaluetype-index-value","text":"This function can be used to set the 16-bit integer value of the widget specified by type and index . Parameters Type Description type MatesWidget The type of the target widget index int8_t The index of the target widget value int16_t The new value for the widget Return success or failure ( boolean ) Note All applicable widget types are listed in here . This function is not applicable to Int32 and Float LedDigits Example // Set value of MediaGaugeB0 to 50 mates . setWidgetValue ( MATES_MEDIA_GAUGE_B , 0 , 50 );","title":"setWidgetValue(type, index, value)"},{"location":"Mates%20Controller%20Libraries/arduino-mates-controller/#getwidgetvaluetype-index","text":"This function can be used to query the value of the widget specified by type and index . Parameters Type Description type MatesWidget The type of the target widget index int8_t The index of the target widget Return Value of the widget specified by type and index ( int16_t ) Note All applicable widget types are listed in here . This function is not applicable to Int32 and Float LedDigits Example // Query the current value of MediaLed4 int16_t widgetVal = mates . getWidgetValue ( MATES_MEDIA_LED , 4 );","title":"getWidgetValue(type, index)"},{"location":"Mates%20Controller%20Libraries/arduino-mates-controller/#setleddigitsvalueindex-value","text":"This function can be used to set the 16-bit integer value of the LedDigits specified by index . Parameters Type Description index uint8_t The index of the target LedDigits value int16_t The new value for the LedDigits Return success or failure ( boolean ) Note This function is only applicable for Int16 LedDigits Example mates . setLedDigitsValue ( 0 , 1234 ); // Set value of LedDigits0 to 1234","title":"setLedDigitsValue(index, value)"},{"location":"Mates%20Controller%20Libraries/arduino-mates-controller/#setleddigitsvalueindex-value_1","text":"This function can be used to set the 32-bit integer value of the LedDigits specified by index . Parameters Type Description index uint8_t The index of the target LedDigits value int32_t The new value for the LedDigits Return success or failure ( boolean ) Note This function is only applicable for Int32 LedDigits Example mates . setLedDigitsValue ( 0 , 602214076 ); // Set value of LedDigits0 to 602214076","title":"setLedDigitsValue(index, value)"},{"location":"Mates%20Controller%20Libraries/arduino-mates-controller/#setleddigitsvalueindex-value_2","text":"This function can be used to set the float value of the LedDigits specified by index . Parameters Type Description index uint8_t The index of the target LedDigits value float The new value for the LedDigits Return success or failure ( boolean ) Note This function is only applicable for Float LedDigits Example // Set value of LedDigits1 to 3.1416 mates . setLedDigitsValue ( LedDigits1 , 3.1416 );","title":"setLedDigitsValue(index, value)"},{"location":"Mates%20Controller%20Libraries/arduino-mates-controller/#setspectrumvaluewidget-gaugeindex-value","text":"This function can be used to set the value of a specified gauge index of the spectrum widget specified. Parameters Type Description widget int16_t The ID of the target spectrum widget gaugeIndex uint8_t The gauge index of the target spectrum widget value uint8_t The new value for the widget Return success or failure ( boolean ) Note This function is only applicable for LedSpectrum and MediaSpectrum Example // Set value of gauge index 2 of LedSpectrum5 to 64 mates . setSpectrumValue ( LedSpectrum5 , 2 , 64 );","title":"setSpectrumValue(widget, gaugeIndex, value)"},{"location":"Mates%20Controller%20Libraries/arduino-mates-controller/#setledspectrumvalueindex-gaugeindex-value","text":"This function can be used to set the value of a specified gaugeIndex of the Led Spectrum widget determined by index . Parameters Type Description index uint8_t The index of the target Led Spectrum widget gaugeIndex uint8_t The gauge index of the target Led Spectrum widget value uint8_t The new value for the column/row of the widget Return success or failure ( boolean ) Example // Set value of gauge index 2 of LedSpectrum5 to 64 mates . setLedSpectrumValue ( 5 , 2 , 64 );","title":"setLedSpectrumValue(index, gaugeIndex, value)"},{"location":"Mates%20Controller%20Libraries/arduino-mates-controller/#setmediaspectrumvaluetype-index-gaugeindex-value","text":"This function can be used to set the value of a specified gaugeIndex of the Media Spectrum widget determined by index . Parameters Type Description index uint8_t The index of the target Led Spectrum widget gaugeIndex uint8_t The gauge index of the target Led Spectrum widget value uint8_t The new value for the column/row of the widget Return success or failure ( boolean ) Example // Set value of gauge index 3 of MediaSpectrum4 to 48 mates . setMediaSpectrumValue ( 4 , 3 , 48 );","title":"setMediaSpectrumValue(type, index, gaugeIndex, value)"},{"location":"Mates%20Controller%20Libraries/arduino-mates-controller/#setmediacolorledvalueindex-r-g-b","text":"This function can be used to set the 32-bit integer value of the LedDigits specified by index . Parameters Type Description index uint8_t The index of the target MediaColorLed r uint8_t The red component of the new color of the MediaColorLed g uint8_t The green component of the new color of the MediaColorLed b uint8_t The blue component of the new color of the MediaColorLed Return success or failure ( boolean ) Note This function is only applicable for MediaColorLeds Example mates . setMediaColorLedValue ( 3 , 255 , 0 , 0 ); // Set value of MediaColorLed3 to RED","title":"setMediaColorLedValue(index, r, g, b)"},{"location":"Mates%20Controller%20Libraries/arduino-mates-controller/#setwidgetparamwidget-param-value","text":"This function can be used to set the parameter ( param ) of the target widget to the specified value . Parameters Type Description widget int16_t The ID of the target widget param int16_t The target widget parameter value int16_t The new value for the widget parameter Return success or failure ( boolean ) Note All applicable widget types are listed in here . Example // Set GaugeA3's Background color to BLACK mates . setWidgetParam ( GaugeA3 , MATES_GAUGE_A_BG_COLOR , BLACK );","title":"setWidgetParam(widget, param, value)"},{"location":"Mates%20Controller%20Libraries/arduino-mates-controller/#getwidgetparamwidget-param","text":"This function can be used to query the parameter ( param ) of the target widget . Parameters Type Description widget int16_t The ID of the target widget param int16_t The target widget parameter Return The current param value of the widget (int16_t) Note All applicable widget types are listed in here . Example // Query the background color of GaugeA3 int16_t paramVal = mates . getWidgetParam ( GaugeA3 , MATES_GAUGE_A_BG_COLOR );","title":"getWidgetParam(widget, param)"},{"location":"Mates%20Controller%20Libraries/arduino-mates-controller/#setwidgetparamtype-index-param-value","text":"This function can be used to set the parameter ( param ) of the target widget, determined by type and index , to the specified value . Parameters Type Description type MatesWidget The type of the target widget index int8_t The index of the target widget param int16_t The target widget parameter value int16_t The new value for the widget parameter Return success or failure ( boolean ) Note All applicable widget types are listed in here . Example // Set GaugeA3's Background color to BLACK mates . setWidgetParam ( MATES_GAUGE_A , 3 , MATES_GAUGE_A_BG_COLOR , BLACK );","title":"setWidgetParam(type, index, param, value);"},{"location":"Mates%20Controller%20Libraries/arduino-mates-controller/#getwidgetparamtype-index-param","text":"This function can be used to query the parameter ( param ) of the target widget, determined by type and index . Parameters Type Description type MatesWidget The type of the target widget index int8_t The index of the target widget param int16_t The target widget parameter Return The current param value of the widget specified by type and index (int16_t) Note All applicable widget types are listed in here . Example // Query the background color of GaugeA3 int16_t paramVal = mates . getWidgetParam ( MATES_GAUGE_A , 3 , MATES_GAUGE_A_BG_COLOR );","title":"getWidgetParam(type, index, param)"},{"location":"Mates%20Controller%20Libraries/arduino-mates-controller/#setbuffersizesize","text":"This function can be used to adjust the max string buffer size to be used when composing a string for a TextArea or a PrintArea. The string composition is done by updateTextArea(index, format, ...) , updateDotMatrix(index, format, ...) and appendToPrintArea(index, format, ...) Parameters Type Description size uint16_t The new buffer size (max: 1000) Return success or failure (boolean) Example // Increase buffer size to a maximum of 100 characters // including the null terminator mates . setBufferSize ( 100 );","title":"setBufferSize(size)"},{"location":"Mates%20Controller%20Libraries/arduino-mates-controller/#cleartextareaindex","text":"This function can be used to clear the TextArea specified by index . Parameters Type Description index uint16_t The index of the target TextArea widget Return success or failure ( boolean ) Example mates . clearTextArea ( 6 ); // Clear TextArea6","title":"clearTextArea(index)"},{"location":"Mates%20Controller%20Libraries/arduino-mates-controller/#updatetextareaindex-format","text":"This function can be used to update the contents of the TextArea specified by index with the text formed by format and the additional arguments. Parameters Type Description index uint16_t The index of the target TextArea widget format const char * The text to be written to the Text Area ... - Additional values to replace the format specifiers in format Return success or failure ( boolean ) Example Simple Text Formatting mates . updateTextArea ( 2 , \"Mates\" ); // Update TextArea2 to \"Mates\" int value = 76 ; mates . updateTextArea ( 3 , \"Value is %d\" , value ); // Print value to TextArea3","title":"updateTextArea(index, format, ...)"},{"location":"Mates%20Controller%20Libraries/arduino-mates-controller/#updatetextareaindex-str","text":"This function can be used to update the contents of the TextArea specified by index with the String 'str'. Parameters Type Description index uint16_t The index of the target TextArea widget str String The String to be written to the Text Area Return success or failure ( boolean ) Example String str = \"Mates\" ; mates . updateTextArea ( 2 , str ); // Update TextArea2 to 'str'","title":"updateTextArea(index, str)"},{"location":"Mates%20Controller%20Libraries/arduino-mates-controller/#clearprintareaindex","text":"This function can be used to clear the PrintArea specified by index . Parameters Type Description index uint16_t The index of the target PrintArea widget Return success or failure ( boolean ) Example mates . clearPrintArea ( 5 ); // Clear PrintArea5","title":"clearPrintArea(index)"},{"location":"Mates%20Controller%20Libraries/arduino-mates-controller/#setprintareacolorindex-rgb565","text":"This function can be used to set the print color ( rgb565 ) used by the PrintArea specified by index . Parameters Type Description index uint16_t The index of the target PrintArea widget rgb565 int16_t The color as a 16-bit RGB565 value Return success or failure ( boolean ) Example // Set print color of PrintArea4 to RED (0xF800) mates . setPrintAreaColor ( 4 , 0xF800 );","title":"setPrintAreaColor(index, rgb565)"},{"location":"Mates%20Controller%20Libraries/arduino-mates-controller/#setprintareacolorindex-r-g-b","text":"This function can be used to set the print color used by the PrintArea specified by index . The color is determined by r , g and b . Parameters Type Description index uint16_t The index of the target PrintArea widget r uint8_t The red component of the new color value g uint8_t The green component of the new color value b uint8_t The blue component of the new color value Return success or failure ( boolean ) Example mates . setPrintAreaColor ( 7 , 0 , 255 , 0 ); // Set print color of PrintArea7 to GREEN","title":"setPrintAreaColor(index, r, g, b)"},{"location":"Mates%20Controller%20Libraries/arduino-mates-controller/#appendtoprintareaindex-buffer-len","text":"This function can be used to append a number of bytes ( len ) from the data in buffer to the PrintArea specified by index . Parameters Type Description index uint16_t The index of the target Print Area widget buffer const int8_t * The source of data to be appended len uint16_t The number of bytes to be sent Return success or failure ( boolean ) Example int8_t data [] = { 0xF8 , 0x7F , 0x1F }; mates . appendToPrintArea ( 7 , data , 3 ); // Append data to PrintArea7","title":"appendToPrintArea(index, buffer, len)"},{"location":"Mates%20Controller%20Libraries/arduino-mates-controller/#appendtoprintareaindex-format","text":"This function can be used to append contents to the PrintArea specified by index with the text formed by format and the additional arguments. Parameters Type Description index uint16_t The index of the target Print Area widget format const char * The text to be written to the PrintArea ... - Additional values to replace the format specifiers in format Return success or failure ( boolean ) Example Simple Text Formatting mates . appendToPrintArea ( 8 , \"Mates\" ); // Append \"Mates\" to PrintArea8 int value = 108 ; // Append value as text to PrintArea9 mates . appendToPrintArea ( 9 , \"Value: %d\" , value );","title":"appendToPrintArea(index, format, ...)"},{"location":"Mates%20Controller%20Libraries/arduino-mates-controller/#appendtoprintareaindex-str","text":"This function can be used to append contents to the PrintArea specified by index with the String provided. Parameters Type Description index uint16_t The index of the target Print Area widget str String The text to be written to the PrintArea Return success or failure ( boolean ) Example String str = \"Mates\" ; mates . appendToPrintArea ( 2 , str ); // // Append 'str' to PrintArea2","title":"appendToPrintArea(index, str)"},{"location":"Mates%20Controller%20Libraries/arduino-mates-controller/#appendtoscopeindex-buffer-len","text":"This function can be used to append a number of 16-bit values ( len ) from the data in buffer to the Scope widget specified by index . Parameters Type Description index uint16_t The index of the target Scope widget buffer const int16_t * The source of data to be appended len uint16_t The number of values to be sent Return success or failure ( boolean ) Example int16_t data [] = { 0xF8 , 0x7F , 0x1F }; mates . appendToScope ( 7 , data , 3 ); // Append data to Scope7","title":"appendToScope(index, buffer, len)"},{"location":"Mates%20Controller%20Libraries/arduino-mates-controller/#updatedotmatrixindex-format","text":"This function can be used to append contents to the DotMatrix specified by index with the text formed by format and the additional arguments. Parameters Type Description index uint16_t The index of the target DotMatrix widget format const char * The text to be written to the DotMatrix ... - Additional values to replace the format specifiers in format Return success or failure ( boolean ) Example Simple Text Formatting mates . updateDotMatrix ( 8 , \"Mates\" ); // Update DotMatrix0 to \"Mates\" int value = 108 ; mates . updateDotMatrix ( 9 , \"Value: %d\" , value ); // Update DotMatrix0 to show value","title":"updateDotMatrix(index, format, ...)"},{"location":"Mates%20Controller%20Libraries/arduino-mates-controller/#updatedotmatrixindex-str","text":"This function can be used to update the contents of the DotMatrix specified by index with the String 'str'. Parameters Type Description index uint16_t The index of the target DotMatrix widget str String The String to be written to the DotMatrix Return success or failure ( boolean ) Example String str = \"Mates\" ; mates . updateDotMatrix ( 2 , str ); // Update DotMatrix2 to 'str'","title":"updateDotMatrix(index, str)"},{"location":"Mates%20Controller%20Libraries/arduino-mates-controller/#getbuttoneventcount","text":"This function can be used to query the number of button events recorded by a touch screen module Return Number of recorded button events ( uint16_t ) Example // Query the number of button events recorded uint16_t btnEvents = mates . getButtonEventCount ();","title":"getButtonEventCount()"},{"location":"Mates%20Controller%20Libraries/arduino-mates-controller/#getnextbuttonevent","text":"This function can be used to query the source of next recorded button event Return Widget ID of the next event button ( int16_t ) Example // If there is any event recorded if ( mates . getButtonEventCount () > 0 ) { int16_t button = mates . getNextButtonEvent (); switch ( button ) { case MediaButton1 : // if the button pressed is MediaButton1 // do something break ; // add more possible cases here... default : break ; } }","title":"getNextButtonEvent()"},{"location":"Mates%20Controller%20Libraries/arduino-mates-controller/#getswipeeventcount","text":"This function can be used to query the number of swipe events recorded by a touch screen module Return Number of recorded swipe events ( uint16_t ) Example // Query the number of swipe events recorded uint16_t swipeEvents = mates . getSwipeEventCount ();","title":"getSwipeEventCount()"},{"location":"Mates%20Controller%20Libraries/arduino-mates-controller/#getnextbuttonevent_1","text":"This function can be used to query the source of next recorded button event Return Swipe event (int16_t) Example // If there is any event recorded if ( mates . getSwipeEventCount () > 0 ) { int16_t swipe = mates . getNextSwipeEvent (); if (( swipe & MATES_SWIPE_SOUTH ) == MATES_SWIPE_SOUTH ) { // if swipe is towards from top to bottom } if (( swipe & MATES_SWIPE_EAST ) == MATES_SWIPE_EAST ) { // if swipe is towards from left to right } if (( swipe & MATES_SWIPE_TLBR ) == MATES_SWIPE_TLBR ) { // if swipe is towards from top left to bottom right } }","title":"getNextButtonEvent()"},{"location":"Mates%20Controller%20Libraries/arduino-mates-controller/#getversion","text":"This function can be used to query the version number of the library. Return Version Information ( String ) Example // Get the library version number as string String matesVersion = mates . getVersion ();","title":"getVersion()"},{"location":"Mates%20Controller%20Libraries/arduino-mates-controller/#getcompatibility","text":"This function can be used to query the version number of Mates Studio compatible with the version of the library. Return Compatibility Version Information ( String ) Example // Get the compatible Mates Studio version number as string String compatVersion = mates . getCompatibility ();","title":"getCompatibility()"},{"location":"Mates%20Controller%20Libraries/arduino-mates-controller/#printversion","text":"This function can be used to print the version number of the library and the compatible Mates Studio version to the debug serial port. If no debug serial was specified in the constructor, this function does nothing. Return none Example // Prints library version and compatible Mates Studio version to debug serial mates . printVersion ();","title":"printVersion()"},{"location":"Mates%20Controller%20Libraries/arduino-mates-controller/#geterror","text":"This function can be used to investigate errors that occurred while controlling the display module. Description of the possible errors is discussed in here . Return Current error code ( MatesError ) Example // Checks the last error that occurred int error = mates . getError (); if ( error == MATES_ERROR_NONE ) { // Last command was successful }","title":"getError()"},{"location":"Mates%20Controller%20Libraries/bbm-python-mates-controller/","tags":["Commander","Architect","Python"],"text":"BBM Python Mates Controller Library Introduction This library is developed to easily control Breadboard Mates modules from any computer that can run Python and connects with a BBM display module using a BBM Programmer or similar. This is based on the Python Mates Controller library . Therefore, all methods are directly derived from it. Supported Devices This library is developed for Python3 and designed to be used with any operating system as long as it is supported by the pyserial library and the BBM display module is connected using a BBM Programmer. Installation This library can be installed from the Python Packaging Index (PyPI) by running the command: pip3 install bbm-mates-controller Constructors This section serves to provide brief discussion about the constructors that can be used to initialize the library. MatesController(portName, resetFunction, debugStream, debugFileLength) Constructs all the necessary attributes associated with an instance of a Mates Controller Object. Parameters Type Description portName str the name of the port to be opened. Example: /dev/ttyUSB0 for Linux debugStream (optional) io.TextIOWrapper text file object to write debugging code to, supply of none will result in no debugging. Ex. sys.stdout , open('log.txt', 'r+') debugFileLength (optional) int determines the extent of debug history kept with respect to lines in a file, given a circular log. O indicates full history kept with no circular logging. Users must be careful here to manage storage space effectively Note If a debug file is specified, it should be opened using either 'w+' or 'r+' before running the begin() function of this library. Example Simple Specify Debug Output # Creates a new instance named 'mates' which utilizes: # - COM10 as the serial port # - with no reset function and no output stream MatesController mates = MatesController ( \"COM10\" ) # Creates a new instance named 'mates' which utilizes: # - COM7 as the serial port # - output_file as debug file stream # - debugFileLength of zero indicating no circular logging MatesController mates = MatesController ( \"COM7\" , debugStream = output_file , debugFileLength = 0 ) Methods All methods are carried over from Python Mates Controller library instance.","title":"BBM Python"},{"location":"Mates%20Controller%20Libraries/bbm-python-mates-controller/#bbm-python-mates-controller-library","text":"","title":"BBM Python Mates Controller Library"},{"location":"Mates%20Controller%20Libraries/bbm-python-mates-controller/#introduction","text":"This library is developed to easily control Breadboard Mates modules from any computer that can run Python and connects with a BBM display module using a BBM Programmer or similar. This is based on the Python Mates Controller library . Therefore, all methods are directly derived from it.","title":"Introduction"},{"location":"Mates%20Controller%20Libraries/bbm-python-mates-controller/#supported-devices","text":"This library is developed for Python3 and designed to be used with any operating system as long as it is supported by the pyserial library and the BBM display module is connected using a BBM Programmer.","title":"Supported Devices"},{"location":"Mates%20Controller%20Libraries/bbm-python-mates-controller/#installation","text":"This library can be installed from the Python Packaging Index (PyPI) by running the command: pip3 install bbm-mates-controller","title":"Installation"},{"location":"Mates%20Controller%20Libraries/bbm-python-mates-controller/#constructors","text":"This section serves to provide brief discussion about the constructors that can be used to initialize the library.","title":"Constructors"},{"location":"Mates%20Controller%20Libraries/bbm-python-mates-controller/#matescontrollerportname-resetfunction-debugstream-debugfilelength","text":"Constructs all the necessary attributes associated with an instance of a Mates Controller Object. Parameters Type Description portName str the name of the port to be opened. Example: /dev/ttyUSB0 for Linux debugStream (optional) io.TextIOWrapper text file object to write debugging code to, supply of none will result in no debugging. Ex. sys.stdout , open('log.txt', 'r+') debugFileLength (optional) int determines the extent of debug history kept with respect to lines in a file, given a circular log. O indicates full history kept with no circular logging. Users must be careful here to manage storage space effectively Note If a debug file is specified, it should be opened using either 'w+' or 'r+' before running the begin() function of this library. Example Simple Specify Debug Output # Creates a new instance named 'mates' which utilizes: # - COM10 as the serial port # - with no reset function and no output stream MatesController mates = MatesController ( \"COM10\" ) # Creates a new instance named 'mates' which utilizes: # - COM7 as the serial port # - output_file as debug file stream # - debugFileLength of zero indicating no circular logging MatesController mates = MatesController ( \"COM7\" , debugStream = output_file , debugFileLength = 0 )","title":"MatesController(portName, resetFunction, debugStream, debugFileLength)"},{"location":"Mates%20Controller%20Libraries/bbm-python-mates-controller/#methods","text":"All methods are carried over from Python Mates Controller library instance.","title":"Methods"},{"location":"Mates%20Controller%20Libraries/c-mates-controller/","tags":["Commander","Architect","C"],"text":"C Mates Controller Library TODO","title":"C"},{"location":"Mates%20Controller%20Libraries/c-mates-controller/#c-mates-controller-library","text":"TODO","title":"C Mates Controller Library"},{"location":"Mates%20Controller%20Libraries/micropython-mates-controller/","tags":["Commander","Architect","MicroPython"],"text":"MicroPython Mates Controller Library TODO","title":"MicroPython"},{"location":"Mates%20Controller%20Libraries/micropython-mates-controller/#micropython-mates-controller-library","text":"TODO","title":"MicroPython Mates Controller Library"},{"location":"Mates%20Controller%20Libraries/python-mates-controller/","tags":["Commander","Architect","Python"],"text":"Python Mates Controller Library Introduction This library is developed to easily control Breadboard Mates modules using any device that can run Python by utilizing the Mates Controller Command Protocol . This applies to projects developed using Commander and Architect environments. Supported Devices This library is developed for Python3 and designed to be used with any operating system as long as it is supported by the pyserial library. Installation This library can be installed from the Python Packaging Index (PyPI) by running the command: pip3 install mates-controller Constructors This section serves to provide brief discussion about the constructors that can be used to initialize the library. MatesController(portName, resetFunction, debugStream, debugFileLength) Constructs all the necessary attributes associated with an instance of a Mates Controller Object. Parameters Type Description portName str the name of the port to be opened. Example: /dev/ttyUSB0 for linux resetFunction function function used to perform a hard reset debugStream (optional) io.TextIOWrapper text file object to write debugging code to, supply of none will result in no debugging. Ex. sys.stdout , open('log.txt', 'r+') debugFileLength (optional) int determines the extent of debug history kept with respect to lines in a file, given a circular log. O indicates full history kept with no circular logging. Users must be careful here to manage storage space effectively Note If a debug file is specified, it should be opened using either 'w+' or 'r+' before running the begin() function of this library. Example Simple Specify Debug Output def resetModule (): # perform reset of 100ms pulse to the RST pin # set reset pulse # wait for 100ms # unset reset pulse pass # Creates a new instance named 'mates' which utilizes: # - COM4 as the serial port # - resetModule as the reset function MatesController mates = MatesController ( \"COM4\" , resetFunction = resetModule ) def resetModule (): # perform reset of 100ms pulse to the RST pin # set reset pulse # wait for 100ms # unset reset pulse pass # Creates a new instance named 'mates' which utilizes: # - COM7 as the serial port # - resetModule as the reset function # - output_file as debug file stream # - debugFileLength of zero indicating no circular logging MatesController mates = MatesController ( \"COM7\" , resetFunction = resetModule , debugStream = output_file , debugFileLength = 0 ) Methods This section serves to provide brief discussion about the methods that can be used with a MatesController instance. begin(baudrate) Begins the serial connection if portname not supplied in constructor. Parameters Type Description baudrate str the baudrate of the serial port (default: 9600) Return None Example Simple Specify Baudrate # Initializes display serial port 9600 baud # and resets the display if a reset function is provided mates . begin () # Initializes display serial port 115200 baud # and resets the display if a reset function is provided mates . begin ( 115200 ) close() Closes opened serial port. Return None Example mates . close () # Closes serial port reset(waitPeriod) Uses hardware driven signal to hard reset companion device. Parameters Type Description waitPeriod int determines how long to wait (milliseconds) before checking for connection, must be within the uint16 datatype range (default: 5000) Return success or failure ( boolean ) Example Simple Specify Timeout # Reset the display and wait for a period of 5 seconds (default) mates . reset () # Reset the display and wait for a period of 4 seconds mates . reset ( 4000 ) softReset(waitPeriod) Sends a serial command to the connected device to trigger a reset. Parameters Type Description waitPeriod int determines how long to wait (milliseconds) before checking for connection, must be within the uint16 datatype range (default: 5000) Return success or failure ( boolean ) Example Simple Specify Timeout # Reset the display and wait for a period of 5 seconds (default) mates . softReset () # Reset the display and wait for a period of 4 seconds mates . softReset ( 4000 ) setBacklight(backlightValue) Sets the intensity of the backlight of connected device. Parameters Type Description backlightValue int intensity of backlight, must be between 0 and 15 Return success or failure ( boolean ) Example mates . setBacklight ( 15 ) # Set backlight value of 15 (max) setPage(pageIndex) Sets the page to be displayed on the connected device. Parameters Type Description pageIndex int index of page to set as current, must be within the uint16 datatype range Return success or failure ( boolean ) Example mates . setPage ( 1 ) # Navigate to Page1 getPage() Returns the index of the current page displayed by the connected device. Return Active page index ( int ) Example activePage = mates . getPage () # Query active page setWidgetValueById(widgetId, value) Sets the value of a specific widget based on the provided widgetId. Parameters Type Description widgetId int the unique id of the target widget, must be within the int16 datatype range value int the value the target widget will be set to, must be within the int16 datatype range Return success or failure ( boolean ) Example mates . setWidgetValueById ( MediaGaugeB0 , 50 ) # Set value of MediaGaugeB0 to 50 getWidgetValueById(widgetId) Gets the value of a specific widget based on the provided identifier. Parameters Type Description widgetId int the unique id of the target widget, must be within the int16 datatype range Return Value of the widget specified by widgetId ( int ) Example # Query the current value of MediaLed4 widgetVal = mates . getWidgetValue ( MediaLed4 ) setWidgetValueByIndex(widgetType, widgetIndex, value) Sets the value of a specific widget based on the index within a widget type. Parameters Type Description widgetType MatesWidget the type of the target widget widgetIndex int the index of the target widget, must be within the uint8 datatype range value int the value the target widget will be set to, must be within the int16 datatype range Return success or failure ( boolean ) Note All applicable widget types are listed in here . Example # Set value of MediaGaugeB0 to 50 mates . setWidgetValue ( MATES_MEDIA_GAUGE_B , 0 , 50 ) getWidgetValueByIndex(widgetType, widgetIndex) Gets the value of a specific widget based on the index within a widget type. Parameters Type Description widgetType MatesWidget the type of the target widget widgetIndex int the index of the target widget, must be within the uint8 datatype range Return Value of the widget specified by widgetType and widgetIndex ( int ) Note This function is not applicable to Int32 and Float LedDigits Example # Query the current value of MediaLed4 widgetVal = mates . getWidgetValue ( MATES_MEDIA_LED , 4 ) setLedDigitsShortValue(widgetIndex, value) Sets the 16-bit integer value of the Led Digits widget specified by widgetIndex. Parameters Type Description widgetIndex int the index of the LedDigits, must be within the uint8 datatype range value int the value the target LedDigits will be set to, must be within the int16 datatype range Return success or failure ( boolean ) Note This function is only applicable for Int16 LedDigits Example mates . setLedDigitsShortValue ( 2 , 50 ) # Set value of LedDigits2 to 50 setLedDigitsLongValue(widgetIndex, value) Sets the 32-bit integer value of the Led Digits widget specified by widgetIndex. Parameters Type Description widgetIndex int the index of the LedDigits, must be within the uint8 datatype range value int the value the target LedDigits will be set to, must be within the int32 datatype range Return success or failure ( boolean ) Note This function is only applicable for Int32 LedDigits Example mates . setLedDigitsLongValue ( 2 , 50 ) # Set value of LedDigits2 to 50 setLedDigitsFloatValue(widgetIndex, value): Sets the 32-bit float value of the Led Digits widget specified by widgetIndex. Parameters Type Description widgetIndex int the index of the LedDigits, must be within the uint8 datatype range value int the value the target LedDigits will be set to, must be within the 32-bit float datatype range Return success or failure ( boolean ) Note This function is only applicable for Float LedDigits Example mates . setLedDigitsFloatValue ( 2 , 9.989 ) # Set value of LedDigits2 to 9.989 setSpectrumValue(spectrumId, gaugeIndex, value) Sets the value of the column (specified by gaugeIndex) of the spectrum widget (specified by spectrumId). Parameters Type Description spectrumId int the unique id of the Spectrum widget, must be within the int16 datatype range gaugeIndex int the gauge index/column of the Spectrum widget, must be within the uint8 datatype range value int the value the target spectrum column will be set to, must be within the uint8 datatype range Return success or failure ( boolean ) Example # Set value of gauge index 2 of LedSpectrum5 to 64 mates . setSpectrumValue ( MatesLedSpectrum5 , 2 , 64 ) setLedSpectrumValue(ledSpectrumIndex, gaugeIndex, value) Sets the value of the column (specified by gaugeIndex) of the Led Spectrum widget (specified by ledSpectrumIndex). Parameters Type Description ledSpectrumIndex int the index of the LedSpectrum widget, must be within the uint8 datatype range gaugeIndex int the gauge index/column of the Spectrum widget, must be within the uint8 datatype range value int the value the target spectrum column will be set to, must be within the uint8 datatype range Return success or failure ( boolean ) Example # Set value of gauge index 2 of LedSpectrum5 to 64 mates . setLedSpectrumValue ( 5 , 2 , 64 ) setMediaSpectrumValue(mediaIndex, gaugeIndex, value) Sets the value of the column (specified by gaugeIndex) of the Media Spectrum widget (specified by ledSpectrumIndex). Parameters Type Description mediaIndex int the index of the MediaSpectrum widget, must be within the uint8 datatype range gaugeIndex int the gauge index/column of the Spectrum widget, must be within the uint8 datatype range value int the value the target spectrum column will be set to, must be within the uint8 datatype range Return success or failure ( boolean ) Example mates . setMediaSpectrumValue ( 4 , 3 , 48 ) # Set value of gauge index 3 of MediaSpectrum4 to 48 setWidgetParamById(widgetId, param, value) Sets the value of a widget parameter based on widget id and parameter id. Parameters Type Description widgetId int the unique id of the target widget, must be within the int16 datatype range param int the unique id of the target parameter, must be within the int16 datatype range value int the value the target parameter will be set to, must be within the int16 datatype range Return success or failure ( boolean ) Example # Set GaugeA3's Background color to BLACK mates . setWidgetParamById ( GaugeA3 , MATES_GAUGE_A_BG_COLOR , BLACK ) getWidgetParamById(widgetId, param) Gets the value of a widget parameter based on widget id and parameter id. Parameters Type Description widgetId int the unique id of the target widget, must be within the int16 datatype range param int the unique id of the target parameter, must be within the int16 datatype range Return The current param value of the widget specified by widgetId ( int ) Example # Query the background color of GaugeA3 paramVal = mates . getWidgetParamById ( GaugeA3 , MATES_GAUGE_A_BG_COLOR ) setWidgetParamByIndex(widgetType, widgetIndex, param, value) Sets the value of a widget parameter based on widget index and parameter id. Parameters Type Description widgetType MatesWidget the type of the target widget widgetIndex int the index of the target widget, must be within the uint8 datatype range param int the unique id of the target parameter, must be within the int16 datatype range value int the value the target parameter will be set to, must be within the int16 datatype range Return success or failure ( boolean ) Example # Set GaugeA3's Background color to BLACK mates . setWidgetParamByIndex ( MATES_GAUGE_A , 3 , MATES_GAUGE_A_BG_COLOR , BLACK ) getWidgetParamByIndex(widgetType, widgetIndex, param) Gets the value of a widget parameter based on widget index and parameter id. Parameters Type Description widgetType MatesWidget the type of the target widget widgetIndex int the index of the target widget, must be within the uint8 datatype range param int the unique id of the target parameter, must be within the int16 datatype range Return The current param value of the widget specified by widgetType and widgetIndex ( int ) Example # Query the background color of GaugeA3 paramVal = mates . getWidgetParamByIndex ( MATES_GAUGE_A , 3 , MATES_GAUGE_A_BG_COLOR ) clearTextArea(textAreaIndex) Clears a targeted Text Area. Parameters Type Description textAreaIndex int the index of the target TextArea, must be within the uint16 datatype range Return success or failure ( boolean ) Example mates . clearTextArea ( 6 ) # Clear TextArea6 updateTextArea(textAreaIndex, textFormat, *formatArgs) Updates the text displayed within Text Area widget. Parameters Type Description textAreaIndex int the index of the target TextArea, must be within the uint16 datatype range textFormat str the string or text format to be written to the TextArea formatArgs zero or more values to be formatted into the provided text format string Return success or failure ( boolean ) Example Simple Use Text Formatting mates . updateTextArea ( 2 , \"Mates\" ) # Update TextArea2 to \"Mates\" value = 76 mates . updateTextArea ( 3 , \"Value is {} \" , value ) # Print value to TextArea3 clearPrintArea(printAreaIndex: int) Clears a targeted Print Area. Parameters Type Description printAreaIndex int the index of the target PrintArea, must be within the uint16 datatype range Return success or failure ( boolean ) Example mates . clearPrintArea ( 5 ) # Clear PrintArea5 setPrintAreaColor565(printAreaIndex, rgb565) Sets the color of a PrintArea Widget based on an rgb565 value. Parameters Type Description printAreaIndex int the index of the target PrintArea, must be within the uint16 datatype range rgb565 int 16-bit color to set widget to, value must be within uint16 datatype range Return success or failure ( boolean ) Example mates . setPrintAreaColor ( 4 , 0xF800 ) # Set print color of PrintArea4 to RED (0xF800) setPrintAreaColorRGB(printAreaIndex, red, green, blue) Sets the color of a targeted Print Area. Parameters Type Description printAreaIndex int the index of the target PrintArea, must be within the uint16 datatype range red int 8-bit red component of the target color, value must be within uint8 datatype range green int 8-bit green component of the target color, value must be within uint8 datatype range blue int 8-bit blue component of the target color, value must be within uint8 datatype range Return success or failure ( boolean ) Example # Set print color of PrintArea7 to GREEN mates . setPrintAreaColor ( 7 , 0 , 255 , 0 ) appendArrayToPrintArea(printAreaIndex, array) Appends an array of 8-bit integers to a targeted Print Area. Parameters Type Description printAreaIndex int the index of the target PrintArea, must be within the uint16 datatype range buffer [int] the list of values to be appended to PrintArea, values must be within the uint8 datatype range Return success or failure ( boolean ) Example arr = [ 0xAB , 0xCD , 0xEF ] mates . appendArrayToPrintArea ( 6 , arr ) # Append \"0xAB, 0xCD, 0xEF\" to PrintArea6 appendStringToPrintArea(printAreaIndex, textFormat, *formatArgs) Appends text to a targeted Print Area. Parameters Type Description printAreaIndex int the index of the target PrintArea, must be within the uint16 datatype range textFormat str the string or text format to be appended to the PrintArea formatArgs zero or more values to be formatted into the provided text format string Return success or failure ( boolean ) Example Simple Use Text Formatting mates . appendStringToPrintArea ( 8 , \"Mates\" ) # Append \"Mates\" to PrintArea8 value = 108 # Append value as text to PrintArea9 mates . appendStringToPrintArea ( 9 , \"Value: {} \" , value ) appendToScopeWidget(scopeIndex, buffer) Appends a list of integers to a Scope widget. Parameters Type Description scopeIndex int the index of the target Scope, must be within the uint8 datatype range buffer [int] the list of values to be appended to Scope, values must be within the int16 datatype range Return success or failure ( boolean ) Example data = { 0xF8 , 0x7F , 0x1F } mates . appendToScopeWidget ( 7 , data , 3 ) # Append data to Scope Widget 7 updateDotMatrixWidget(matrixIndex, textFormat, *formatArgs) Changes the text displayed by the target Dot Matrix widget. Parameters Type Description matrixIndex int the index of the target DotMatrix, must be within the uint8 datatype range textFormat str the string or text format to be appended to the DotMatrix formatArgs zero or more values to be formatted into the provided text format string Return success or failure ( boolean ) Example Simple Use Text Formatting mates . updateDotMatrix ( 8 , \"Mates\" ) # Update DotMatrix0 to \"Mates\" value = 108 mates . updateDotMatrix ( 9 , \"Value: {} \" , value ) # Update DotMatrix0 to show value getButtonEventCount() Gets the number of events recorded from applicable button widgets. Return Number of recorded button events ( int ) Example # Get the number of logged button events buttonEvents = mates . getButtonEventCount () getNextButtonEvent() Gets the next event source logged from applicable buttons. Return Widget ID of the next event button ( int ) Example # If there is any event recorded if mates . getButtonEventCount () > 0 : button = mates . getNextButtonEvent () if ( button == MediaButton1 ): # if the button pressed is MediaButton1 # do something # add more possible cases here... getSwipeEventCount() Gets the number of events recorded from swipe gestures. Return Number of recorded swipe events ( int ) Example # Get the number of logged swipe events swipeEvents = mates . getSwipeEventCount () getNextSwipeEvent() Gets the next swipe event value. Return swipe event ( int ) Example # If there is any event recorded if mates . getSwipeEventCount () > 0 : swipe = mates . getNextSwipeEvent () if (( swipe & MATES_SWIPE_SOUTH ) == MATES_SWIPE_SOUTH ): # if swipe is towards from top to bottom if (( swipe & MATES_SWIPE_EAST ) == MATES_SWIPE_EAST ): # if swipe is towards from left to right if (( swipe & MATES_SWIPE_TLBR ) == MATES_SWIPE_TLBR ): # if swipe is towards from top left to bottom right getVersion() Helper function to obtain the version of the Python Mates Controller library. Return Version Information ( str ) Example # Get the library version number as string matesVersion = mates . getVersion () getCompatibility() Helper function to obtain the version of the Mates Studio compatible with this library version. Return Compatibility Version Information ( str ) Example # Get the compatible Mates Studio version number as string compatVersion = mates . getCompatibility () printVersion() Debugging function to print the version of the Mates Studio compatible along with this specific library version. Return None Example # Prints library version and compatible Mates Studio version to debug serial mates . printVersion () getError() This function can be used to investigate errors that occurred while controlling the display module. Description of the possible errors is discussed in here . Return Current error code ( MatesError ) Example # Checks the last error that occurred error = mates . getError () if error == MATES_ERROR_NONE : # Last command was successful pass","title":"Python"},{"location":"Mates%20Controller%20Libraries/python-mates-controller/#python-mates-controller-library","text":"","title":"Python Mates Controller Library"},{"location":"Mates%20Controller%20Libraries/python-mates-controller/#introduction","text":"This library is developed to easily control Breadboard Mates modules using any device that can run Python by utilizing the Mates Controller Command Protocol . This applies to projects developed using Commander and Architect environments.","title":"Introduction"},{"location":"Mates%20Controller%20Libraries/python-mates-controller/#supported-devices","text":"This library is developed for Python3 and designed to be used with any operating system as long as it is supported by the pyserial library.","title":"Supported Devices"},{"location":"Mates%20Controller%20Libraries/python-mates-controller/#installation","text":"This library can be installed from the Python Packaging Index (PyPI) by running the command: pip3 install mates-controller","title":"Installation"},{"location":"Mates%20Controller%20Libraries/python-mates-controller/#constructors","text":"This section serves to provide brief discussion about the constructors that can be used to initialize the library.","title":"Constructors"},{"location":"Mates%20Controller%20Libraries/python-mates-controller/#matescontrollerportname-resetfunction-debugstream-debugfilelength","text":"Constructs all the necessary attributes associated with an instance of a Mates Controller Object. Parameters Type Description portName str the name of the port to be opened. Example: /dev/ttyUSB0 for linux resetFunction function function used to perform a hard reset debugStream (optional) io.TextIOWrapper text file object to write debugging code to, supply of none will result in no debugging. Ex. sys.stdout , open('log.txt', 'r+') debugFileLength (optional) int determines the extent of debug history kept with respect to lines in a file, given a circular log. O indicates full history kept with no circular logging. Users must be careful here to manage storage space effectively Note If a debug file is specified, it should be opened using either 'w+' or 'r+' before running the begin() function of this library. Example Simple Specify Debug Output def resetModule (): # perform reset of 100ms pulse to the RST pin # set reset pulse # wait for 100ms # unset reset pulse pass # Creates a new instance named 'mates' which utilizes: # - COM4 as the serial port # - resetModule as the reset function MatesController mates = MatesController ( \"COM4\" , resetFunction = resetModule ) def resetModule (): # perform reset of 100ms pulse to the RST pin # set reset pulse # wait for 100ms # unset reset pulse pass # Creates a new instance named 'mates' which utilizes: # - COM7 as the serial port # - resetModule as the reset function # - output_file as debug file stream # - debugFileLength of zero indicating no circular logging MatesController mates = MatesController ( \"COM7\" , resetFunction = resetModule , debugStream = output_file , debugFileLength = 0 )","title":"MatesController(portName, resetFunction, debugStream, debugFileLength)"},{"location":"Mates%20Controller%20Libraries/python-mates-controller/#methods","text":"This section serves to provide brief discussion about the methods that can be used with a MatesController instance.","title":"Methods"},{"location":"Mates%20Controller%20Libraries/python-mates-controller/#beginbaudrate","text":"Begins the serial connection if portname not supplied in constructor. Parameters Type Description baudrate str the baudrate of the serial port (default: 9600) Return None Example Simple Specify Baudrate # Initializes display serial port 9600 baud # and resets the display if a reset function is provided mates . begin () # Initializes display serial port 115200 baud # and resets the display if a reset function is provided mates . begin ( 115200 )","title":"begin(baudrate)"},{"location":"Mates%20Controller%20Libraries/python-mates-controller/#close","text":"Closes opened serial port. Return None Example mates . close () # Closes serial port","title":"close()"},{"location":"Mates%20Controller%20Libraries/python-mates-controller/#resetwaitperiod","text":"Uses hardware driven signal to hard reset companion device. Parameters Type Description waitPeriod int determines how long to wait (milliseconds) before checking for connection, must be within the uint16 datatype range (default: 5000) Return success or failure ( boolean ) Example Simple Specify Timeout # Reset the display and wait for a period of 5 seconds (default) mates . reset () # Reset the display and wait for a period of 4 seconds mates . reset ( 4000 )","title":"reset(waitPeriod)"},{"location":"Mates%20Controller%20Libraries/python-mates-controller/#softresetwaitperiod","text":"Sends a serial command to the connected device to trigger a reset. Parameters Type Description waitPeriod int determines how long to wait (milliseconds) before checking for connection, must be within the uint16 datatype range (default: 5000) Return success or failure ( boolean ) Example Simple Specify Timeout # Reset the display and wait for a period of 5 seconds (default) mates . softReset () # Reset the display and wait for a period of 4 seconds mates . softReset ( 4000 )","title":"softReset(waitPeriod)"},{"location":"Mates%20Controller%20Libraries/python-mates-controller/#setbacklightbacklightvalue","text":"Sets the intensity of the backlight of connected device. Parameters Type Description backlightValue int intensity of backlight, must be between 0 and 15 Return success or failure ( boolean ) Example mates . setBacklight ( 15 ) # Set backlight value of 15 (max)","title":"setBacklight(backlightValue)"},{"location":"Mates%20Controller%20Libraries/python-mates-controller/#setpagepageindex","text":"Sets the page to be displayed on the connected device. Parameters Type Description pageIndex int index of page to set as current, must be within the uint16 datatype range Return success or failure ( boolean ) Example mates . setPage ( 1 ) # Navigate to Page1","title":"setPage(pageIndex)"},{"location":"Mates%20Controller%20Libraries/python-mates-controller/#getpage","text":"Returns the index of the current page displayed by the connected device. Return Active page index ( int ) Example activePage = mates . getPage () # Query active page","title":"getPage()"},{"location":"Mates%20Controller%20Libraries/python-mates-controller/#setwidgetvaluebyidwidgetid-value","text":"Sets the value of a specific widget based on the provided widgetId. Parameters Type Description widgetId int the unique id of the target widget, must be within the int16 datatype range value int the value the target widget will be set to, must be within the int16 datatype range Return success or failure ( boolean ) Example mates . setWidgetValueById ( MediaGaugeB0 , 50 ) # Set value of MediaGaugeB0 to 50","title":"setWidgetValueById(widgetId, value)"},{"location":"Mates%20Controller%20Libraries/python-mates-controller/#getwidgetvaluebyidwidgetid","text":"Gets the value of a specific widget based on the provided identifier. Parameters Type Description widgetId int the unique id of the target widget, must be within the int16 datatype range Return Value of the widget specified by widgetId ( int ) Example # Query the current value of MediaLed4 widgetVal = mates . getWidgetValue ( MediaLed4 )","title":"getWidgetValueById(widgetId)"},{"location":"Mates%20Controller%20Libraries/python-mates-controller/#setwidgetvaluebyindexwidgettype-widgetindex-value","text":"Sets the value of a specific widget based on the index within a widget type. Parameters Type Description widgetType MatesWidget the type of the target widget widgetIndex int the index of the target widget, must be within the uint8 datatype range value int the value the target widget will be set to, must be within the int16 datatype range Return success or failure ( boolean ) Note All applicable widget types are listed in here . Example # Set value of MediaGaugeB0 to 50 mates . setWidgetValue ( MATES_MEDIA_GAUGE_B , 0 , 50 )","title":"setWidgetValueByIndex(widgetType, widgetIndex, value)"},{"location":"Mates%20Controller%20Libraries/python-mates-controller/#getwidgetvaluebyindexwidgettype-widgetindex","text":"Gets the value of a specific widget based on the index within a widget type. Parameters Type Description widgetType MatesWidget the type of the target widget widgetIndex int the index of the target widget, must be within the uint8 datatype range Return Value of the widget specified by widgetType and widgetIndex ( int ) Note This function is not applicable to Int32 and Float LedDigits Example # Query the current value of MediaLed4 widgetVal = mates . getWidgetValue ( MATES_MEDIA_LED , 4 )","title":"getWidgetValueByIndex(widgetType, widgetIndex)"},{"location":"Mates%20Controller%20Libraries/python-mates-controller/#setleddigitsshortvaluewidgetindex-value","text":"Sets the 16-bit integer value of the Led Digits widget specified by widgetIndex. Parameters Type Description widgetIndex int the index of the LedDigits, must be within the uint8 datatype range value int the value the target LedDigits will be set to, must be within the int16 datatype range Return success or failure ( boolean ) Note This function is only applicable for Int16 LedDigits Example mates . setLedDigitsShortValue ( 2 , 50 ) # Set value of LedDigits2 to 50","title":"setLedDigitsShortValue(widgetIndex, value)"},{"location":"Mates%20Controller%20Libraries/python-mates-controller/#setleddigitslongvaluewidgetindex-value","text":"Sets the 32-bit integer value of the Led Digits widget specified by widgetIndex. Parameters Type Description widgetIndex int the index of the LedDigits, must be within the uint8 datatype range value int the value the target LedDigits will be set to, must be within the int32 datatype range Return success or failure ( boolean ) Note This function is only applicable for Int32 LedDigits Example mates . setLedDigitsLongValue ( 2 , 50 ) # Set value of LedDigits2 to 50","title":"setLedDigitsLongValue(widgetIndex, value)"},{"location":"Mates%20Controller%20Libraries/python-mates-controller/#setleddigitsfloatvaluewidgetindex-value","text":"Sets the 32-bit float value of the Led Digits widget specified by widgetIndex. Parameters Type Description widgetIndex int the index of the LedDigits, must be within the uint8 datatype range value int the value the target LedDigits will be set to, must be within the 32-bit float datatype range Return success or failure ( boolean ) Note This function is only applicable for Float LedDigits Example mates . setLedDigitsFloatValue ( 2 , 9.989 ) # Set value of LedDigits2 to 9.989","title":"setLedDigitsFloatValue(widgetIndex, value):"},{"location":"Mates%20Controller%20Libraries/python-mates-controller/#setspectrumvaluespectrumid-gaugeindex-value","text":"Sets the value of the column (specified by gaugeIndex) of the spectrum widget (specified by spectrumId). Parameters Type Description spectrumId int the unique id of the Spectrum widget, must be within the int16 datatype range gaugeIndex int the gauge index/column of the Spectrum widget, must be within the uint8 datatype range value int the value the target spectrum column will be set to, must be within the uint8 datatype range Return success or failure ( boolean ) Example # Set value of gauge index 2 of LedSpectrum5 to 64 mates . setSpectrumValue ( MatesLedSpectrum5 , 2 , 64 )","title":"setSpectrumValue(spectrumId, gaugeIndex, value)"},{"location":"Mates%20Controller%20Libraries/python-mates-controller/#setledspectrumvalueledspectrumindex-gaugeindex-value","text":"Sets the value of the column (specified by gaugeIndex) of the Led Spectrum widget (specified by ledSpectrumIndex). Parameters Type Description ledSpectrumIndex int the index of the LedSpectrum widget, must be within the uint8 datatype range gaugeIndex int the gauge index/column of the Spectrum widget, must be within the uint8 datatype range value int the value the target spectrum column will be set to, must be within the uint8 datatype range Return success or failure ( boolean ) Example # Set value of gauge index 2 of LedSpectrum5 to 64 mates . setLedSpectrumValue ( 5 , 2 , 64 )","title":"setLedSpectrumValue(ledSpectrumIndex, gaugeIndex, value)"},{"location":"Mates%20Controller%20Libraries/python-mates-controller/#setmediaspectrumvaluemediaindex-gaugeindex-value","text":"Sets the value of the column (specified by gaugeIndex) of the Media Spectrum widget (specified by ledSpectrumIndex). Parameters Type Description mediaIndex int the index of the MediaSpectrum widget, must be within the uint8 datatype range gaugeIndex int the gauge index/column of the Spectrum widget, must be within the uint8 datatype range value int the value the target spectrum column will be set to, must be within the uint8 datatype range Return success or failure ( boolean ) Example mates . setMediaSpectrumValue ( 4 , 3 , 48 ) # Set value of gauge index 3 of MediaSpectrum4 to 48","title":"setMediaSpectrumValue(mediaIndex, gaugeIndex, value)"},{"location":"Mates%20Controller%20Libraries/python-mates-controller/#setwidgetparambyidwidgetid-param-value","text":"Sets the value of a widget parameter based on widget id and parameter id. Parameters Type Description widgetId int the unique id of the target widget, must be within the int16 datatype range param int the unique id of the target parameter, must be within the int16 datatype range value int the value the target parameter will be set to, must be within the int16 datatype range Return success or failure ( boolean ) Example # Set GaugeA3's Background color to BLACK mates . setWidgetParamById ( GaugeA3 , MATES_GAUGE_A_BG_COLOR , BLACK )","title":"setWidgetParamById(widgetId, param, value)"},{"location":"Mates%20Controller%20Libraries/python-mates-controller/#getwidgetparambyidwidgetid-param","text":"Gets the value of a widget parameter based on widget id and parameter id. Parameters Type Description widgetId int the unique id of the target widget, must be within the int16 datatype range param int the unique id of the target parameter, must be within the int16 datatype range Return The current param value of the widget specified by widgetId ( int ) Example # Query the background color of GaugeA3 paramVal = mates . getWidgetParamById ( GaugeA3 , MATES_GAUGE_A_BG_COLOR )","title":"getWidgetParamById(widgetId, param)"},{"location":"Mates%20Controller%20Libraries/python-mates-controller/#setwidgetparambyindexwidgettype-widgetindex-param-value","text":"Sets the value of a widget parameter based on widget index and parameter id. Parameters Type Description widgetType MatesWidget the type of the target widget widgetIndex int the index of the target widget, must be within the uint8 datatype range param int the unique id of the target parameter, must be within the int16 datatype range value int the value the target parameter will be set to, must be within the int16 datatype range Return success or failure ( boolean ) Example # Set GaugeA3's Background color to BLACK mates . setWidgetParamByIndex ( MATES_GAUGE_A , 3 , MATES_GAUGE_A_BG_COLOR , BLACK )","title":"setWidgetParamByIndex(widgetType, widgetIndex, param, value)"},{"location":"Mates%20Controller%20Libraries/python-mates-controller/#getwidgetparambyindexwidgettype-widgetindex-param","text":"Gets the value of a widget parameter based on widget index and parameter id. Parameters Type Description widgetType MatesWidget the type of the target widget widgetIndex int the index of the target widget, must be within the uint8 datatype range param int the unique id of the target parameter, must be within the int16 datatype range Return The current param value of the widget specified by widgetType and widgetIndex ( int ) Example # Query the background color of GaugeA3 paramVal = mates . getWidgetParamByIndex ( MATES_GAUGE_A , 3 , MATES_GAUGE_A_BG_COLOR )","title":"getWidgetParamByIndex(widgetType, widgetIndex, param)"},{"location":"Mates%20Controller%20Libraries/python-mates-controller/#cleartextareatextareaindex","text":"Clears a targeted Text Area. Parameters Type Description textAreaIndex int the index of the target TextArea, must be within the uint16 datatype range Return success or failure ( boolean ) Example mates . clearTextArea ( 6 ) # Clear TextArea6","title":"clearTextArea(textAreaIndex)"},{"location":"Mates%20Controller%20Libraries/python-mates-controller/#updatetextareatextareaindex-textformat-formatargs","text":"Updates the text displayed within Text Area widget. Parameters Type Description textAreaIndex int the index of the target TextArea, must be within the uint16 datatype range textFormat str the string or text format to be written to the TextArea formatArgs zero or more values to be formatted into the provided text format string Return success or failure ( boolean ) Example Simple Use Text Formatting mates . updateTextArea ( 2 , \"Mates\" ) # Update TextArea2 to \"Mates\" value = 76 mates . updateTextArea ( 3 , \"Value is {} \" , value ) # Print value to TextArea3","title":"updateTextArea(textAreaIndex, textFormat, *formatArgs)"},{"location":"Mates%20Controller%20Libraries/python-mates-controller/#clearprintareaprintareaindex-int","text":"Clears a targeted Print Area. Parameters Type Description printAreaIndex int the index of the target PrintArea, must be within the uint16 datatype range Return success or failure ( boolean ) Example mates . clearPrintArea ( 5 ) # Clear PrintArea5","title":"clearPrintArea(printAreaIndex: int)"},{"location":"Mates%20Controller%20Libraries/python-mates-controller/#setprintareacolor565printareaindex-rgb565","text":"Sets the color of a PrintArea Widget based on an rgb565 value. Parameters Type Description printAreaIndex int the index of the target PrintArea, must be within the uint16 datatype range rgb565 int 16-bit color to set widget to, value must be within uint16 datatype range Return success or failure ( boolean ) Example mates . setPrintAreaColor ( 4 , 0xF800 ) # Set print color of PrintArea4 to RED (0xF800)","title":"setPrintAreaColor565(printAreaIndex, rgb565)"},{"location":"Mates%20Controller%20Libraries/python-mates-controller/#setprintareacolorrgbprintareaindex-red-green-blue","text":"Sets the color of a targeted Print Area. Parameters Type Description printAreaIndex int the index of the target PrintArea, must be within the uint16 datatype range red int 8-bit red component of the target color, value must be within uint8 datatype range green int 8-bit green component of the target color, value must be within uint8 datatype range blue int 8-bit blue component of the target color, value must be within uint8 datatype range Return success or failure ( boolean ) Example # Set print color of PrintArea7 to GREEN mates . setPrintAreaColor ( 7 , 0 , 255 , 0 )","title":"setPrintAreaColorRGB(printAreaIndex, red, green, blue)"},{"location":"Mates%20Controller%20Libraries/python-mates-controller/#appendarraytoprintareaprintareaindex-array","text":"Appends an array of 8-bit integers to a targeted Print Area. Parameters Type Description printAreaIndex int the index of the target PrintArea, must be within the uint16 datatype range buffer [int] the list of values to be appended to PrintArea, values must be within the uint8 datatype range Return success or failure ( boolean ) Example arr = [ 0xAB , 0xCD , 0xEF ] mates . appendArrayToPrintArea ( 6 , arr ) # Append \"0xAB, 0xCD, 0xEF\" to PrintArea6","title":"appendArrayToPrintArea(printAreaIndex, array)"},{"location":"Mates%20Controller%20Libraries/python-mates-controller/#appendstringtoprintareaprintareaindex-textformat-formatargs","text":"Appends text to a targeted Print Area. Parameters Type Description printAreaIndex int the index of the target PrintArea, must be within the uint16 datatype range textFormat str the string or text format to be appended to the PrintArea formatArgs zero or more values to be formatted into the provided text format string Return success or failure ( boolean ) Example Simple Use Text Formatting mates . appendStringToPrintArea ( 8 , \"Mates\" ) # Append \"Mates\" to PrintArea8 value = 108 # Append value as text to PrintArea9 mates . appendStringToPrintArea ( 9 , \"Value: {} \" , value )","title":"appendStringToPrintArea(printAreaIndex, textFormat, *formatArgs)"},{"location":"Mates%20Controller%20Libraries/python-mates-controller/#appendtoscopewidgetscopeindex-buffer","text":"Appends a list of integers to a Scope widget. Parameters Type Description scopeIndex int the index of the target Scope, must be within the uint8 datatype range buffer [int] the list of values to be appended to Scope, values must be within the int16 datatype range Return success or failure ( boolean ) Example data = { 0xF8 , 0x7F , 0x1F } mates . appendToScopeWidget ( 7 , data , 3 ) # Append data to Scope Widget 7","title":"appendToScopeWidget(scopeIndex, buffer)"},{"location":"Mates%20Controller%20Libraries/python-mates-controller/#updatedotmatrixwidgetmatrixindex-textformat-formatargs","text":"Changes the text displayed by the target Dot Matrix widget. Parameters Type Description matrixIndex int the index of the target DotMatrix, must be within the uint8 datatype range textFormat str the string or text format to be appended to the DotMatrix formatArgs zero or more values to be formatted into the provided text format string Return success or failure ( boolean ) Example Simple Use Text Formatting mates . updateDotMatrix ( 8 , \"Mates\" ) # Update DotMatrix0 to \"Mates\" value = 108 mates . updateDotMatrix ( 9 , \"Value: {} \" , value ) # Update DotMatrix0 to show value","title":"updateDotMatrixWidget(matrixIndex, textFormat, *formatArgs)"},{"location":"Mates%20Controller%20Libraries/python-mates-controller/#getbuttoneventcount","text":"Gets the number of events recorded from applicable button widgets. Return Number of recorded button events ( int ) Example # Get the number of logged button events buttonEvents = mates . getButtonEventCount ()","title":"getButtonEventCount()"},{"location":"Mates%20Controller%20Libraries/python-mates-controller/#getnextbuttonevent","text":"Gets the next event source logged from applicable buttons. Return Widget ID of the next event button ( int ) Example # If there is any event recorded if mates . getButtonEventCount () > 0 : button = mates . getNextButtonEvent () if ( button == MediaButton1 ): # if the button pressed is MediaButton1 # do something # add more possible cases here...","title":"getNextButtonEvent()"},{"location":"Mates%20Controller%20Libraries/python-mates-controller/#getswipeeventcount","text":"Gets the number of events recorded from swipe gestures. Return Number of recorded swipe events ( int ) Example # Get the number of logged swipe events swipeEvents = mates . getSwipeEventCount ()","title":"getSwipeEventCount()"},{"location":"Mates%20Controller%20Libraries/python-mates-controller/#getnextswipeevent","text":"Gets the next swipe event value. Return swipe event ( int ) Example # If there is any event recorded if mates . getSwipeEventCount () > 0 : swipe = mates . getNextSwipeEvent () if (( swipe & MATES_SWIPE_SOUTH ) == MATES_SWIPE_SOUTH ): # if swipe is towards from top to bottom if (( swipe & MATES_SWIPE_EAST ) == MATES_SWIPE_EAST ): # if swipe is towards from left to right if (( swipe & MATES_SWIPE_TLBR ) == MATES_SWIPE_TLBR ): # if swipe is towards from top left to bottom right","title":"getNextSwipeEvent()"},{"location":"Mates%20Controller%20Libraries/python-mates-controller/#getversion","text":"Helper function to obtain the version of the Python Mates Controller library. Return Version Information ( str ) Example # Get the library version number as string matesVersion = mates . getVersion ()","title":"getVersion()"},{"location":"Mates%20Controller%20Libraries/python-mates-controller/#getcompatibility","text":"Helper function to obtain the version of the Mates Studio compatible with this library version. Return Compatibility Version Information ( str ) Example # Get the compatible Mates Studio version number as string compatVersion = mates . getCompatibility ()","title":"getCompatibility()"},{"location":"Mates%20Controller%20Libraries/python-mates-controller/#printversion","text":"Debugging function to print the version of the Mates Studio compatible along with this specific library version. Return None Example # Prints library version and compatible Mates Studio version to debug serial mates . printVersion ()","title":"printVersion()"},{"location":"Mates%20Controller%20Libraries/python-mates-controller/#geterror","text":"This function can be used to investigate errors that occurred while controlling the display module. Description of the possible errors is discussed in here . Return Current error code ( MatesError ) Example # Checks the last error that occurred error = mates . getError () if error == MATES_ERROR_NONE : # Last command was successful pass","title":"getError()"},{"location":"Mates%20Controller%20Libraries/rpi-python-mates-controller/","tags":["Commander","Architect","Python","Raspberry Pi"],"text":"Raspberry Pi Python Mates Controller Library Introduction This library is developed to easily control Breadboard Mates modules from a Raspberry Pi Computer. This is based on the Python Mates Controller library . Therefore, all methods are directly derived from it. Supported Devices This library is developed for Python3 and designed to be used with any Raspberry Pi with the BBM display module connected to the GPIO pins. It is possible to connect BBM display modules to Raspberry Pi via USB connection using a BBM Programmer or similar. However, for this case, it is recommended to use the BBM Python Mates Controller Library instead. Installation This library can be installed from the Python Packaging Index (PyPI) by running the command: pip3 install rpi-mates-controller Constructors This section serves to provide brief discussion about the constructors that can be used to initialize the library. MatesController(portName, resetFunction, debugStream, debugFileLength) Constructs all the necessary attributes associated with an instance of a Mates Controller Object. Parameters Type Description portName str the name of the port to be opened. Example: /dev/ttyUSB0 for Linux resetPinIndex (optional) int, str index of pin connected to reset pin of Mates device resetActiveHigh (optional) bool whether the reset pin is driven from logic low or logic high to reset the device debugStream (optional) io.TextIOWrapper Text file object to write debugging code to, supply of none will result in no debugging. Ex. sys.stdout , open('log.txt', 'r+') debugFileLength (optional) int Determines the extent of debug history kept with respect to lines in a file, given a circular log. O indicates full history kept with no circular logging. Users must be careful here to manage storage space effectively Note If a debug file is specified, it should be opened using either 'w+' or 'r+' before running the begin() function of this library. Example Simple Specify Reset Pin and Mode Specify Debug Output # Creates a new instance named 'mates' which utilizes: # - /dev/ttyS0 as the serial port # - with default reset pin (4) and no output stream MatesController mates = MatesController ( \"/dev/ttyS0\" ) # Creates a new instance named 'mates' which utilizes: # - /dev/ttyS0 as the serial port # - pin 4 as the reset pin # - LOW pulse as active pulse MatesController mates = MatesController ( \"/dev/ttyS0\" , resetPinIndex = 4 , resetActiveHigh = False ) # Creates a new instance named 'mates' which utilizes: # - /dev/ttyS0 as the serial port # - output_file as debug file stream # - debugFileLength of zero indicating no circular logging MatesController mates = MatesController ( \"/dev/ttyS0\" , debugStream = output_file , debugFileLength = 0 ) Methods All methods are carried over from Python Mates Controller library instance.","title":"RPi Python"},{"location":"Mates%20Controller%20Libraries/rpi-python-mates-controller/#raspberry-pi-python-mates-controller-library","text":"","title":"Raspberry Pi Python Mates Controller Library"},{"location":"Mates%20Controller%20Libraries/rpi-python-mates-controller/#introduction","text":"This library is developed to easily control Breadboard Mates modules from a Raspberry Pi Computer. This is based on the Python Mates Controller library . Therefore, all methods are directly derived from it.","title":"Introduction"},{"location":"Mates%20Controller%20Libraries/rpi-python-mates-controller/#supported-devices","text":"This library is developed for Python3 and designed to be used with any Raspberry Pi with the BBM display module connected to the GPIO pins. It is possible to connect BBM display modules to Raspberry Pi via USB connection using a BBM Programmer or similar. However, for this case, it is recommended to use the BBM Python Mates Controller Library instead.","title":"Supported Devices"},{"location":"Mates%20Controller%20Libraries/rpi-python-mates-controller/#installation","text":"This library can be installed from the Python Packaging Index (PyPI) by running the command: pip3 install rpi-mates-controller","title":"Installation"},{"location":"Mates%20Controller%20Libraries/rpi-python-mates-controller/#constructors","text":"This section serves to provide brief discussion about the constructors that can be used to initialize the library.","title":"Constructors"},{"location":"Mates%20Controller%20Libraries/rpi-python-mates-controller/#matescontrollerportname-resetfunction-debugstream-debugfilelength","text":"Constructs all the necessary attributes associated with an instance of a Mates Controller Object. Parameters Type Description portName str the name of the port to be opened. Example: /dev/ttyUSB0 for Linux resetPinIndex (optional) int, str index of pin connected to reset pin of Mates device resetActiveHigh (optional) bool whether the reset pin is driven from logic low or logic high to reset the device debugStream (optional) io.TextIOWrapper Text file object to write debugging code to, supply of none will result in no debugging. Ex. sys.stdout , open('log.txt', 'r+') debugFileLength (optional) int Determines the extent of debug history kept with respect to lines in a file, given a circular log. O indicates full history kept with no circular logging. Users must be careful here to manage storage space effectively Note If a debug file is specified, it should be opened using either 'w+' or 'r+' before running the begin() function of this library. Example Simple Specify Reset Pin and Mode Specify Debug Output # Creates a new instance named 'mates' which utilizes: # - /dev/ttyS0 as the serial port # - with default reset pin (4) and no output stream MatesController mates = MatesController ( \"/dev/ttyS0\" ) # Creates a new instance named 'mates' which utilizes: # - /dev/ttyS0 as the serial port # - pin 4 as the reset pin # - LOW pulse as active pulse MatesController mates = MatesController ( \"/dev/ttyS0\" , resetPinIndex = 4 , resetActiveHigh = False ) # Creates a new instance named 'mates' which utilizes: # - /dev/ttyS0 as the serial port # - output_file as debug file stream # - debugFileLength of zero indicating no circular logging MatesController mates = MatesController ( \"/dev/ttyS0\" , debugStream = output_file , debugFileLength = 0 )","title":"MatesController(portName, resetFunction, debugStream, debugFileLength)"},{"location":"Mates%20Controller%20Libraries/rpi-python-mates-controller/#methods","text":"All methods are carried over from Python Mates Controller library instance.","title":"Methods"},{"location":"Mates%20Studio/","tags":["Commander","Architect","Genius","Builder"],"text":"Mates Studio User Manual Introduction Mates Studio is an Integrated Development Environment designed to be used with Breadboard Mates products. This software application is developed for Windows PCs. The application includes multiple environments that users can utilize to design and develop simple and complex GUI applications for their prototyping needs. System Requirements Mates Studio is currently available for 64-bit Windows PCs. Here are the requirements for installing the application: Windows 7 and later are supported, older operating systems are not supported (and do not work). Please note that the ARM version of Windows is not supported. An Intel Pentium 4 processor or later that\u2019s SSE3 capable. At least 300 MB of storage space Minimum 1GB of RAM ( depends on usage ) Installation Mates Studio can be installed for all users (system-wide) or only for the current user. By choosing to install for all users, the installation will prompt for administrator privileges. Once approved, the application will be installed in Program Files directory. The full path is typically: C:\\Program Files\\Mates Studio If the application is installed only for the current user, the application will be in the current user\u2019s AppData Local Programs directory. In that case, the full path is: C:\\Users\\%USERNAME%\\AppData\\Local\\Programs\\Mates Studio The installer will provide a visual progress bar until the installation completes. After successfully installing Mates Studio, the installer will prompt to optionally launch the application. Tick Run Mates Studio to launch Mates Studio after installation if desired. Creating a New Project Selecting Product and Orientation When the application opens, it will show the splash screen followed by the setup window. Products can be filtered by choosing the category tabs on the left-hand side. The center column provides a filtered selection of products. By selecting a product from the list shown in the center column of the window, a preview of the product will be shown on the right-hand side. By clicking on the preview, the project orientation can be set. After selecting the product and desired orientation, continue by clicking on the CONFIRM button. Selecting Environment After confirming the product, the target environment needs to be selected to start a new project. Opening Projects Browsing Recent Projects While in the setup window, recent projects can be browsed by clicking on the Browse Recent Projects button. Recent projects can be filtered by choosing the category tabs on the left-hand side. By selecting a project from the list shown in the middle column of the window, a preview of the project will be shown on the right-hand side. By clicking on the preview, the other project pages can be browsed. After confirming the project, it can be opened by clicking on the CONFIRM button. Browsing the Computer While in the setup window, the computer can be browsed for projects by clicking on the Browse Computer button. Mates Studio will open a file selection window which can be utilized to find and open a project anywhere in the computer. Environments Commander Commander is the simplest among all Mates Studio environments. It allows users to select and utilize different page designs/layouts from a built-in collection provided by the Breadboard Mates team and its community. This allows development of GUI applications in seconds. This environment is designed to program Breadboard Mates modules to be used with a host controller using the Mates Controller Command Protocol . This allows users to control the display using their favorite microcontrollers through Serial UART. This environment also includes a Mates Controller Interface that simulates a microcontroller controlling the display module programmed with a Commander project. Architect Similar to Commander, the Architect environment was designed to program modules to be used with a host controller and features Mates Controller Command Protocol . It also provides the Mates Controller Interface to simulate a host controller. The main advantage of Architect over Commander is the increased flexibility with designing their projects by featuring a Graphics Editor which allows custom widget and page designs. Genius The Genius environment is designed to allow user to write their own custom programs for Breadboard Mates module. This allows Breadboard Mates modules to work as standalone devices. It features a Graphics Editor allowing custom widget and page designs and a Code Editor to write the program in 4D Graphics Language (4DGL) . This provides direct control of the widgets and the unused device peripherals allowing custom functionalities that users need which Commander and Architect are not able to provide. Builder Similar to Genius, the Builder environment is designed to allow user to develop custom programs for their Breadboard Mates modules. It also features a Graphics Editor allowing custom widget and page designs. But instead of a code editor, it features a Blocks Editor . This also provides direct control of the widgets and the unused device peripherals allowing custom functionalities that users need which Commander and Architect are not able to provide. This environment is designed mainly for inexperienced 4DGL developers but can also be used by seasoned developers. This environment can be used to develop varying complexity of projects. However, as the project becomes increasingly complicated, writing the code in Genius can prove to be more manageable for experience developers. Application Menus Excluding Commander, all Mates Studio environments use a traditional dropdown menu bar. These three environments have almost identical menus. This section discusses the menu bar including which environment certain items apply. File Menu The File Menu group includes items that can be used for file management. It includes the following: Item Description New Opens the Setup Window to create new project Open\u2026 Opens a window prompting to select a project file to open Open Recent Provides a list of recently opened projects Project Book Provides a list of projects found in the default save location Examples Provides a list of examples included with Mates Studio Close Closes the current project Save Saves the project Save As\u2026 Saves the project to a different location and/or filename Exit Exits Mates Studio Graphics Menu The Graphics Menu group includes items that can be used for managing the UI design. This includes page and widget management tools and options as shown: Item Description Capture Snapshot Saves a snapshot of the selected page as an image file Add Page Opens a Select Page Template window Copy Page Copies the selected page for pasting Paste Page Pastes the recently copied page to the current project Delete Page Deletes the selected page Save Page Saves the active page as a configuration file Add Widget Opens a Select Widget window Cut Widget Copies the selected widget for moving to another page Copy Widget Copies the selected widget for pasting Paste Widget Pastes the recently copied widget Delete Widget Deletes the selected widget Save Widget Saves the selected widget as a configuration file Project Menu The Project Menu group includes items that can be used for managing the project itself. This includes project compilation, upload and project settings as shown: Item Description Compile Compiles the project to check for errors Upload Compiles and upload the project if there are no errors Export Compiled Files Compiles and exports project files if there are no errors Module Provides option to change target module Orientation Provides option to change module orientation Page Transition Provides option to select transitioning effect Baud Rate Provides option to set baud rate for communicating Show Project Folder Opens the location of the project Note Baud Rate is only available in Architect Environment Edit Menu The Edit Menu group includes items that can be used with the code/text editor of the Genius environment. This includes basic editing functionalities such as copying and pasting, undo and redo, etc. Item Description Undo Cancel previous text editor action Redo Redo previously cancelled text editor action Cut Copies the highlighted text for moving to another location Copy Copies the highlighted text for pasting Paste Adds previously copied text to the current cursor position Select All Select all text available in the text editor Find Opens the search tool of the text editor Find Next Moves to the next occurrence of the text Find Previous Moves to the previous occurrence of the text Note Edit Menu is only available in Genius Environment Tools Menu The Tools Menu group includes helpful items that can be utilized during development. Item Description Port Provides the option to scan and select COM port to use Open Serial Tool Opens Terminal tool for Genius and Builder or Mates Controller for Architect Get Module Info Checks the module connected in the selected port Load PmmC Opens the Load PmmC window for updating firmware Activate License Provides the option to activate full version of the environment Help Menu The Help Menu group includes external references and support links. Item Description Breadboard Mates Website Opens Breadboard Mates Website using the default web browser Breadboard Mates Forum Opens Breadboard Mates Forum using the default web browser Manuals Opens Breadboard Mates Resource Centre Manuals using the default web browser Datasheets Opens Breadboard Mates Resource Centre Datasheets using the default web browser Tutorials Opens Breadboard Mates Resource Centre Tutorials using the default web browser Projects Opens Breadboard Mates Resource Centre Projects using the default web browser About Mates Studio Shows the version information of Mates Studio Release Notes Mates Studio Release Notes 1.0.14 : 5 May 2022 - Fixed issue when opening projects by double clicking the file 1.0.13 : 14 April 2022 - Changed TIMI-Click to TIMI-MB 1.0.12 : 5 April 2022 - Fixed copy and paste issue in non-touch modules 1.0.10 : 23 February 2022 - Fixed issue with DotMatrix and TextArea not updating 1.0.9 : 21 February 2022 - Added 240x240 page designs - Added auto update feature - Increased UART receive buffer size for Commander and Architect projects 1.0.8 : 15 January 2022 - Added 240x240 page designs - Fixed display issues when image and page background image when there is no other inherent and GCI widget included 1.0.7 : 05 January 2022 - Added 240x240 page designs - Added swipe event logging system - Added new functions/commands: - *getSwipeEventCount*: counts the number of swipe events that hasn't been read - *getNextSwipeEvent*: reads the next swipe event, returns -1 if no event to read 1.0.6 : 14 December 2021 - Added support for REPTOR devices - Added automatic touch handling for input widgets - Added different modes for button widgets (toggle, momentary and navigation) - Added button event log system for momentary buttons - Added new functions/commands: - *getButtonEventCount*: counts the number of button events that hasn't been read - *getNextButtonEvent*: reads the next button event, returns -1 if no event to read - Implemented Query (getButtonEventCount, getNextButtonEvent) command in Control window/tab of Architect and Commander environments 1.0.5 : 03 December 2021 - Prevented input widgets from being used in non-touch modules - Changed MediaGaugeA to have the thumb option from MediaSlider - Fixed Commander documentation scroll issue - Fixed Page designs that uses sliders and knobs as gauges and buttons as LEDs - Fixed RotaryGauge behaving as an input widget - Fixed DLL missing from other Windows PCs 1.0.4 : 17 November 2021 - Fixed Inherent resource updates for gauges 1.0.3 : 14 November 2021 - Fixed MediaGaugeB compile and display error 1.0.1 : 08 November 2021 - Fixed Dot Matrix gradient issue caused by incorrect use of the widget's position - Fixed Media Gauge D incorrect range computation 1.0.0 : 13 October 2021 (Initial Public Release) Supported Products - TIMI-96 - TIMI-Click - TIMI-130 - TED-96 Available Widgets - Label - Scale - Panel - Media Panel - Symbol - Image - Led - Media Led - Media Color Led - Fancy Led A - Led Digits - Led Spectrum - Media Spectrum - Dot Matrix - Gauge A - Gauge B - Gauge C - Gauge D - Gauge E - Gauge F - Angular Meter - Ruler Gauge - Media Gauge A - Media Gauge B - Media Gauge C - Media Gauge D - Media Thermometer - Rotary Gauge - Slide Show - Animation - Symbols - Led Digits - Scope - Button A - Button B - Switch A - Switch B - Media Button - Fancy Button A - Slider A - Slider B - Slider C - Slider D - Slider E - Slider F - Media Slider - Knob - Media Rotary - Text Area - Print Area","title":"Mates Studio User Manual"},{"location":"Mates%20Studio/#mates-studio-user-manual","text":"","title":"Mates Studio User Manual"},{"location":"Mates%20Studio/#introduction","text":"Mates Studio is an Integrated Development Environment designed to be used with Breadboard Mates products. This software application is developed for Windows PCs. The application includes multiple environments that users can utilize to design and develop simple and complex GUI applications for their prototyping needs.","title":"Introduction"},{"location":"Mates%20Studio/#system-requirements","text":"Mates Studio is currently available for 64-bit Windows PCs. Here are the requirements for installing the application: Windows 7 and later are supported, older operating systems are not supported (and do not work). Please note that the ARM version of Windows is not supported. An Intel Pentium 4 processor or later that\u2019s SSE3 capable. At least 300 MB of storage space Minimum 1GB of RAM ( depends on usage )","title":"System Requirements"},{"location":"Mates%20Studio/#installation","text":"Mates Studio can be installed for all users (system-wide) or only for the current user. By choosing to install for all users, the installation will prompt for administrator privileges. Once approved, the application will be installed in Program Files directory. The full path is typically: C:\\Program Files\\Mates Studio If the application is installed only for the current user, the application will be in the current user\u2019s AppData Local Programs directory. In that case, the full path is: C:\\Users\\%USERNAME%\\AppData\\Local\\Programs\\Mates Studio The installer will provide a visual progress bar until the installation completes. After successfully installing Mates Studio, the installer will prompt to optionally launch the application. Tick Run Mates Studio to launch Mates Studio after installation if desired.","title":"Installation"},{"location":"Mates%20Studio/#creating-a-new-project","text":"Selecting Product and Orientation When the application opens, it will show the splash screen followed by the setup window. Products can be filtered by choosing the category tabs on the left-hand side. The center column provides a filtered selection of products. By selecting a product from the list shown in the center column of the window, a preview of the product will be shown on the right-hand side. By clicking on the preview, the project orientation can be set. After selecting the product and desired orientation, continue by clicking on the CONFIRM button. Selecting Environment After confirming the product, the target environment needs to be selected to start a new project.","title":"Creating a New Project"},{"location":"Mates%20Studio/#opening-projects","text":"Browsing Recent Projects While in the setup window, recent projects can be browsed by clicking on the Browse Recent Projects button. Recent projects can be filtered by choosing the category tabs on the left-hand side. By selecting a project from the list shown in the middle column of the window, a preview of the project will be shown on the right-hand side. By clicking on the preview, the other project pages can be browsed. After confirming the project, it can be opened by clicking on the CONFIRM button. Browsing the Computer While in the setup window, the computer can be browsed for projects by clicking on the Browse Computer button. Mates Studio will open a file selection window which can be utilized to find and open a project anywhere in the computer.","title":"Opening Projects"},{"location":"Mates%20Studio/#environments","text":"","title":"Environments"},{"location":"Mates%20Studio/#commander","text":"Commander is the simplest among all Mates Studio environments. It allows users to select and utilize different page designs/layouts from a built-in collection provided by the Breadboard Mates team and its community. This allows development of GUI applications in seconds. This environment is designed to program Breadboard Mates modules to be used with a host controller using the Mates Controller Command Protocol . This allows users to control the display using their favorite microcontrollers through Serial UART. This environment also includes a Mates Controller Interface that simulates a microcontroller controlling the display module programmed with a Commander project.","title":"Commander"},{"location":"Mates%20Studio/#architect","text":"Similar to Commander, the Architect environment was designed to program modules to be used with a host controller and features Mates Controller Command Protocol . It also provides the Mates Controller Interface to simulate a host controller. The main advantage of Architect over Commander is the increased flexibility with designing their projects by featuring a Graphics Editor which allows custom widget and page designs.","title":"Architect"},{"location":"Mates%20Studio/#genius","text":"The Genius environment is designed to allow user to write their own custom programs for Breadboard Mates module. This allows Breadboard Mates modules to work as standalone devices. It features a Graphics Editor allowing custom widget and page designs and a Code Editor to write the program in 4D Graphics Language (4DGL) . This provides direct control of the widgets and the unused device peripherals allowing custom functionalities that users need which Commander and Architect are not able to provide.","title":"Genius"},{"location":"Mates%20Studio/#builder","text":"Similar to Genius, the Builder environment is designed to allow user to develop custom programs for their Breadboard Mates modules. It also features a Graphics Editor allowing custom widget and page designs. But instead of a code editor, it features a Blocks Editor . This also provides direct control of the widgets and the unused device peripherals allowing custom functionalities that users need which Commander and Architect are not able to provide. This environment is designed mainly for inexperienced 4DGL developers but can also be used by seasoned developers. This environment can be used to develop varying complexity of projects. However, as the project becomes increasingly complicated, writing the code in Genius can prove to be more manageable for experience developers.","title":"Builder"},{"location":"Mates%20Studio/#application-menus","text":"Excluding Commander, all Mates Studio environments use a traditional dropdown menu bar. These three environments have almost identical menus. This section discusses the menu bar including which environment certain items apply.","title":"Application Menus"},{"location":"Mates%20Studio/#file-menu","text":"The File Menu group includes items that can be used for file management. It includes the following: Item Description New Opens the Setup Window to create new project Open\u2026 Opens a window prompting to select a project file to open Open Recent Provides a list of recently opened projects Project Book Provides a list of projects found in the default save location Examples Provides a list of examples included with Mates Studio Close Closes the current project Save Saves the project Save As\u2026 Saves the project to a different location and/or filename Exit Exits Mates Studio","title":"File Menu"},{"location":"Mates%20Studio/#graphics-menu","text":"The Graphics Menu group includes items that can be used for managing the UI design. This includes page and widget management tools and options as shown: Item Description Capture Snapshot Saves a snapshot of the selected page as an image file Add Page Opens a Select Page Template window Copy Page Copies the selected page for pasting Paste Page Pastes the recently copied page to the current project Delete Page Deletes the selected page Save Page Saves the active page as a configuration file Add Widget Opens a Select Widget window Cut Widget Copies the selected widget for moving to another page Copy Widget Copies the selected widget for pasting Paste Widget Pastes the recently copied widget Delete Widget Deletes the selected widget Save Widget Saves the selected widget as a configuration file","title":"Graphics Menu"},{"location":"Mates%20Studio/#project-menu","text":"The Project Menu group includes items that can be used for managing the project itself. This includes project compilation, upload and project settings as shown: Item Description Compile Compiles the project to check for errors Upload Compiles and upload the project if there are no errors Export Compiled Files Compiles and exports project files if there are no errors Module Provides option to change target module Orientation Provides option to change module orientation Page Transition Provides option to select transitioning effect Baud Rate Provides option to set baud rate for communicating Show Project Folder Opens the location of the project Note Baud Rate is only available in Architect Environment","title":"Project Menu"},{"location":"Mates%20Studio/#edit-menu","text":"The Edit Menu group includes items that can be used with the code/text editor of the Genius environment. This includes basic editing functionalities such as copying and pasting, undo and redo, etc. Item Description Undo Cancel previous text editor action Redo Redo previously cancelled text editor action Cut Copies the highlighted text for moving to another location Copy Copies the highlighted text for pasting Paste Adds previously copied text to the current cursor position Select All Select all text available in the text editor Find Opens the search tool of the text editor Find Next Moves to the next occurrence of the text Find Previous Moves to the previous occurrence of the text Note Edit Menu is only available in Genius Environment","title":"Edit Menu"},{"location":"Mates%20Studio/#tools-menu","text":"The Tools Menu group includes helpful items that can be utilized during development. Item Description Port Provides the option to scan and select COM port to use Open Serial Tool Opens Terminal tool for Genius and Builder or Mates Controller for Architect Get Module Info Checks the module connected in the selected port Load PmmC Opens the Load PmmC window for updating firmware Activate License Provides the option to activate full version of the environment","title":"Tools Menu"},{"location":"Mates%20Studio/#help-menu","text":"The Help Menu group includes external references and support links. Item Description Breadboard Mates Website Opens Breadboard Mates Website using the default web browser Breadboard Mates Forum Opens Breadboard Mates Forum using the default web browser Manuals Opens Breadboard Mates Resource Centre Manuals using the default web browser Datasheets Opens Breadboard Mates Resource Centre Datasheets using the default web browser Tutorials Opens Breadboard Mates Resource Centre Tutorials using the default web browser Projects Opens Breadboard Mates Resource Centre Projects using the default web browser About Mates Studio Shows the version information of Mates Studio","title":"Help Menu"},{"location":"Mates%20Studio/#release-notes","text":"Mates Studio Release Notes 1.0.14 : 5 May 2022 - Fixed issue when opening projects by double clicking the file 1.0.13 : 14 April 2022 - Changed TIMI-Click to TIMI-MB 1.0.12 : 5 April 2022 - Fixed copy and paste issue in non-touch modules 1.0.10 : 23 February 2022 - Fixed issue with DotMatrix and TextArea not updating 1.0.9 : 21 February 2022 - Added 240x240 page designs - Added auto update feature - Increased UART receive buffer size for Commander and Architect projects 1.0.8 : 15 January 2022 - Added 240x240 page designs - Fixed display issues when image and page background image when there is no other inherent and GCI widget included 1.0.7 : 05 January 2022 - Added 240x240 page designs - Added swipe event logging system - Added new functions/commands: - *getSwipeEventCount*: counts the number of swipe events that hasn't been read - *getNextSwipeEvent*: reads the next swipe event, returns -1 if no event to read 1.0.6 : 14 December 2021 - Added support for REPTOR devices - Added automatic touch handling for input widgets - Added different modes for button widgets (toggle, momentary and navigation) - Added button event log system for momentary buttons - Added new functions/commands: - *getButtonEventCount*: counts the number of button events that hasn't been read - *getNextButtonEvent*: reads the next button event, returns -1 if no event to read - Implemented Query (getButtonEventCount, getNextButtonEvent) command in Control window/tab of Architect and Commander environments 1.0.5 : 03 December 2021 - Prevented input widgets from being used in non-touch modules - Changed MediaGaugeA to have the thumb option from MediaSlider - Fixed Commander documentation scroll issue - Fixed Page designs that uses sliders and knobs as gauges and buttons as LEDs - Fixed RotaryGauge behaving as an input widget - Fixed DLL missing from other Windows PCs 1.0.4 : 17 November 2021 - Fixed Inherent resource updates for gauges 1.0.3 : 14 November 2021 - Fixed MediaGaugeB compile and display error 1.0.1 : 08 November 2021 - Fixed Dot Matrix gradient issue caused by incorrect use of the widget's position - Fixed Media Gauge D incorrect range computation 1.0.0 : 13 October 2021 (Initial Public Release) Supported Products - TIMI-96 - TIMI-Click - TIMI-130 - TED-96 Available Widgets - Label - Scale - Panel - Media Panel - Symbol - Image - Led - Media Led - Media Color Led - Fancy Led A - Led Digits - Led Spectrum - Media Spectrum - Dot Matrix - Gauge A - Gauge B - Gauge C - Gauge D - Gauge E - Gauge F - Angular Meter - Ruler Gauge - Media Gauge A - Media Gauge B - Media Gauge C - Media Gauge D - Media Thermometer - Rotary Gauge - Slide Show - Animation - Symbols - Led Digits - Scope - Button A - Button B - Switch A - Switch B - Media Button - Fancy Button A - Slider A - Slider B - Slider C - Slider D - Slider E - Slider F - Media Slider - Knob - Media Rotary - Text Area - Print Area","title":"Release Notes"},{"location":"Mates%20Studio/mates-controller-command-protocol/","tags":["Commander","Architect"],"text":"Mates Controller Command Protocol Introduction Mates Studio's Commander and Architect environments are designed to create user interfaces for Breadboard Mates' display products with the purpose of using these with the user's preferred host controller. Architect and Commander projects utilizes the same simple Serial Command protocol allowing any host controller to communicate with the display modules. The protocol features commands including, but not limited to, updating, and reading widget value, changing backlight level, and changing widget color parameters. Boot Sequence During boot of Architect and Commander projects, the display starts by performing its initial setup which includes mounting external storage devices, displaying initial page Page0 and initializing UART for receiving commands and transmitting replies. After setting up everything required, the display sends a ACK 0x06 signifying that the display is ready to accept commands from the host controller. Command Summary The command protocol features a simple data exchange format between the host controller and the display module. All commands come from the host controller. After receiving a command from the host, the display performs the appropriate actions and replies to the host controller appropriately. The display's reply always starts with an ACK 0x06 followed by an appropriate response as required, or a NACK 0x15 if the command fails. Basic Commands Commands for controlling the display's basic functionality are included and discussed in this section. These commands include activating a specific page, querying the active page, setting backlight level, and performing a soft reset. Set Page Sets the active page shown by the project Parameters Type Description Command Command 0x0000 Index 16-bit Integer Specifies the target page to activate Response None Example Success Failed Successfully set the active page to Page1 [0x0001] Failed attempt to set the active page to Page16 [0x0010] Get Page Queries the active page Parameters Type Description Command Command 0x0001 Response Active Page Index Example Queried the active page and got Page5 [0x0005] Set Backlight Sets the backlight level of the display module Parameters Type Description Command Command 0x0006 Level 16-bit Integer Specifies the target backlight level [0 to 15] Response None Example Successfully set backlight level to 7 [0x0007] System Reset Performs a software reset Parameters Type Description Command Command 0x0009 Response None Example Performs a software reset and waits until the display is ready Note The ACK from the display module is the same acknowledgement received during a boot sequence. This signifies that the display is ready to receive and process commands. Common Widget Commands Most of Mates Studio widgets hold a 16-bit integer value which can be set and queried by the host controller. Most widgets also include the feature to change and read certain color parameters during runtime. Commands related to these features are included and discussed in this section. Note All applicable widget types are listed here . This command is not applicable to Int32 and Float LedDigits Set Widget Value Update the target widget to the specified value Parameters Type Description Command Command 0x0002 Type 8-bit Integer Specifies the type of target widget Index 8-bit Integer Specifies the index of target widget Value 16-bit Integer Specifies the new value Response None Example Successfully turns ON [0x0001] Media Led [0x40] index 3 [0x03] Get Widget Value Queries the value of the target widget Parameters Type Description Command Command 0x0003 Type 8-bit Integer Specifies the type of target widget Index 8-bit Integer Specifies the index of target widget Response Value of the specified widget Example Queried the value of Media Gauge B [0x47] index 5 [0x05] and got 75 [0x004B] Set Widget Parameter Sets the specified widget's parameter to a new value Parameters Type Description Command Command 0x0004 Type 8-bit Integer Specifies the type of target widget Index 8-bit Integer Specifies the index of target widget Parameter 16-bit Integer Specifies the target parameter Value 16-bit Integer Specifies the new value Response None Example Successfully changes the Segment Color On [0x0008] parameter of Led Digits [0x05] index 7 [0x07] to RED [0xF800] Get Widget Parameter Queries the parameter value of the target widget Parameters Type Description Command Command 0x0005 Type 8-bit Integer Specifies the type of target widget Index 8-bit Integer Specifies the index of target widget Parameter 16-bit Integer Specifies the target parameter Response Value of the specified widget parameter Example Queried the value of Ruler Gauge [0x01] index 10 [0x0A] Partition 1 Color [0x000C] and got GREEN [0x07E0] Special Widget Commands Some of Mates Studio widgets hold a 32-bit integer value or string, instead of a 16-bit integer value, which can be set by the host controller by utilizing special commands. Some widgets include unique features that adds more versatility to projects. Set 32-bit Widget Value Update the target widget to the specified value Parameters Type Description Command Command 0xFFFC Type 8-bit Integer Specifies the type of target widget Index 8-bit Integer Specifies the index of target widget Value 32-bit Value Specifies the new float or long value Response None Example 32-bit Float 32-bit Integer Sets the value of a Float-mode Led Digits [0x05] index 16 [0x10] to 3.1416 [0x40490FF9] Sets the value of a Int32-mode Led Digits [0x05] index 27 [0x1B] to 299792458 [0x11DE784A] Note This command is only applicable to Int32 and Float LedDigits Update Text Area Update the Text Area with the specified string Parameters Type Description Command Command 0xFFFF Index 16-bit Integer Specifies the index of target Text Area Text ASCII Specifies the new (null terminated) string value Response None Example Sets the value of a Text Area index 2 [0x0002] to \"Mates\" [0x4D61746573] Clear Print Area Clear the specified Print Area Parameters Type Description Command Command 0x0007 Index 16-bit Integer Specifies the index of target Print Area Response None Example Clears Print Area index 12 [0x000C] Set Print Area Color Sets the color to use when appending to the specified Print Area Parameters Type Description Command Command 0x0008 Index 16-bit Integer Specifies the index of target Print Area Color RGB565 Specifies the new 16-bit color value Response None Example Sets the print color for Print Area index 17 [0x0011] to BLUE [0x001F] Append to Print Area Append an array of characters or bytes to the Print Area Parameters Type Description Command Command 0xFFFE Index 16-bit Integer Specifies the index of target Print Area Count 16-bit Integer Specifies number of characters or bytes to write Data 8-bit Array Specifies the character or byte array to write Response None Example ASCII Mode Hex Mode Append \"Mates\" [0x4D61746573] to an ASCII-mode Print Area index 8 [0x0008] Append 00 AB CD EF 01 [0x00ABCDEF01] to an HEX-mode Print Area index 9 [0x0009] Append to Scope Append new set of values to the specified Scope widget Parameters Type Description Command Command 0xFFFB Index 16-bit Integer Specifies the index of target Scope Count 16-bit Integer Specifies number of integers to write Data 16-bit Array Specifies the 16-bit data array to write Response None Example Append 40 [0x0028], 80 [0x0050], 120 [0x0078], 60 [0x003C] and 0 [0x0000] to Scope index 21 [0x0015] Update Dot Matrix Update the Dot Matrix with the specified string Parameters Type Description Command Command 0xFFFA Index 16-bit Integer Specifies the index of target Dot Matrix Count 16-bit Integer Specifies number of characters to write Data Character Array Specifies the character array to write Response None Example Update \"Mates\" [0x4D61746573] to Dot Matrix index 11 [0x000B] Touch Input Commands Commands for handling select touch events such as button presses, and simple swipe actions are included and discussed in this section. Get Number of Button Events Queries the number of unread button events recorded by the module Parameters Type Description Command Command 0x000D Response Number of unread button events Example Queried the number of button events and got 3 [0x0003] Get Number of Swipe Events Queries the number of unread swipe events recorded by the module Parameters Type Description Command Command 0x000F Response Number of unread swipe events Example Queried the number of swipe events and got 2 [0x0002] Get Next Button Event Queries the next unread button event Parameters Type Description Command Command 0x000E Response Button ID [High Byte: Type, Low Byte: Index] Example Queried the next button event and got MediaButton5 [0x6205] Get Next Swipe Event Queries the next unread swipe event Parameters Type Description Command Command 0x0010 Response Swipe Information Example Queried the next swipe event and got West [0x0004] Swipe Value Reference Swipe events can be detected as North, South, East and West. Direction Value North 0b0001 South 0b0010 East 0b0100 West 0b1000 This command always returns both vertical and horizontal directions and therefore can be used to detect diagonal swipes. The table below lists the suggested swipe flags that can be used for swipe handling. Event Value Condition MATES_SWIPE_NORTH 0b0001 From bottom to top MATES_SWIPE_SOUTH 0b0010 From top to bottom MATES_SWIPE_EAST 0b0100 From left to right MATES_SWIPE_WEST 0b1000 From right to left MATES_SWIPE_VERT 0b0011 only done vertically MATES_SWIPE_HORZ 0b1100 only done horizontally MATES_SWIPE_TLBR 0b0110 From top left to bottom right MATES_SWIPE_TRBL 0b1010 From top right to bottom left MATES_SWIPE_BLTR 0b0101 From bottom left to top right MATES_SWIPE_BRTL 0b1001 From bottom right to top left Here are the conditional statement examples for each of the suggested event flags Event Usage MATES_SWIPE_NORTH (event & MATES_SWIPE_NORTH) == MATES_SWIPE_NORTH MATES_SWIPE_SOUTH (event & MATES_SWIPE_SOUTH) == MATES_SWIPE_SOUTH MATES_SWIPE_EAST (event & MATES_SWIPE_EAST) == MATES_SWIPE_EAST MATES_SWIPE_WEST (event & MATES_SWIPE_WEST) == MATES_SWIPE_WEST MATES_SWIPE_VERT (event & MATES_SWIPE_VERT) != 0 MATES_SWIPE_HORZ (event & MATES_SWIPE_HORZ) != 0 MATES_SWIPE_TLBR (event & MATES_SWIPE_TLBR) == MATES_SWIPE_TLBR MATES_SWIPE_TRBL (event & MATES_SWIPE_TRBL) == MATES_SWIPE_TRBL MATES_SWIPE_BLTR (event & MATES_SWIPE_BLTR) == MATES_SWIPE_BLTR MATES_SWIPE_BRTL (event & MATES_SWIPE_BRTL) == MATES_SWIPE_BRTL","title":"Command Protocol"},{"location":"Mates%20Studio/mates-controller-command-protocol/#mates-controller-command-protocol","text":"","title":"Mates Controller Command Protocol"},{"location":"Mates%20Studio/mates-controller-command-protocol/#introduction","text":"Mates Studio's Commander and Architect environments are designed to create user interfaces for Breadboard Mates' display products with the purpose of using these with the user's preferred host controller. Architect and Commander projects utilizes the same simple Serial Command protocol allowing any host controller to communicate with the display modules. The protocol features commands including, but not limited to, updating, and reading widget value, changing backlight level, and changing widget color parameters.","title":"Introduction"},{"location":"Mates%20Studio/mates-controller-command-protocol/#boot-sequence","text":"During boot of Architect and Commander projects, the display starts by performing its initial setup which includes mounting external storage devices, displaying initial page Page0 and initializing UART for receiving commands and transmitting replies. After setting up everything required, the display sends a ACK 0x06 signifying that the display is ready to accept commands from the host controller.","title":"Boot Sequence"},{"location":"Mates%20Studio/mates-controller-command-protocol/#command-summary","text":"The command protocol features a simple data exchange format between the host controller and the display module. All commands come from the host controller. After receiving a command from the host, the display performs the appropriate actions and replies to the host controller appropriately. The display's reply always starts with an ACK 0x06 followed by an appropriate response as required, or a NACK 0x15 if the command fails.","title":"Command Summary"},{"location":"Mates%20Studio/mates-controller-command-protocol/#basic-commands","text":"Commands for controlling the display's basic functionality are included and discussed in this section. These commands include activating a specific page, querying the active page, setting backlight level, and performing a soft reset.","title":"Basic Commands"},{"location":"Mates%20Studio/mates-controller-command-protocol/#set-page","text":"Sets the active page shown by the project Parameters Type Description Command Command 0x0000 Index 16-bit Integer Specifies the target page to activate Response None Example Success Failed Successfully set the active page to Page1 [0x0001] Failed attempt to set the active page to Page16 [0x0010]","title":"Set Page"},{"location":"Mates%20Studio/mates-controller-command-protocol/#get-page","text":"Queries the active page Parameters Type Description Command Command 0x0001 Response Active Page Index Example Queried the active page and got Page5 [0x0005]","title":"Get Page"},{"location":"Mates%20Studio/mates-controller-command-protocol/#set-backlight","text":"Sets the backlight level of the display module Parameters Type Description Command Command 0x0006 Level 16-bit Integer Specifies the target backlight level [0 to 15] Response None Example Successfully set backlight level to 7 [0x0007]","title":"Set Backlight"},{"location":"Mates%20Studio/mates-controller-command-protocol/#system-reset","text":"Performs a software reset Parameters Type Description Command Command 0x0009 Response None Example Performs a software reset and waits until the display is ready Note The ACK from the display module is the same acknowledgement received during a boot sequence. This signifies that the display is ready to receive and process commands.","title":"System Reset"},{"location":"Mates%20Studio/mates-controller-command-protocol/#common-widget-commands","text":"Most of Mates Studio widgets hold a 16-bit integer value which can be set and queried by the host controller. Most widgets also include the feature to change and read certain color parameters during runtime. Commands related to these features are included and discussed in this section. Note All applicable widget types are listed here . This command is not applicable to Int32 and Float LedDigits","title":"Common Widget Commands"},{"location":"Mates%20Studio/mates-controller-command-protocol/#set-widget-value","text":"Update the target widget to the specified value Parameters Type Description Command Command 0x0002 Type 8-bit Integer Specifies the type of target widget Index 8-bit Integer Specifies the index of target widget Value 16-bit Integer Specifies the new value Response None Example Successfully turns ON [0x0001] Media Led [0x40] index 3 [0x03]","title":"Set Widget Value"},{"location":"Mates%20Studio/mates-controller-command-protocol/#get-widget-value","text":"Queries the value of the target widget Parameters Type Description Command Command 0x0003 Type 8-bit Integer Specifies the type of target widget Index 8-bit Integer Specifies the index of target widget Response Value of the specified widget Example Queried the value of Media Gauge B [0x47] index 5 [0x05] and got 75 [0x004B]","title":"Get Widget Value"},{"location":"Mates%20Studio/mates-controller-command-protocol/#set-widget-parameter","text":"Sets the specified widget's parameter to a new value Parameters Type Description Command Command 0x0004 Type 8-bit Integer Specifies the type of target widget Index 8-bit Integer Specifies the index of target widget Parameter 16-bit Integer Specifies the target parameter Value 16-bit Integer Specifies the new value Response None Example Successfully changes the Segment Color On [0x0008] parameter of Led Digits [0x05] index 7 [0x07] to RED [0xF800]","title":"Set Widget Parameter"},{"location":"Mates%20Studio/mates-controller-command-protocol/#get-widget-parameter","text":"Queries the parameter value of the target widget Parameters Type Description Command Command 0x0005 Type 8-bit Integer Specifies the type of target widget Index 8-bit Integer Specifies the index of target widget Parameter 16-bit Integer Specifies the target parameter Response Value of the specified widget parameter Example Queried the value of Ruler Gauge [0x01] index 10 [0x0A] Partition 1 Color [0x000C] and got GREEN [0x07E0]","title":"Get Widget Parameter"},{"location":"Mates%20Studio/mates-controller-command-protocol/#special-widget-commands","text":"Some of Mates Studio widgets hold a 32-bit integer value or string, instead of a 16-bit integer value, which can be set by the host controller by utilizing special commands. Some widgets include unique features that adds more versatility to projects.","title":"Special Widget Commands"},{"location":"Mates%20Studio/mates-controller-command-protocol/#set-32-bit-widget-value","text":"Update the target widget to the specified value Parameters Type Description Command Command 0xFFFC Type 8-bit Integer Specifies the type of target widget Index 8-bit Integer Specifies the index of target widget Value 32-bit Value Specifies the new float or long value Response None Example 32-bit Float 32-bit Integer Sets the value of a Float-mode Led Digits [0x05] index 16 [0x10] to 3.1416 [0x40490FF9] Sets the value of a Int32-mode Led Digits [0x05] index 27 [0x1B] to 299792458 [0x11DE784A] Note This command is only applicable to Int32 and Float LedDigits","title":"Set 32-bit Widget Value"},{"location":"Mates%20Studio/mates-controller-command-protocol/#update-text-area","text":"Update the Text Area with the specified string Parameters Type Description Command Command 0xFFFF Index 16-bit Integer Specifies the index of target Text Area Text ASCII Specifies the new (null terminated) string value Response None Example Sets the value of a Text Area index 2 [0x0002] to \"Mates\" [0x4D61746573]","title":"Update Text Area"},{"location":"Mates%20Studio/mates-controller-command-protocol/#clear-print-area","text":"Clear the specified Print Area Parameters Type Description Command Command 0x0007 Index 16-bit Integer Specifies the index of target Print Area Response None Example Clears Print Area index 12 [0x000C]","title":"Clear Print Area"},{"location":"Mates%20Studio/mates-controller-command-protocol/#set-print-area-color","text":"Sets the color to use when appending to the specified Print Area Parameters Type Description Command Command 0x0008 Index 16-bit Integer Specifies the index of target Print Area Color RGB565 Specifies the new 16-bit color value Response None Example Sets the print color for Print Area index 17 [0x0011] to BLUE [0x001F]","title":"Set Print Area Color"},{"location":"Mates%20Studio/mates-controller-command-protocol/#append-to-print-area","text":"Append an array of characters or bytes to the Print Area Parameters Type Description Command Command 0xFFFE Index 16-bit Integer Specifies the index of target Print Area Count 16-bit Integer Specifies number of characters or bytes to write Data 8-bit Array Specifies the character or byte array to write Response None Example ASCII Mode Hex Mode Append \"Mates\" [0x4D61746573] to an ASCII-mode Print Area index 8 [0x0008] Append 00 AB CD EF 01 [0x00ABCDEF01] to an HEX-mode Print Area index 9 [0x0009]","title":"Append to Print Area"},{"location":"Mates%20Studio/mates-controller-command-protocol/#append-to-scope","text":"Append new set of values to the specified Scope widget Parameters Type Description Command Command 0xFFFB Index 16-bit Integer Specifies the index of target Scope Count 16-bit Integer Specifies number of integers to write Data 16-bit Array Specifies the 16-bit data array to write Response None Example Append 40 [0x0028], 80 [0x0050], 120 [0x0078], 60 [0x003C] and 0 [0x0000] to Scope index 21 [0x0015]","title":"Append to Scope"},{"location":"Mates%20Studio/mates-controller-command-protocol/#update-dot-matrix","text":"Update the Dot Matrix with the specified string Parameters Type Description Command Command 0xFFFA Index 16-bit Integer Specifies the index of target Dot Matrix Count 16-bit Integer Specifies number of characters to write Data Character Array Specifies the character array to write Response None Example Update \"Mates\" [0x4D61746573] to Dot Matrix index 11 [0x000B]","title":"Update Dot Matrix"},{"location":"Mates%20Studio/mates-controller-command-protocol/#touch-input-commands","text":"Commands for handling select touch events such as button presses, and simple swipe actions are included and discussed in this section.","title":"Touch Input Commands"},{"location":"Mates%20Studio/mates-controller-command-protocol/#get-number-of-button-events","text":"Queries the number of unread button events recorded by the module Parameters Type Description Command Command 0x000D Response Number of unread button events Example Queried the number of button events and got 3 [0x0003]","title":"Get Number of Button Events"},{"location":"Mates%20Studio/mates-controller-command-protocol/#get-number-of-swipe-events","text":"Queries the number of unread swipe events recorded by the module Parameters Type Description Command Command 0x000F Response Number of unread swipe events Example Queried the number of swipe events and got 2 [0x0002]","title":"Get Number of Swipe Events"},{"location":"Mates%20Studio/mates-controller-command-protocol/#get-next-button-event","text":"Queries the next unread button event Parameters Type Description Command Command 0x000E Response Button ID [High Byte: Type, Low Byte: Index] Example Queried the next button event and got MediaButton5 [0x6205]","title":"Get Next Button Event"},{"location":"Mates%20Studio/mates-controller-command-protocol/#get-next-swipe-event","text":"Queries the next unread swipe event Parameters Type Description Command Command 0x0010 Response Swipe Information Example Queried the next swipe event and got West [0x0004]","title":"Get Next Swipe Event"},{"location":"Mates%20Studio/mates-controller-command-protocol/#swipe-value-reference","text":"Swipe events can be detected as North, South, East and West. Direction Value North 0b0001 South 0b0010 East 0b0100 West 0b1000 This command always returns both vertical and horizontal directions and therefore can be used to detect diagonal swipes. The table below lists the suggested swipe flags that can be used for swipe handling. Event Value Condition MATES_SWIPE_NORTH 0b0001 From bottom to top MATES_SWIPE_SOUTH 0b0010 From top to bottom MATES_SWIPE_EAST 0b0100 From left to right MATES_SWIPE_WEST 0b1000 From right to left MATES_SWIPE_VERT 0b0011 only done vertically MATES_SWIPE_HORZ 0b1100 only done horizontally MATES_SWIPE_TLBR 0b0110 From top left to bottom right MATES_SWIPE_TRBL 0b1010 From top right to bottom left MATES_SWIPE_BLTR 0b0101 From bottom left to top right MATES_SWIPE_BRTL 0b1001 From bottom right to top left Here are the conditional statement examples for each of the suggested event flags Event Usage MATES_SWIPE_NORTH (event & MATES_SWIPE_NORTH) == MATES_SWIPE_NORTH MATES_SWIPE_SOUTH (event & MATES_SWIPE_SOUTH) == MATES_SWIPE_SOUTH MATES_SWIPE_EAST (event & MATES_SWIPE_EAST) == MATES_SWIPE_EAST MATES_SWIPE_WEST (event & MATES_SWIPE_WEST) == MATES_SWIPE_WEST MATES_SWIPE_VERT (event & MATES_SWIPE_VERT) != 0 MATES_SWIPE_HORZ (event & MATES_SWIPE_HORZ) != 0 MATES_SWIPE_TLBR (event & MATES_SWIPE_TLBR) == MATES_SWIPE_TLBR MATES_SWIPE_TRBL (event & MATES_SWIPE_TRBL) == MATES_SWIPE_TRBL MATES_SWIPE_BLTR (event & MATES_SWIPE_BLTR) == MATES_SWIPE_BLTR MATES_SWIPE_BRTL (event & MATES_SWIPE_BRTL) == MATES_SWIPE_BRTL","title":"Swipe Value Reference"},{"location":"Mates%20Studio/mates-controller-interface/","tags":["Commander","Architect"],"text":"Mates Controller Interface Introduction Mates Studio's Commander and Architect Environment program the BBM modules with a simple serial command protocol . This protocol can be followed by any chosen host microcontroller to control and interact with the module easily, as long as the host controller features UART interface. For an added convenience, both Commander and Architect offers a simple controller interface that serves as a simulation tool for any host controller. This is useful when testing the capabilities and functionalities opened to the host controller before the actual deployment or host-side development. This manual discusses how to use the tool. Opening the Tool Commander Environment In a Commander project, the tool is accessible by simple clicking the Control tab. Architect Environment In an Architect project, the tool is accessible by simple clicking the Mates Controller button. This will open a separate window. User Interface The Mates Controller tool can be divided into three separate columns. Page Navigation This provides a simple way to change between the pages present in the project Main Control Area This area displays all widgets that can be interacted with Command Viewer Area This shows all the commands sent by during the simulation Page Navigation Main Control Area Command Viewer Area","title":"Controller Interface"},{"location":"Mates%20Studio/mates-controller-interface/#mates-controller-interface","text":"","title":"Mates Controller Interface"},{"location":"Mates%20Studio/mates-controller-interface/#introduction","text":"Mates Studio's Commander and Architect Environment program the BBM modules with a simple serial command protocol . This protocol can be followed by any chosen host microcontroller to control and interact with the module easily, as long as the host controller features UART interface. For an added convenience, both Commander and Architect offers a simple controller interface that serves as a simulation tool for any host controller. This is useful when testing the capabilities and functionalities opened to the host controller before the actual deployment or host-side development. This manual discusses how to use the tool.","title":"Introduction"},{"location":"Mates%20Studio/mates-controller-interface/#opening-the-tool","text":"Commander Environment In a Commander project, the tool is accessible by simple clicking the Control tab. Architect Environment In an Architect project, the tool is accessible by simple clicking the Mates Controller button. This will open a separate window.","title":"Opening the Tool"},{"location":"Mates%20Studio/mates-controller-interface/#user-interface","text":"The Mates Controller tool can be divided into three separate columns. Page Navigation This provides a simple way to change between the pages present in the project Main Control Area This area displays all widgets that can be interacted with Command Viewer Area This shows all the commands sent by during the simulation","title":"User Interface"},{"location":"Mates%20Studio/mates-controller-interface/#page-navigation","text":"","title":"Page Navigation"},{"location":"Mates%20Studio/mates-controller-interface/#main-control-area","text":"","title":"Main Control Area"},{"location":"Mates%20Studio/mates-controller-interface/#command-viewer-area","text":"","title":"Command Viewer Area"},{"location":"Mates%20Studio/mates-studio-blocks-editor/","tags":["Builder"],"text":"Mates Studio Blocks Editor Introduction Mates Studio's Builder environment features a graphical programming interface, Blocks Editor, allowing both beginners and seasoned developers to control the flow of their application by simply visually connecting blocks. The image shows a newly started Builder project. Boxed are the parts of the Block Editor, the toolbox and the workspace. Toolbox : This contains the available blocks that can be added to the workspace. Blocks are grouped into several categories to easily search for the desired features. Workspace : As the name suggests, this is the main work area during development. This allows you to design the application's workflow. Blocks are the fundamental elements of the Builder environment. These can be connected to each other in the workspace using their input and output connectors. Block Input Types Input connectors can either be value or statement input. These connectors are present in the right side of each block or internally in the case of value inputs. A block can have multiple input connectors. Value Input Connector This connector accepts a single value block Statement Input Connector This connector accepts multiple statement blocks Blocks can also include internal inputs. Internal inputs provides fixed rules or items for the block. These can either be an integer input, a text input, a color input or a dropdown input. Integer Input A simple number input which automatically corrects the value to the nearest integer which falls under a preset allowable range Text Input A simple text input allowing to specify names or text value for the block Color Input A color input that provides a simple preset color selector Dropdown Input A dropdown selector which provided acceptable values that the block accepts Block Output Types Output connectors are always present in either the left side, top side or top and bottom side of the block. These connectors can either be a value output or a statement output. A block can only have either a value or statement outputs, but not both types. Value Output Connector This connector can connect to blocks with a value input connector Statement Output Top and Bottom Connector This connector can connect to statement blocks with a top connector effectively joining the group of statement blocks. With the bottom connector, it allows more statement blocks to join the group. Statement Output Top Connector This connector can connect to statement blocks with the bottom connector effectively joining the group of statement blocks. Having no bottom connector, it is not possible to connect another block below this signifying the end of actions performed by the group. Blocks Classification These blocks can be classified depending on their output type . In terms of output, blocks can be classified as a function block, a value block or a statement block. Function Block These are blocks with no output connector. This type of blocks helps organize the workspace by simplifying repeated multi-block actions. Value Block These blocks provides a left output connector. This type of blocks provides a value to a parent block that will be used to perform the desired action. Statement Block These blocks provides the top connector and, optionally, the bottom output. This type if blocks can be connected together to group actions to be performed by a parent block with a statement input connector. Mates Blocks The Mates category includes blocks that directly interact and control the screen. This include backlight, page, widget and touch related blocks. Main Application All Builder project starts with the main application block. It provides two statement inputs named setup and loop. Input Type Description setup statement allows developers to perform tasks at the beginning of the program which is during boot or immediately after a reset loop statement allows developers to perform tasks indefinitely after performing the necessary setup Graphics Blocks This group contains blocks used for backlight, page and widget control and query. Set Backlight Level This block sets the backlight level of the display module. Input Type Description level value intensity of backlight, must be between 0 and 15 Example Set Backlight to Integer Value Set Backlight to Variable Value Set Page This block changes the project to the selected page. The page dropdown input lists all pages included in the project. Input Type Description page value target page to change into Example Set Page to Existing Page Set Page to Variable Value Get Page Index This block can be used to query the current page of the running project. Return Selected page Get Current Page This block can be used to query the current page of the running project. Return Active page Example: Evaluate Page Get Number of Pages This block can be used to check the number of pages included in the project. Return Number of pages in project Example: Increment Page and Loop to Page0 Set Widget Value This block changes the value of the selected widget. The widget dropdown input lists all applicable widgets. Input Type Description widget dropdown the target widget value value the value the target widget will be set to Example Set Gauge to Integer Value Set Gauge to Variable Value Set Gauge to Slider Value Note It is recommended to simply link values of widgets by setting their properties as discussed here . Get Widget Value This block queries the value of the selected widget. The widget dropdown input lists all applicable widgets. Input Type Description widget dropdown the target widget Return Value of the target widget Example Store Slider Value Set Gauge to Slider Value Note It is recommended to simply link values of widgets by setting their properties as discussed here . Set Spectrum Column Value This block changes the value of the selected column of the target spectrum. The spectrum dropdown input lists all Spectrum widgets in the project. Input Type Description column value the target column index, must be less than number of columns of the target spectrum Spectrum dropdown the target Spectrum widget value value the value the target column will be set to Update TextArea This block updates the target TextArea. The TextArea dropdown input lists all TextArea widgets in the project. Input Type Description TextArea dropdown the target TextArea widget format dropdown the formatting to use when writing the value value value the value to update the DotMatrix with Update DotMatrix This block updates the target DotMatrix. The DotMatrix dropdown input lists all DotMatrix widgets in the project. Input Type Description DotMatrix dropdown the target DotMatrix widget format dropdown the formatting to use when writing the value value value the value to update the DotMatrix with Clear PrintArea This block clears the target PrintArea. The PrintArea dropdown input lists all PrintArea widgets in the project. Input Type Description PrintArea dropdown the target PrintArea widget Set PrintArea Color This block sets a new color for the target PrintArea to use. The PrintArea dropdown input lists all PrintArea widgets in the project. Input Type Description PrintArea dropdown the target PrintArea widget color value the new color value to use when appending to the target PrintArea Append to PrintArea This block appends the specified value to the target PrintArea. The PrintArea dropdown input lists all ASCII type PrintArea widgets in the project. Input Type Description format dropdown the formatting to use when writing the value value value the value to update the PrintArea with PrintArea dropdown the target PrintArea widget Append Bytes to PrintArea This block appends the specified array to the target PrintArea. The PrintArea dropdown input lists all HEX type PrintArea widgets in the project while the array dropdown lists all variables in the project. Input Type Description count integer the number of bytes to write from the array array dropdown a variable with an array of values to update the PrintArea with PrintArea dropdown the target PrintArea widget Note A variable array is automatically created if it doesn't exist. Ensure that the variable selected is initialized as an array using the Create Array block. Append Values to Scope This block appends the specified array to the target Scope. The Scope dropdown input lists all Scope widgets in the project while the array dropdown lists all variables in the project. Input Type Description count integer the number of values to write from the array array dropdown a variable with an array of values to update the Scope with Scope dropdown the target Scope widget Note A variable array is automatically created if it doesn't exist. Ensure that the variable selected is initialized as an array using the Create Array block. Touch Input Blocks Touch input blocks are only available for BBM modules with a touchscreen interface. Get Event Button ID This block provides a selection of all buttons recording an event. This is useful when evaluating the recorded button events. The button dropdown input lists all Momentary and Grouped button widgets in the project. Input Type Description button dropdown the momentary or grouped button Return ID of the selected button Get Number of Recorded Button Events This block can be used to query the number of unread recorded button events. Return Number of unread button events Get Next Button Event This block can be used to read/query the source of the next recorded button event. Return ID of the source button Get Number of Recorded Swipe Events This block can be used to query the number of unread recorded swipe events. Return Number of unread swipe events Get Next Swipe Event This block can be used to read the value of the next recorded swipe event. Return Value of the swipe event Note This value needs to be stored in a variable and evaluated using Evaluate Horizontal Swipe or Evaluate Vertical Swipe blocks. Utility Blocks This group provides useful blocks for designing program flow (conditions, loops, etc.), basic computation and value assignments. Logic Blocks Logical Comparison This allows developers to create comparisons which is typically used as test conditions that can be evaluated by other blocks. Available comparisons are as shown. Input Type Description a value left side value for the comparison operator dropdown equality operators for testing the two values b value right side value for the comparison Return Result of the comparison, true or false Example Evaluate Value of Variable Compare Two Variables Store Result Logical Operations This allows developers to combine multiple Logical Comparisons . This can be nested as multiple Logical Operation blocks. This is also typically used as test conditions that can be evaluated by other blocks. Available operations are as shown. Input Type Description a value left side value for the operation operator dropdown logical operators for joining the two values b value right side value for the operation Return Result of the operation, true or false Example Check if Both are True Check if Any is True Store Result Logical Negate This allows developers to invert the output of Logical Comparisons and Logical Operations and is also typically used as test conditions that can be evaluated by other blocks. Input Type Description condition value the condition to evaluate and negate Return Negated value of the test condition Example Negate Variable Negate Logical Comparison Store Result Logical Ternary Operation This allows developers to evaluate the output of Logical Comparisons and Logical Operations and return a value depending on the truthfulness of the test condition. Input Type Description test value the condition to evaluate true value the return value if condition is true false value the return value if condition is false Return The evaluated return value Example Test Variable Test Logical Comparison Store Result Conditional If-Else This allows developers to evaluate test conditions that will be evaluated to select which group of tasks to perform. Test conditions are usually created using the Logical Comparison block. The block can be configured to add multiple test conditions ( else if ) and a default ( else ) condition which is triggered when none of the specified test conditions are met. Input Type Description condition value condition to evaluate before performing tasks do statement all the tasks to perform if condition is true Note Number of condition and do inputs increases depending on configuration Evaluate Horizontal Swipe This block evaluates the selected variable for the horizontal direction of swipe. The variable must be previously set to the Get Next Swipe Event block. Developers can use this to perform different tasks depending on whether the screen is swiped going left or right. Input Type Description variable dropdown the variable to evaluate for the swipe direction right statement all the tasks to perform if the swipe event is from left to right left statement all the tasks to perform if the swipe event is from right to left Note This block is only available for BBM modules with a touchscreen interface. A variable swipe is created automatically if it doesn't exist. Evaluate Vertical Swipe This block evaluates the selected variable for the horizontal direction of swipe. The variable must be previously set to the Get Next Swipe Event block. Developers can use this to perform different tasks depending on whether the screen is swiped going up or down. Input Type Description variable dropdown the variable to evaluate for the swipe direction up statement all the tasks to perform if the swipe event is upwards down statement all the tasks to perform if the swipe event is downwards Note This block is only available for BBM modules with a touchscreen interface. A variable swipe is created automatically if it doesn't exist. Loops Blocks Repeat Count Repeat While or Until Count with Variable Note A variable i is created automatically if it doesn't exist. Break or Continue Math Blocks Text Blocks Arrays Blocks Create Array Color Blocks System Blocks This group provides useful blocks allowing developers to utilize additional hardware features available for the BBM module. GPIO Blocks Timers Blocks Serial Blocks I2C Blocks 1-Wire Blocks Dynamic Blocks Dynamic blocks can be created multiple times. These can be used to further expand and provide more freedom in project development. Variables Variables are key components in text programming. The builder environment allows creation of global variables. Once a variable is created, setter, getter and change blocks are generated. A setter block allows the variable to be set while a getter block queries the value of the variable. A variable change block can be used to increase or decrease the value of the variable. All of these blocks provides a dropdown selector listing the available variables. From the dropdown selector, several actions can be performed including selection, renaming and deletion of the variables. A variable can be created by going to the Variables category and clicking the Create variable button. This will open a prompt requesting a new variable name. Alternatively, some blocks generate variables it requires. Create Function blocks generate their inputs as new variables if these don't exist. Other blocks that behave this way are blocks with variable dropdown which defaults to a specific variable name, in case the variable doesn't exist yet. Set Variable This blocks allows developers to set the value of the selected variable. Input Type Description variable dropdown the target variable to set value value the value to set the variable to Get Variable This blocks allows developers to query the current value of the selected variable. Input Type Description variable dropdown the target variable to query Return Value of the variable Change Variable by Value This blocks allows developers to change the value of the selected variable by the value specified. Input Type Description variable dropdown the target variable to change value value the value to change the variable by Functions Functions are another useful feature from text-based programming. Like in text programming, the builder environment provided block functions allowing developers to simplify repeated actions by grouping the blocks together and allowing these group of actions to be called and performed using a single block. Create Function without Return Input This allows developers to group blocks to perform every time the function is called. Functions can be configured to take one or more value inputs by clicking the gear icon of the block to edit the configuration. The configure function inputs are also added as global variables. Input Type Description name text unique name to identify the function actions statement all the actions to be performed by the function when called Create Function with Return Input This allows developers to group blocks to perform every time the function is called. It also provides a return value input. This is useful when performing reads or computations. Functions can be configured to take one or more value inputs by clicking the gear icon of the block to edit the configuration. The configure function inputs are also added as global variables. Input Type Description name text unique name to identify the function actions statement all the tasks to be performed by the function when called return value the output value of the function after executing all tasks Function Return This block can be used to exit a function if a certain condition is met. Depending on the type of function, with or without return input, this block will automatically transform as required If used in a function with no return input, this block transforms to suitable block as shown. Notice that the value input is removed. If used in a function with a return input, this block reverts to its original state. Notice that the value input is added. Input Type Description condition value the condition to check for evaluating returns return value the output value of the function (if applicable) Call Function This block calls the function of the same name. This is available after a function with no return input is created. This may have one or more value inputs depending on the configuration of the function. Call Function and Return Value This block calls the function of the same name and returns the output value. This is available after a function with return input is created. This may have one or more value inputs depending on the configuration of the function. Return Output of the function","title":"Blocks Editor"},{"location":"Mates%20Studio/mates-studio-blocks-editor/#mates-studio-blocks-editor","text":"","title":"Mates Studio Blocks Editor"},{"location":"Mates%20Studio/mates-studio-blocks-editor/#introduction","text":"Mates Studio's Builder environment features a graphical programming interface, Blocks Editor, allowing both beginners and seasoned developers to control the flow of their application by simply visually connecting blocks. The image shows a newly started Builder project. Boxed are the parts of the Block Editor, the toolbox and the workspace. Toolbox : This contains the available blocks that can be added to the workspace. Blocks are grouped into several categories to easily search for the desired features. Workspace : As the name suggests, this is the main work area during development. This allows you to design the application's workflow. Blocks are the fundamental elements of the Builder environment. These can be connected to each other in the workspace using their input and output connectors.","title":"Introduction"},{"location":"Mates%20Studio/mates-studio-blocks-editor/#block-input-types","text":"Input connectors can either be value or statement input. These connectors are present in the right side of each block or internally in the case of value inputs. A block can have multiple input connectors. Value Input Connector This connector accepts a single value block Statement Input Connector This connector accepts multiple statement blocks Blocks can also include internal inputs. Internal inputs provides fixed rules or items for the block. These can either be an integer input, a text input, a color input or a dropdown input. Integer Input A simple number input which automatically corrects the value to the nearest integer which falls under a preset allowable range Text Input A simple text input allowing to specify names or text value for the block Color Input A color input that provides a simple preset color selector Dropdown Input A dropdown selector which provided acceptable values that the block accepts","title":"Block Input Types"},{"location":"Mates%20Studio/mates-studio-blocks-editor/#block-output-types","text":"Output connectors are always present in either the left side, top side or top and bottom side of the block. These connectors can either be a value output or a statement output. A block can only have either a value or statement outputs, but not both types. Value Output Connector This connector can connect to blocks with a value input connector Statement Output Top and Bottom Connector This connector can connect to statement blocks with a top connector effectively joining the group of statement blocks. With the bottom connector, it allows more statement blocks to join the group. Statement Output Top Connector This connector can connect to statement blocks with the bottom connector effectively joining the group of statement blocks. Having no bottom connector, it is not possible to connect another block below this signifying the end of actions performed by the group.","title":"Block Output Types"},{"location":"Mates%20Studio/mates-studio-blocks-editor/#blocks-classification","text":"These blocks can be classified depending on their output type . In terms of output, blocks can be classified as a function block, a value block or a statement block. Function Block These are blocks with no output connector. This type of blocks helps organize the workspace by simplifying repeated multi-block actions. Value Block These blocks provides a left output connector. This type of blocks provides a value to a parent block that will be used to perform the desired action. Statement Block These blocks provides the top connector and, optionally, the bottom output. This type if blocks can be connected together to group actions to be performed by a parent block with a statement input connector.","title":"Blocks Classification"},{"location":"Mates%20Studio/mates-studio-blocks-editor/#mates-blocks","text":"The Mates category includes blocks that directly interact and control the screen. This include backlight, page, widget and touch related blocks.","title":"Mates Blocks"},{"location":"Mates%20Studio/mates-studio-blocks-editor/#main-application","text":"All Builder project starts with the main application block. It provides two statement inputs named setup and loop. Input Type Description setup statement allows developers to perform tasks at the beginning of the program which is during boot or immediately after a reset loop statement allows developers to perform tasks indefinitely after performing the necessary setup","title":"Main Application"},{"location":"Mates%20Studio/mates-studio-blocks-editor/#graphics-blocks","text":"This group contains blocks used for backlight, page and widget control and query.","title":"Graphics Blocks"},{"location":"Mates%20Studio/mates-studio-blocks-editor/#set-backlight-level","text":"This block sets the backlight level of the display module. Input Type Description level value intensity of backlight, must be between 0 and 15 Example Set Backlight to Integer Value Set Backlight to Variable Value","title":"Set Backlight Level"},{"location":"Mates%20Studio/mates-studio-blocks-editor/#set-page","text":"This block changes the project to the selected page. The page dropdown input lists all pages included in the project. Input Type Description page value target page to change into Example Set Page to Existing Page Set Page to Variable Value","title":"Set Page"},{"location":"Mates%20Studio/mates-studio-blocks-editor/#get-page-index","text":"This block can be used to query the current page of the running project. Return Selected page","title":"Get Page Index"},{"location":"Mates%20Studio/mates-studio-blocks-editor/#get-current-page","text":"This block can be used to query the current page of the running project. Return Active page Example: Evaluate Page","title":"Get Current Page"},{"location":"Mates%20Studio/mates-studio-blocks-editor/#get-number-of-pages","text":"This block can be used to check the number of pages included in the project. Return Number of pages in project Example: Increment Page and Loop to Page0","title":"Get Number of Pages"},{"location":"Mates%20Studio/mates-studio-blocks-editor/#set-widget-value","text":"This block changes the value of the selected widget. The widget dropdown input lists all applicable widgets. Input Type Description widget dropdown the target widget value value the value the target widget will be set to Example Set Gauge to Integer Value Set Gauge to Variable Value Set Gauge to Slider Value Note It is recommended to simply link values of widgets by setting their properties as discussed here .","title":"Set Widget Value"},{"location":"Mates%20Studio/mates-studio-blocks-editor/#get-widget-value","text":"This block queries the value of the selected widget. The widget dropdown input lists all applicable widgets. Input Type Description widget dropdown the target widget Return Value of the target widget Example Store Slider Value Set Gauge to Slider Value Note It is recommended to simply link values of widgets by setting their properties as discussed here .","title":"Get Widget Value"},{"location":"Mates%20Studio/mates-studio-blocks-editor/#set-spectrum-column-value","text":"This block changes the value of the selected column of the target spectrum. The spectrum dropdown input lists all Spectrum widgets in the project. Input Type Description column value the target column index, must be less than number of columns of the target spectrum Spectrum dropdown the target Spectrum widget value value the value the target column will be set to","title":"Set Spectrum Column Value"},{"location":"Mates%20Studio/mates-studio-blocks-editor/#update-textarea","text":"This block updates the target TextArea. The TextArea dropdown input lists all TextArea widgets in the project. Input Type Description TextArea dropdown the target TextArea widget format dropdown the formatting to use when writing the value value value the value to update the DotMatrix with","title":"Update TextArea"},{"location":"Mates%20Studio/mates-studio-blocks-editor/#update-dotmatrix","text":"This block updates the target DotMatrix. The DotMatrix dropdown input lists all DotMatrix widgets in the project. Input Type Description DotMatrix dropdown the target DotMatrix widget format dropdown the formatting to use when writing the value value value the value to update the DotMatrix with","title":"Update DotMatrix"},{"location":"Mates%20Studio/mates-studio-blocks-editor/#clear-printarea","text":"This block clears the target PrintArea. The PrintArea dropdown input lists all PrintArea widgets in the project. Input Type Description PrintArea dropdown the target PrintArea widget","title":"Clear PrintArea"},{"location":"Mates%20Studio/mates-studio-blocks-editor/#set-printarea-color","text":"This block sets a new color for the target PrintArea to use. The PrintArea dropdown input lists all PrintArea widgets in the project. Input Type Description PrintArea dropdown the target PrintArea widget color value the new color value to use when appending to the target PrintArea","title":"Set PrintArea Color"},{"location":"Mates%20Studio/mates-studio-blocks-editor/#append-to-printarea","text":"This block appends the specified value to the target PrintArea. The PrintArea dropdown input lists all ASCII type PrintArea widgets in the project. Input Type Description format dropdown the formatting to use when writing the value value value the value to update the PrintArea with PrintArea dropdown the target PrintArea widget","title":"Append to PrintArea"},{"location":"Mates%20Studio/mates-studio-blocks-editor/#append-bytes-to-printarea","text":"This block appends the specified array to the target PrintArea. The PrintArea dropdown input lists all HEX type PrintArea widgets in the project while the array dropdown lists all variables in the project. Input Type Description count integer the number of bytes to write from the array array dropdown a variable with an array of values to update the PrintArea with PrintArea dropdown the target PrintArea widget Note A variable array is automatically created if it doesn't exist. Ensure that the variable selected is initialized as an array using the Create Array block.","title":"Append Bytes to PrintArea"},{"location":"Mates%20Studio/mates-studio-blocks-editor/#append-values-to-scope","text":"This block appends the specified array to the target Scope. The Scope dropdown input lists all Scope widgets in the project while the array dropdown lists all variables in the project. Input Type Description count integer the number of values to write from the array array dropdown a variable with an array of values to update the Scope with Scope dropdown the target Scope widget Note A variable array is automatically created if it doesn't exist. Ensure that the variable selected is initialized as an array using the Create Array block.","title":"Append Values to Scope"},{"location":"Mates%20Studio/mates-studio-blocks-editor/#touch-input-blocks","text":"Touch input blocks are only available for BBM modules with a touchscreen interface.","title":"Touch Input Blocks"},{"location":"Mates%20Studio/mates-studio-blocks-editor/#get-event-button-id","text":"This block provides a selection of all buttons recording an event. This is useful when evaluating the recorded button events. The button dropdown input lists all Momentary and Grouped button widgets in the project. Input Type Description button dropdown the momentary or grouped button Return ID of the selected button","title":"Get Event Button ID"},{"location":"Mates%20Studio/mates-studio-blocks-editor/#get-number-of-recorded-button-events","text":"This block can be used to query the number of unread recorded button events. Return Number of unread button events","title":"Get Number of Recorded Button Events"},{"location":"Mates%20Studio/mates-studio-blocks-editor/#get-next-button-event","text":"This block can be used to read/query the source of the next recorded button event. Return ID of the source button","title":"Get Next Button Event"},{"location":"Mates%20Studio/mates-studio-blocks-editor/#get-number-of-recorded-swipe-events","text":"This block can be used to query the number of unread recorded swipe events. Return Number of unread swipe events","title":"Get Number of Recorded Swipe Events"},{"location":"Mates%20Studio/mates-studio-blocks-editor/#get-next-swipe-event","text":"This block can be used to read the value of the next recorded swipe event. Return Value of the swipe event Note This value needs to be stored in a variable and evaluated using Evaluate Horizontal Swipe or Evaluate Vertical Swipe blocks.","title":"Get Next Swipe Event"},{"location":"Mates%20Studio/mates-studio-blocks-editor/#utility-blocks","text":"This group provides useful blocks for designing program flow (conditions, loops, etc.), basic computation and value assignments.","title":"Utility Blocks"},{"location":"Mates%20Studio/mates-studio-blocks-editor/#logic-blocks","text":"","title":"Logic Blocks"},{"location":"Mates%20Studio/mates-studio-blocks-editor/#logical-comparison","text":"This allows developers to create comparisons which is typically used as test conditions that can be evaluated by other blocks. Available comparisons are as shown. Input Type Description a value left side value for the comparison operator dropdown equality operators for testing the two values b value right side value for the comparison Return Result of the comparison, true or false Example Evaluate Value of Variable Compare Two Variables Store Result","title":"Logical Comparison"},{"location":"Mates%20Studio/mates-studio-blocks-editor/#logical-operations","text":"This allows developers to combine multiple Logical Comparisons . This can be nested as multiple Logical Operation blocks. This is also typically used as test conditions that can be evaluated by other blocks. Available operations are as shown. Input Type Description a value left side value for the operation operator dropdown logical operators for joining the two values b value right side value for the operation Return Result of the operation, true or false Example Check if Both are True Check if Any is True Store Result","title":"Logical Operations"},{"location":"Mates%20Studio/mates-studio-blocks-editor/#logical-negate","text":"This allows developers to invert the output of Logical Comparisons and Logical Operations and is also typically used as test conditions that can be evaluated by other blocks. Input Type Description condition value the condition to evaluate and negate Return Negated value of the test condition Example Negate Variable Negate Logical Comparison Store Result","title":"Logical Negate"},{"location":"Mates%20Studio/mates-studio-blocks-editor/#logical-ternary-operation","text":"This allows developers to evaluate the output of Logical Comparisons and Logical Operations and return a value depending on the truthfulness of the test condition. Input Type Description test value the condition to evaluate true value the return value if condition is true false value the return value if condition is false Return The evaluated return value Example Test Variable Test Logical Comparison Store Result","title":"Logical Ternary Operation"},{"location":"Mates%20Studio/mates-studio-blocks-editor/#conditional-if-else","text":"This allows developers to evaluate test conditions that will be evaluated to select which group of tasks to perform. Test conditions are usually created using the Logical Comparison block. The block can be configured to add multiple test conditions ( else if ) and a default ( else ) condition which is triggered when none of the specified test conditions are met. Input Type Description condition value condition to evaluate before performing tasks do statement all the tasks to perform if condition is true Note Number of condition and do inputs increases depending on configuration","title":"Conditional If-Else"},{"location":"Mates%20Studio/mates-studio-blocks-editor/#evaluate-horizontal-swipe","text":"This block evaluates the selected variable for the horizontal direction of swipe. The variable must be previously set to the Get Next Swipe Event block. Developers can use this to perform different tasks depending on whether the screen is swiped going left or right. Input Type Description variable dropdown the variable to evaluate for the swipe direction right statement all the tasks to perform if the swipe event is from left to right left statement all the tasks to perform if the swipe event is from right to left Note This block is only available for BBM modules with a touchscreen interface. A variable swipe is created automatically if it doesn't exist.","title":"Evaluate Horizontal Swipe"},{"location":"Mates%20Studio/mates-studio-blocks-editor/#evaluate-vertical-swipe","text":"This block evaluates the selected variable for the horizontal direction of swipe. The variable must be previously set to the Get Next Swipe Event block. Developers can use this to perform different tasks depending on whether the screen is swiped going up or down. Input Type Description variable dropdown the variable to evaluate for the swipe direction up statement all the tasks to perform if the swipe event is upwards down statement all the tasks to perform if the swipe event is downwards Note This block is only available for BBM modules with a touchscreen interface. A variable swipe is created automatically if it doesn't exist.","title":"Evaluate Vertical Swipe"},{"location":"Mates%20Studio/mates-studio-blocks-editor/#loops-blocks","text":"","title":"Loops Blocks"},{"location":"Mates%20Studio/mates-studio-blocks-editor/#repeat-count","text":"","title":"Repeat Count"},{"location":"Mates%20Studio/mates-studio-blocks-editor/#repeat-while-or-until","text":"","title":"Repeat While or Until"},{"location":"Mates%20Studio/mates-studio-blocks-editor/#count-with-variable","text":"Note A variable i is created automatically if it doesn't exist.","title":"Count with Variable"},{"location":"Mates%20Studio/mates-studio-blocks-editor/#break-or-continue","text":"","title":"Break or Continue"},{"location":"Mates%20Studio/mates-studio-blocks-editor/#math-blocks","text":"","title":"Math Blocks"},{"location":"Mates%20Studio/mates-studio-blocks-editor/#text-blocks","text":"","title":"Text Blocks"},{"location":"Mates%20Studio/mates-studio-blocks-editor/#arrays-blocks","text":"","title":"Arrays Blocks"},{"location":"Mates%20Studio/mates-studio-blocks-editor/#create-array","text":"","title":"Create Array"},{"location":"Mates%20Studio/mates-studio-blocks-editor/#color-blocks","text":"","title":"Color Blocks"},{"location":"Mates%20Studio/mates-studio-blocks-editor/#system-blocks","text":"This group provides useful blocks allowing developers to utilize additional hardware features available for the BBM module.","title":"System Blocks"},{"location":"Mates%20Studio/mates-studio-blocks-editor/#gpio-blocks","text":"","title":"GPIO Blocks"},{"location":"Mates%20Studio/mates-studio-blocks-editor/#timers-blocks","text":"","title":"Timers Blocks"},{"location":"Mates%20Studio/mates-studio-blocks-editor/#serial-blocks","text":"","title":"Serial Blocks"},{"location":"Mates%20Studio/mates-studio-blocks-editor/#i2c-blocks","text":"","title":"I2C Blocks"},{"location":"Mates%20Studio/mates-studio-blocks-editor/#1-wire-blocks","text":"","title":"1-Wire Blocks"},{"location":"Mates%20Studio/mates-studio-blocks-editor/#dynamic-blocks","text":"Dynamic blocks can be created multiple times. These can be used to further expand and provide more freedom in project development.","title":"Dynamic Blocks"},{"location":"Mates%20Studio/mates-studio-blocks-editor/#variables","text":"Variables are key components in text programming. The builder environment allows creation of global variables. Once a variable is created, setter, getter and change blocks are generated. A setter block allows the variable to be set while a getter block queries the value of the variable. A variable change block can be used to increase or decrease the value of the variable. All of these blocks provides a dropdown selector listing the available variables. From the dropdown selector, several actions can be performed including selection, renaming and deletion of the variables. A variable can be created by going to the Variables category and clicking the Create variable button. This will open a prompt requesting a new variable name. Alternatively, some blocks generate variables it requires. Create Function blocks generate their inputs as new variables if these don't exist. Other blocks that behave this way are blocks with variable dropdown which defaults to a specific variable name, in case the variable doesn't exist yet.","title":"Variables"},{"location":"Mates%20Studio/mates-studio-blocks-editor/#set-variable","text":"This blocks allows developers to set the value of the selected variable. Input Type Description variable dropdown the target variable to set value value the value to set the variable to","title":"Set Variable"},{"location":"Mates%20Studio/mates-studio-blocks-editor/#get-variable","text":"This blocks allows developers to query the current value of the selected variable. Input Type Description variable dropdown the target variable to query Return Value of the variable","title":"Get Variable"},{"location":"Mates%20Studio/mates-studio-blocks-editor/#change-variable-by-value","text":"This blocks allows developers to change the value of the selected variable by the value specified. Input Type Description variable dropdown the target variable to change value value the value to change the variable by","title":"Change Variable by Value"},{"location":"Mates%20Studio/mates-studio-blocks-editor/#functions","text":"Functions are another useful feature from text-based programming. Like in text programming, the builder environment provided block functions allowing developers to simplify repeated actions by grouping the blocks together and allowing these group of actions to be called and performed using a single block.","title":"Functions"},{"location":"Mates%20Studio/mates-studio-blocks-editor/#create-function-without-return-input","text":"This allows developers to group blocks to perform every time the function is called. Functions can be configured to take one or more value inputs by clicking the gear icon of the block to edit the configuration. The configure function inputs are also added as global variables. Input Type Description name text unique name to identify the function actions statement all the actions to be performed by the function when called","title":"Create Function without Return Input"},{"location":"Mates%20Studio/mates-studio-blocks-editor/#create-function-with-return-input","text":"This allows developers to group blocks to perform every time the function is called. It also provides a return value input. This is useful when performing reads or computations. Functions can be configured to take one or more value inputs by clicking the gear icon of the block to edit the configuration. The configure function inputs are also added as global variables. Input Type Description name text unique name to identify the function actions statement all the tasks to be performed by the function when called return value the output value of the function after executing all tasks","title":"Create Function with Return Input"},{"location":"Mates%20Studio/mates-studio-blocks-editor/#function-return","text":"This block can be used to exit a function if a certain condition is met. Depending on the type of function, with or without return input, this block will automatically transform as required If used in a function with no return input, this block transforms to suitable block as shown. Notice that the value input is removed. If used in a function with a return input, this block reverts to its original state. Notice that the value input is added. Input Type Description condition value the condition to check for evaluating returns return value the output value of the function (if applicable)","title":"Function Return"},{"location":"Mates%20Studio/mates-studio-blocks-editor/#call-function","text":"This block calls the function of the same name. This is available after a function with no return input is created. This may have one or more value inputs depending on the configuration of the function.","title":"Call Function"},{"location":"Mates%20Studio/mates-studio-blocks-editor/#call-function-and-return-value","text":"This block calls the function of the same name and returns the output value. This is available after a function with return input is created. This may have one or more value inputs depending on the configuration of the function. Return Output of the function","title":"Call Function and Return Value"},{"location":"Mates%20Studio/mates-studio-code-editor/","tags":["Genius"],"text":"Mates Studio Code Editor","title":"Code Editor"},{"location":"Mates%20Studio/mates-studio-code-editor/#mates-studio-code-editor","text":"","title":"Mates Studio Code Editor"},{"location":"Mates%20Studio/mates-studio-commander-editor/","tags":["Commander"],"text":"Mates Studio Commander Editor Introduction Mates Studio's Commander is the simplest among all the environments. Providing a simple user interface for simply adding predesigned pages to the project, it allows project development to finish within seconds. It also provides a quick discussion of each page added and all the widgets it contains making it a perfect choice for those who are just starting with BBM products. Commander environment offers two main parts, a project editor and a host simulator . This manual will focus on the project editor including how to add built-in and custom pages and checking a short documentation for the page. User Interface The Commander Editor can be divided into two separate columns. Project Editor This provides a simple way to add or remove pages to the project Page Discussion This area displays a short summary discussion for all the widgets present in the selected page Project Editor Adding Pages Removing Pages Page Discussion","title":"Commander Editor"},{"location":"Mates%20Studio/mates-studio-commander-editor/#mates-studio-commander-editor","text":"","title":"Mates Studio Commander Editor"},{"location":"Mates%20Studio/mates-studio-commander-editor/#introduction","text":"Mates Studio's Commander is the simplest among all the environments. Providing a simple user interface for simply adding predesigned pages to the project, it allows project development to finish within seconds. It also provides a quick discussion of each page added and all the widgets it contains making it a perfect choice for those who are just starting with BBM products. Commander environment offers two main parts, a project editor and a host simulator . This manual will focus on the project editor including how to add built-in and custom pages and checking a short documentation for the page.","title":"Introduction"},{"location":"Mates%20Studio/mates-studio-commander-editor/#user-interface","text":"The Commander Editor can be divided into two separate columns. Project Editor This provides a simple way to add or remove pages to the project Page Discussion This area displays a short summary discussion for all the widgets present in the selected page","title":"User Interface"},{"location":"Mates%20Studio/mates-studio-commander-editor/#project-editor","text":"","title":"Project Editor"},{"location":"Mates%20Studio/mates-studio-commander-editor/#adding-pages","text":"","title":"Adding Pages"},{"location":"Mates%20Studio/mates-studio-commander-editor/#removing-pages","text":"","title":"Removing Pages"},{"location":"Mates%20Studio/mates-studio-commander-editor/#page-discussion","text":"","title":"Page Discussion"},{"location":"Mates%20Studio/mates-studio-graphics-editor/","tags":["Architect","Genius","Builder"],"text":"Mates Studio Graphics Editor Introduction Mates Studio provides a graphics editor for its Architect, Genius and Builder environments. This provides the ability to create custom page designs using various widgets supported by the BBM display modules. The interface is composed a graphics toolbar and three main editor tools. Page Selection Provides a simple interface to add pages and select a page for editing. Visual Editor Provides a drag-n-drop interface for selecting and positioning widgets. Property Editor Provides an editable property table for editing page and widget parameters Graphics Toolbar The graphics toolbar provides buttons and dropdown menus for managing pages and widgets. From left to right, the toolbar items are described in the table below: Item Description Copy Page Copies the selected page for pasting Paste Page Pastes the recently copied page to the current project Capture Page Saves a snapshot of the selected page as an image file Delete Page Deletes the selected page Add Widget Opens a Select Widget window Copy Widget Copies the selected widget for pasting Cut Widget Copies the selected widget for moving to another page Paste Widget Pastes the recently copied widget Delete Widget Deletes the selected widget Load Configuration Loads a widget or page configuration file Save Configuration Saves the selected a widget or page as a configuration file Paste Code Pastes a code snippet for the widget/page in the current cursor position in the text editor Page/Widget Select Lists the page and the widgets in the selected page for selection Page Selection Adding a Blank Page Adding a Page from Template Visual Editor Add from Selection Add from Template Property Editor Graphics Editor Widgets Mates Widgets Compatibility The table below lists the available widgets that applies to setWidgetValue, getWidgetValue, setWidgetParam and getWidgetParam functions. Widget Value MATES_LED 0 MATES_RULER_GAUGE 1 MATES_ANGULAR_METER 2 MATES_GAUGE_A 3 MATES_GAUGE_B 4 MATES_LED_DIGITS 5 MATES_LABELS 6 MATES_BUTTON_A 32 MATES_SWITCH_A 33 MATES_SLIDER_B 34 MATES_KNOB 35 MATES_MEDIA_LED 64 MATES_MEDIA_COLOR_LED 65 MATES_GAUGE_C 66 MATES_GAUGE_D 67 MATES_GAUGE_E 68 MATES_GAUGE_F 69 MATES_MEDIA_GAUGE_A 70 MATES_MEDIA_GAUGE_B 71 MATES_MEDIA_GAUGE_C 72 MATES_MEDIA_GAUGE_D 73 MATES_MEDIA_THERMOMETER 74 MATES_LED_SPECTRUM 75 MATES_MEDIA_SPECTRUM 76 MATES_SCOPE 77 MATES_SYMBOLS 78 MATES_ROTARY_GAUGE 79 MATES_BUTTON_B 96 MATES_SWITCH_B 97 MATES_MEDIA_BUTTON 98 MATES_SLIDER_A 99 MATES_SLIDER_C 100 MATES_SLIDER_D 101 MATES_SLIDER_E 102 MATES_SLIDER_F 103 MATES_MEDIA_SLIDER 104 MATES_MEDIA_ROTARY 105 MATES_SLIDE_SHOW 128 MATES_ANIMATION 129 MATES_FANCY_LED_A 130 MATES_FANCY_LED_B 131 MATES_FANCY_BUTTON_A 160 MATES_FANCY_BUTTON_B 161 Note: Some widgets available in Mates Studio behaves differently than majority of the widgets. Such widgets doesn't apply for the common set and get widget value and parameter functions.","title":"Graphics Editor"},{"location":"Mates%20Studio/mates-studio-graphics-editor/#mates-studio-graphics-editor","text":"","title":"Mates Studio Graphics Editor"},{"location":"Mates%20Studio/mates-studio-graphics-editor/#introduction","text":"Mates Studio provides a graphics editor for its Architect, Genius and Builder environments. This provides the ability to create custom page designs using various widgets supported by the BBM display modules. The interface is composed a graphics toolbar and three main editor tools. Page Selection Provides a simple interface to add pages and select a page for editing. Visual Editor Provides a drag-n-drop interface for selecting and positioning widgets. Property Editor Provides an editable property table for editing page and widget parameters","title":"Introduction"},{"location":"Mates%20Studio/mates-studio-graphics-editor/#graphics-toolbar","text":"The graphics toolbar provides buttons and dropdown menus for managing pages and widgets. From left to right, the toolbar items are described in the table below: Item Description Copy Page Copies the selected page for pasting Paste Page Pastes the recently copied page to the current project Capture Page Saves a snapshot of the selected page as an image file Delete Page Deletes the selected page Add Widget Opens a Select Widget window Copy Widget Copies the selected widget for pasting Cut Widget Copies the selected widget for moving to another page Paste Widget Pastes the recently copied widget Delete Widget Deletes the selected widget Load Configuration Loads a widget or page configuration file Save Configuration Saves the selected a widget or page as a configuration file Paste Code Pastes a code snippet for the widget/page in the current cursor position in the text editor Page/Widget Select Lists the page and the widgets in the selected page for selection","title":"Graphics Toolbar"},{"location":"Mates%20Studio/mates-studio-graphics-editor/#page-selection","text":"","title":"Page Selection"},{"location":"Mates%20Studio/mates-studio-graphics-editor/#adding-a-blank-page","text":"","title":"Adding a Blank Page"},{"location":"Mates%20Studio/mates-studio-graphics-editor/#adding-a-page-from-template","text":"","title":"Adding a Page from Template"},{"location":"Mates%20Studio/mates-studio-graphics-editor/#visual-editor","text":"","title":"Visual Editor"},{"location":"Mates%20Studio/mates-studio-graphics-editor/#add-from-selection","text":"","title":"Add from Selection"},{"location":"Mates%20Studio/mates-studio-graphics-editor/#add-from-template","text":"","title":"Add from Template"},{"location":"Mates%20Studio/mates-studio-graphics-editor/#property-editor","text":"","title":"Property Editor"},{"location":"Mates%20Studio/mates-studio-graphics-editor/#graphics-editor-widgets","text":"","title":"Graphics Editor Widgets"},{"location":"Mates%20Studio/mates-studio-graphics-editor/#mates-widgets-compatibility","text":"The table below lists the available widgets that applies to setWidgetValue, getWidgetValue, setWidgetParam and getWidgetParam functions. Widget Value MATES_LED 0 MATES_RULER_GAUGE 1 MATES_ANGULAR_METER 2 MATES_GAUGE_A 3 MATES_GAUGE_B 4 MATES_LED_DIGITS 5 MATES_LABELS 6 MATES_BUTTON_A 32 MATES_SWITCH_A 33 MATES_SLIDER_B 34 MATES_KNOB 35 MATES_MEDIA_LED 64 MATES_MEDIA_COLOR_LED 65 MATES_GAUGE_C 66 MATES_GAUGE_D 67 MATES_GAUGE_E 68 MATES_GAUGE_F 69 MATES_MEDIA_GAUGE_A 70 MATES_MEDIA_GAUGE_B 71 MATES_MEDIA_GAUGE_C 72 MATES_MEDIA_GAUGE_D 73 MATES_MEDIA_THERMOMETER 74 MATES_LED_SPECTRUM 75 MATES_MEDIA_SPECTRUM 76 MATES_SCOPE 77 MATES_SYMBOLS 78 MATES_ROTARY_GAUGE 79 MATES_BUTTON_B 96 MATES_SWITCH_B 97 MATES_MEDIA_BUTTON 98 MATES_SLIDER_A 99 MATES_SLIDER_C 100 MATES_SLIDER_D 101 MATES_SLIDER_E 102 MATES_SLIDER_F 103 MATES_MEDIA_SLIDER 104 MATES_MEDIA_ROTARY 105 MATES_SLIDE_SHOW 128 MATES_ANIMATION 129 MATES_FANCY_LED_A 130 MATES_FANCY_LED_B 131 MATES_FANCY_BUTTON_A 160 MATES_FANCY_BUTTON_B 161 Note: Some widgets available in Mates Studio behaves differently than majority of the widgets. Such widgets doesn't apply for the common set and get widget value and parameter functions.","title":"Mates Widgets Compatibility"},{"location":"datasheets/","text":"Breadboard Mates Datasheets","title":"Breadboard Mates Datasheets"},{"location":"datasheets/#breadboard-mates-datasheets","text":"","title":"Breadboard Mates Datasheets"},{"location":"datasheets/matesbus-datasheet/","tags":["MatesBUS"],"text":"Datasheet: MatesBUS","title":"MatesBUS"},{"location":"datasheets/matesbus-datasheet/#datasheet-matesbus","text":"","title":"Datasheet: MatesBUS"},{"location":"datasheets/accessories/bbm-mb-adaptor-datasheet/","tags":["MikroBUS"],"text":"Datasheet: MB Adaptor","title":"MB Adaptor"},{"location":"datasheets/accessories/bbm-mb-adaptor-datasheet/#datasheet-mb-adaptor","text":"","title":"Datasheet: MB Adaptor"},{"location":"datasheets/accessories/bbm-pi-adaptor-datasheet/","tags":["Raspberry Pi"],"text":"Datasheet: Pi Adaptor","title":"Pi Adaptor"},{"location":"datasheets/accessories/bbm-pi-adaptor-datasheet/#datasheet-pi-adaptor","text":"","title":"Datasheet: Pi Adaptor"},{"location":"datasheets/accessories/bbm-programmer-datasheet/","tags":["BBM Programmer"],"text":"Datasheet: BBM Programmer","title":"Mates Programmer"},{"location":"datasheets/accessories/bbm-programmer-datasheet/#datasheet-bbm-programmer","text":"","title":"Datasheet: BBM Programmer"},{"location":"datasheets/accessories/bbm-wing-adaptor-datasheet/","tags":["Feather"],"text":"Datasheet: Wing Adaptor","title":"Wing Adaptor"},{"location":"datasheets/accessories/bbm-wing-adaptor-datasheet/#datasheet-wing-adaptor","text":"","title":"Datasheet: Wing Adaptor"},{"location":"datasheets/reptor/reptor-250-datasheet/","tags":["REPTOR","REPTOR-250"],"text":"Datasheet: REPTOR-250","title":"REPTOR-250"},{"location":"datasheets/reptor/reptor-250-datasheet/#datasheet-reptor-250","text":"","title":"Datasheet: REPTOR-250"},{"location":"datasheets/ted/ted-130-datasheet/","tags":["TED","TED-130"],"text":"Datasheet: TED-130","title":"TED-130"},{"location":"datasheets/ted/ted-130-datasheet/#datasheet-ted-130","text":"","title":"Datasheet: TED-130"},{"location":"datasheets/ted/ted-96-datasheet/","tags":["TED","TED-96"],"text":"Datasheet: TED-96","title":"TED-96"},{"location":"datasheets/ted/ted-96-datasheet/#datasheet-ted-96","text":"","title":"Datasheet: TED-96"},{"location":"datasheets/timi/timi-130-datasheet/","tags":["TIMI","TIMI-130"],"text":"Datasheet: TIMI-130 Introduction TIMI-130, the larger brother to the original TIMI-96 (aka TIMI), is a unique breadboard compatible display development module, aimed to speed up and reinvent the way electronic testing, development and projects are carried out, in either stand alone, host interfaced, PC tethered, or educational settings. TIMI-130 is a 1.3\u201d TFT IPS LCD display module that is driven directly by a PIXXI-28 graphics processor from 4D Labs. It features a unique MatesBus interface, which is simple to use in both breadboard applications, as well as on adaptors or directly into developed products. TIMI-130 was created as a flexible design aid, primarily to simulate components readouts and meters, which would otherwise be cumbersome or demanding on hardware resources for breadboard or electronic development. Simulating component readouts allows accelerated development and retains the often-limited GPIO hardware associated with many developments. TIMI-130 was designed for engineers, hobbyists, and students, from beginner to advanced levels, designed to make breadboarding or project development, easier. Product Features TIMI\u2019s main interface is a 3.3V level Asynchronous Serial UART and features 3 GPIO which can be used as Digital or Analog inputs, Digital Outputs, Master I2C Communication or PWM Audio output. These interfaces arm TIMI with resources to be either a stand-alone controller, a Host driven slave, or a tethered test instrument, while being capable of interfacing and powering external devices itself. Powered by 4D Labs Pixxi-28 Graphics Processor 240(W)x240(H) resolution TFT IPS LCD, non-touch 3.3V (5V tolerant) Serial UART interface, capable 300 to 2187500 Baud Master I2C (3.3V level) interface bus 3 GPIO (3.3V level), 2 capable of Analog or I2C, 1 capable of PWM Audio 32MB of External SPI Flash Memory 32KB of Processor Flash Memory 14KB of Processor SRAM for User Variables Single supply 5V power input (*3.3V possible \u2013 See \u2018System Pins\u2019 Section) Dedicated 3.3V 500mA power output for User Standard 0.1\u201d (2.54mm) pitch male pin headers, breadboard compatible RoHS and REACH compliant PCB is UL 94V-0 Flammability Rated Weight approx. 8.0 grams Hardware Detail TIMI-130 utilizes the BBM MatesBus, which is a unique interface pinout designed to be simple and easy to use. The MatesBus is made up of 2 rows of 5 pins, 0.1\u201d (2.54mm) pitch, spaced 0.3\u201d (7.62mm) apart, ideal for direct plug into a breadboard, or compatible adaptor or development board. While the TIMI-130 can be orientated in any of its 4 positions, Portrait, Landscape, Portrait Reversed and Landscape Reversed, its natural position forms an upside-down \u2018T\u2019 shape and is designed to interface with the bottom of a breadboard, sitting closest to the User, leaving the top part of the breadboard free for components and wiring. Pin Configuration The TIMI-130 MatesBus has 10 physical pins, 5 on each side of the interface neck, and are spaced apart to easy connect onto a breadboard. The H2 Header doubles as a programming interface and features Power and Serial UART, while the H1 Header features Power Output and 3 GPIO (General Purpose IO). User I/O \u2013 Dual 5 way headers (H1 + H2) Header/Pin Symbol I/O Type Description Header1\u20131 GND Power Module / System GND Header1\u20132 IO3 I/O GPIO capable of Digital, PWM Audio Out (3.3V Level) Header1\u20133 IO2 I/O/A GPIO capable of Digital, Analog, I2C SDA (3.3V Level) Header1\u20134 IO1 I/O/A GPIO capable of Digital, Analog, I2C SCL (3.3V Level) Header1\u20135 3V3 OUT Power 3.3V 500mA Power Output for User Header2\u20131 RESET I System Reset, Active Low Header2\u20132 GND Power Module / System GND Header2\u20133 RX I Asynchronous Serial UART Receive Pin (3.3V, 5V Tolerant) Header2\u20134 TX O Asynchronous Serial UART Transmit Pin (3.3V Level) Header2\u20135 5V Power Module 5V Input, Main Power Hardware Interfaces The TIMI-130 has hardware peripherals configured for interfacing with other external devices \u2013 general purpose digital input/output, analog input, UART, PWM and I2C. System Pins +5V (Device Supply Voltage) Display supply voltage pin. This pin should be connected to a stable supply voltage in the range of 4.0 Volts to 5.5 Volts DC. Nominal operating voltage is 5.0 Volts for optimal display performance. Note If absolutely required, 3.3V can be applied to the +5V input, and the module will operate correctly, but with a lower backlight brightness. For this reason, it is not a recommended configuration, but for systems without 5V it enables compatibility. Note the 3.3V regulators will be passing the input voltage and not regulating themselves, so ensure you are using a clean power supply input. 3V3 (Device Output Voltage) 3.3V Output of the user dedicated voltage regulator. Capable of approximately 500mA, for external use by the User to power circuits/devices. This is an OUTPUT only, and is not the same regulator as the main system. GND (Module Ground) Device ground pin. This pin must be connected to system ground. RESET (Module Master Reset) Device Master Reset pin. An active low pulse of greater than 2 microseconds will reset the device. Ideally use an open collector type circuit to reset the device if an external reset is required. Alternatively connect it to a GPIO from a host and drive the pin Low to reset and set the pin High (3.3V) to return to run. This pin is not driven low by any internal conditions but is pulled high with a pull up resistor on the TIMI-96 module itself. The pins primary use is for programming TIMI-96 and is required by the BBM Programmer for loading Firmware/PmmC and applications. General Purpose I/O The TIMI-96 has three general purpose input/output (GPIO) pins available. GPIO pins IO1, IO2 and IO3 can be individually set as a digital input or output. The pin mode of all the pins at power-up or reset is input by default. When set as digital inputs, the pins are 3.3V tolerant. These are not 5V tolerant and must not be connected directly to 5V devices outputs or 5V sources. When set as digital outputs, the pins output at 3.3V levels. Digital GPIO pins can source/sink 15 mA. GPIO pins IO1 and IO2 can also serve as analog input pins. The pin mode of all the pins at power-up or reset is input by default. The analog input pins have a range of 0 to 3.3V, each having a maximum 12-bit resolution. Do not exceed the maximal permissible input voltage on these GPIO. Serial Ports \u2013 TTL Level Serial The PIXXI-28 Processor has a single hardware asynchronous serial port with fixed pins TX/RX. The PIXXI-28\u2019s serial port can be used to communicate with external serial devices and is also used for programming the PIXXI-28 itself. The primary features are: Full-Duplex 8-bit data transmission and reception. Data format: 8-bits, No Parity, 1 Stop bit. Independent Baud rates from 300 baud up to 2187500 baud. This serial UART is also the programming interface for User program downloads. Once the compiled application is downloaded and the user code starts executing, the serial port is then available to the user application. TX pin (Serial Transmit) Dedicated Asynchronous Serial port transmit pin, TX. Connect this pin to external serial device receive (RX) signal. This pin outputs at 3.3V levels. RX pin (Serial Receive) Dedicated Asynchronous Serial port receive pin, RX. Connect this pin to external serial device transmit (TX) signal. This pin is 5.0V tolerant. Note The serial UART output at the level of TTL 3.3V, however is 5V tolerant on the RX pin, so can accept communications from 5V devices. I2C Interface The I2C peripheral operates up to 1 MHz, supporting standard mode, full speed, and fast mode. I2C clock output pin, SCL (IO1). Connect this pin to the SCL pin of an external I2C device. This is 3.3V tolerant only and must not be connected to 5V I2C buses. I2C data input/output pin, SDA (IO2). Connect this pin to the SDA pin of an external I2C device. This is 3.3V tolerant only and must not be connected to 5V I2C buses. No pull-up resistors are provided on TIMI-130, therefore external pull up resistors are required to be added by the User on the Breadboard/Bus. Typical pull up resistors to 3.3V are in the region of 4.7Kohm. Note The TIMI-130 can only function as a Master in an I2C bus, therefore it cannot be an I2C Slave to a Host at this time. PWM Audio Output TIMI-96 is capable of PWM Audio output using GPIO IO3, for connecting to a buzzer, piezo or amplifier/speaker via a filter, and is capable of audio RTTTL tones, frequencies and PWM Audio. Hardware Requirements Hardware Overview TIMI-130 is designed to be used in several ways, but the most basic configurations can be achieved with a TIMI-130 module and a BBM-Programmer, connected to your PC in a tethered configuration (See Programming Hardware section). The TIMI-130 can also be used with various Adaptors and Development Boards which feature a MatesBus interface, or simply into a breadboard directly. The hardware and software requirements for these configurations varies and will be described in documentation associated with those adaptors or boards. What you will need TIMI-130 Module BBM-Programmer MicroUSB Cable (Standard Type A USB to microUSB \u2013 Not included) Windows PC/Laptop running Windows 7 or higher, x86 or x64. ARM is currently not supported at this time. The BBM-Programmer does not come with the microUSB cable, this can be purchased from virtually any hardware/computer store. Currently Microsoft Windows is the only supported Operating System for Mates Studio. Announcements will be made when other OS\u2019s will become supported. Optional Hardware These items are not required but will assist development in situations requiring components or other electronics modules. These are not required for direct PC interfacing. Standard or Extended Breadboard 5-pin Right Angle header (2.54mm pitch), included with the BBM-Programmer Jumper wires for interfacing to components and sensors Required Software All software development for the TIMI-130 module utilizes the Mates Studio IDE. The latest version of Mates Studio can be downloaded from the Breadboard Mates website or directly from this link here . Details specific about the Mates Studio IDE can be found in the Mates Studio IDE documentation . Programming Hardware Overview TIMI-130 utilizes a USB to Serial programmer for application and firmware updates, which programs both the Processor Flash memory, along with the on-board SPI Flash memory. The Programmer, dubbed BBM-Prog, is the official BBM Programmer and can also be used for testing and debugging of TIMI applications using the Mates Studio IDE. Detail The BBM-PROG utilizes the Silicon Labs CP2104 USB to UART bridge, and uses the TIMI\u2019s Serial UART to load applications, firmware/PmmC and media content. The BBM-PROG features a 3-pin jumper with shunt, which is present to change the way the programmer handles the Reset line, utilized by TIMI and other devices. TIMI-130 requires the jumper to be positioned like the image above, closest to the 5-way female header. This makes the programmer compatible with programming the 4D Labs Pixxi-28 processor. If the jumper is placed on the 2 pins closest to the USB connector, this will make the programmer compatible with programming Atmel chips, such is used on many of the Arduino boards, or barebone chips. This may also be compatible with other microcontrollers too. Typical Connections Breadboard Interface with Programmer One of the simplest interfaces for TIMI-130 is connecting TIMI-130 to the bottom of a breadboard, connecting the 5-way right angle header into the breadboard next to the H2 header side of TIMI, and attaching the BBM-Programmer to the 5-way header. Breadboard Interface to a Host TIMI-130 can interface to virtually any microcontroller or Host, using a Serial UART interface. Simple wire connections can be achieved directly to TIMI or via a breadboard. If the microcontroller or Host utilizes 3.3V or 5.0V UART, then TIMI can be easily connected. Note Wiring is simplified, showing main wires only. Interface Notes TIMI-130 has a single Serial UART, which is shared for the programming of TIMI-130 from the Mates Studio IDE, but it can also be used to interface to a Host or other device. When programming the TIMI-130, it needs to be isolated from any other circuit that might be connected to the UART. Unplug any UART connections from the RX and TX, and program the TIMI-130 module directly with the Programmer. When programming is complete, connect the UART RX/TX back up to allow communication to the host/device to resume. On some Adaptors/Development boards, a switch or jumper may be offered to isolate the RX pin, allowing only Programming TX signals to reach the TIMI-130\u2019s RX pin, until the switch is changed. This is useful as it means unplugging or unwiring the UART is no longer required when programming TIMI. The same situation applies for Hosts/Development boards which also only have a single UART, as programming them often uses the UART too so they would need to be disconnected from TIMI-130 to program them. Hardware Drawing Hardware Schematic Specifications & Ratings Recommended Operating Conditions Parameter Conditions / Information Min Typ Max Units Operating Temperature -20 \u2014 +70 \u00b0C Storage Temperature -30 \u2014 +80 \u00b0C Humidity (RH) Max 60\u00b0C \u2014 \u2014 90% RH Supply Voltage (VCC) Stable external supply required 4.0 5.0 5.5 V Processor voltage (VP) \u2014 3.3 \u2014 V Input Low Voltage (VIL) all pins GND \u2014 0.2VP V Input High Voltage (VIH) non 5V tolerant pins 0.8VP \u2014 3.3 V Input High Voltage (VIH) 5V Tolerant Pins, (RX pin) 0.8VP \u2014 VCC V Reset Pulse External Open Collector (RESET pin) 1.3 \u2014 \u2014 \u00b5s Operational Delay Power-Up or External Reset 500 \u2014 3000 ms Output Voltage (3V3) Output Voltage for User \u2014 3.3 \u2014 V Output Current Output Current capability for User \u2014 500 \u2014 mA GPIO Current Source / Sink \u2014 \u2014 15 mA Operating Characteristics Parameter Conditions / Information Min Typ Max Unit Supply Current (ICC) 5V Supply \u2013 Normal Operation \u2014 100 \u2014 mA Supply Current (ICC) 5V Supply \u2013 Sleep Mode \u2014 8 \u2014 mA Supply Current (ICC) 5V Supply \u2013 Deep Sleep Mode \u2014 3 \u2014 mA Display Endurance Hours of operation, measured to when display is 50% original brightness 30000 \u2014 \u2014 H LCD Display Information Parameter Conditions / Information Specification Display Type TFT IPS LCD Display Size 0.96\u201d Diagonal Display Resolution 240x240 pixels Display Brightness 5V Supply 400 cd/m2 (typical) Display Contrast Ratio 800:1 (typical) Display Viewing Angles Above, Below, Left and Right of Center 80 Degrees Display Viewing Direction ALL (IPS Display) Display Backlighting White LED Backlighting 2 LED Pixel Pitch 0.0975 x 0.0975mm (Square pixels) Pixel Density Number of pixels in 1 row in 25.4mm 260 DPI/PPI Revision History Document Revision Revision Number Date Description 0.1 10/05/2021 Initial Draft 0.2 11/05/2021 Draft Update 0.3 21/05/2021 Draft Update 0.4 19/07/2021 Formatting Update Addition of Power Draw spec 1.0 28/07/2021 Initial Public Release Hardware Revision Revision Number Date Description 1.0 19/10/2020 Concept Revision \u2013 Internal","title":"TIMI-130"},{"location":"datasheets/timi/timi-130-datasheet/#datasheet-timi-130","text":"","title":"Datasheet: TIMI-130"},{"location":"datasheets/timi/timi-130-datasheet/#introduction","text":"TIMI-130, the larger brother to the original TIMI-96 (aka TIMI), is a unique breadboard compatible display development module, aimed to speed up and reinvent the way electronic testing, development and projects are carried out, in either stand alone, host interfaced, PC tethered, or educational settings. TIMI-130 is a 1.3\u201d TFT IPS LCD display module that is driven directly by a PIXXI-28 graphics processor from 4D Labs. It features a unique MatesBus interface, which is simple to use in both breadboard applications, as well as on adaptors or directly into developed products. TIMI-130 was created as a flexible design aid, primarily to simulate components readouts and meters, which would otherwise be cumbersome or demanding on hardware resources for breadboard or electronic development. Simulating component readouts allows accelerated development and retains the often-limited GPIO hardware associated with many developments. TIMI-130 was designed for engineers, hobbyists, and students, from beginner to advanced levels, designed to make breadboarding or project development, easier.","title":"Introduction"},{"location":"datasheets/timi/timi-130-datasheet/#product-features","text":"TIMI\u2019s main interface is a 3.3V level Asynchronous Serial UART and features 3 GPIO which can be used as Digital or Analog inputs, Digital Outputs, Master I2C Communication or PWM Audio output. These interfaces arm TIMI with resources to be either a stand-alone controller, a Host driven slave, or a tethered test instrument, while being capable of interfacing and powering external devices itself. Powered by 4D Labs Pixxi-28 Graphics Processor 240(W)x240(H) resolution TFT IPS LCD, non-touch 3.3V (5V tolerant) Serial UART interface, capable 300 to 2187500 Baud Master I2C (3.3V level) interface bus 3 GPIO (3.3V level), 2 capable of Analog or I2C, 1 capable of PWM Audio 32MB of External SPI Flash Memory 32KB of Processor Flash Memory 14KB of Processor SRAM for User Variables Single supply 5V power input (*3.3V possible \u2013 See \u2018System Pins\u2019 Section) Dedicated 3.3V 500mA power output for User Standard 0.1\u201d (2.54mm) pitch male pin headers, breadboard compatible RoHS and REACH compliant PCB is UL 94V-0 Flammability Rated Weight approx. 8.0 grams","title":"Product Features"},{"location":"datasheets/timi/timi-130-datasheet/#hardware-detail","text":"TIMI-130 utilizes the BBM MatesBus, which is a unique interface pinout designed to be simple and easy to use. The MatesBus is made up of 2 rows of 5 pins, 0.1\u201d (2.54mm) pitch, spaced 0.3\u201d (7.62mm) apart, ideal for direct plug into a breadboard, or compatible adaptor or development board. While the TIMI-130 can be orientated in any of its 4 positions, Portrait, Landscape, Portrait Reversed and Landscape Reversed, its natural position forms an upside-down \u2018T\u2019 shape and is designed to interface with the bottom of a breadboard, sitting closest to the User, leaving the top part of the breadboard free for components and wiring.","title":"Hardware Detail"},{"location":"datasheets/timi/timi-130-datasheet/#pin-configuration","text":"The TIMI-130 MatesBus has 10 physical pins, 5 on each side of the interface neck, and are spaced apart to easy connect onto a breadboard. The H2 Header doubles as a programming interface and features Power and Serial UART, while the H1 Header features Power Output and 3 GPIO (General Purpose IO). User I/O \u2013 Dual 5 way headers (H1 + H2) Header/Pin Symbol I/O Type Description Header1\u20131 GND Power Module / System GND Header1\u20132 IO3 I/O GPIO capable of Digital, PWM Audio Out (3.3V Level) Header1\u20133 IO2 I/O/A GPIO capable of Digital, Analog, I2C SDA (3.3V Level) Header1\u20134 IO1 I/O/A GPIO capable of Digital, Analog, I2C SCL (3.3V Level) Header1\u20135 3V3 OUT Power 3.3V 500mA Power Output for User Header2\u20131 RESET I System Reset, Active Low Header2\u20132 GND Power Module / System GND Header2\u20133 RX I Asynchronous Serial UART Receive Pin (3.3V, 5V Tolerant) Header2\u20134 TX O Asynchronous Serial UART Transmit Pin (3.3V Level) Header2\u20135 5V Power Module 5V Input, Main Power","title":"Pin Configuration"},{"location":"datasheets/timi/timi-130-datasheet/#hardware-interfaces","text":"The TIMI-130 has hardware peripherals configured for interfacing with other external devices \u2013 general purpose digital input/output, analog input, UART, PWM and I2C.","title":"Hardware Interfaces"},{"location":"datasheets/timi/timi-130-datasheet/#system-pins","text":"+5V (Device Supply Voltage) Display supply voltage pin. This pin should be connected to a stable supply voltage in the range of 4.0 Volts to 5.5 Volts DC. Nominal operating voltage is 5.0 Volts for optimal display performance. Note If absolutely required, 3.3V can be applied to the +5V input, and the module will operate correctly, but with a lower backlight brightness. For this reason, it is not a recommended configuration, but for systems without 5V it enables compatibility. Note the 3.3V regulators will be passing the input voltage and not regulating themselves, so ensure you are using a clean power supply input. 3V3 (Device Output Voltage) 3.3V Output of the user dedicated voltage regulator. Capable of approximately 500mA, for external use by the User to power circuits/devices. This is an OUTPUT only, and is not the same regulator as the main system. GND (Module Ground) Device ground pin. This pin must be connected to system ground. RESET (Module Master Reset) Device Master Reset pin. An active low pulse of greater than 2 microseconds will reset the device. Ideally use an open collector type circuit to reset the device if an external reset is required. Alternatively connect it to a GPIO from a host and drive the pin Low to reset and set the pin High (3.3V) to return to run. This pin is not driven low by any internal conditions but is pulled high with a pull up resistor on the TIMI-96 module itself. The pins primary use is for programming TIMI-96 and is required by the BBM Programmer for loading Firmware/PmmC and applications.","title":"System Pins"},{"location":"datasheets/timi/timi-130-datasheet/#general-purpose-io","text":"The TIMI-96 has three general purpose input/output (GPIO) pins available. GPIO pins IO1, IO2 and IO3 can be individually set as a digital input or output. The pin mode of all the pins at power-up or reset is input by default. When set as digital inputs, the pins are 3.3V tolerant. These are not 5V tolerant and must not be connected directly to 5V devices outputs or 5V sources. When set as digital outputs, the pins output at 3.3V levels. Digital GPIO pins can source/sink 15 mA. GPIO pins IO1 and IO2 can also serve as analog input pins. The pin mode of all the pins at power-up or reset is input by default. The analog input pins have a range of 0 to 3.3V, each having a maximum 12-bit resolution. Do not exceed the maximal permissible input voltage on these GPIO.","title":"General Purpose I/O"},{"location":"datasheets/timi/timi-130-datasheet/#serial-ports-ttl-level-serial","text":"The PIXXI-28 Processor has a single hardware asynchronous serial port with fixed pins TX/RX. The PIXXI-28\u2019s serial port can be used to communicate with external serial devices and is also used for programming the PIXXI-28 itself. The primary features are: Full-Duplex 8-bit data transmission and reception. Data format: 8-bits, No Parity, 1 Stop bit. Independent Baud rates from 300 baud up to 2187500 baud. This serial UART is also the programming interface for User program downloads. Once the compiled application is downloaded and the user code starts executing, the serial port is then available to the user application. TX pin (Serial Transmit) Dedicated Asynchronous Serial port transmit pin, TX. Connect this pin to external serial device receive (RX) signal. This pin outputs at 3.3V levels. RX pin (Serial Receive) Dedicated Asynchronous Serial port receive pin, RX. Connect this pin to external serial device transmit (TX) signal. This pin is 5.0V tolerant. Note The serial UART output at the level of TTL 3.3V, however is 5V tolerant on the RX pin, so can accept communications from 5V devices.","title":"Serial Ports \u2013 TTL Level Serial"},{"location":"datasheets/timi/timi-130-datasheet/#i2c-interface","text":"The I2C peripheral operates up to 1 MHz, supporting standard mode, full speed, and fast mode. I2C clock output pin, SCL (IO1). Connect this pin to the SCL pin of an external I2C device. This is 3.3V tolerant only and must not be connected to 5V I2C buses. I2C data input/output pin, SDA (IO2). Connect this pin to the SDA pin of an external I2C device. This is 3.3V tolerant only and must not be connected to 5V I2C buses. No pull-up resistors are provided on TIMI-130, therefore external pull up resistors are required to be added by the User on the Breadboard/Bus. Typical pull up resistors to 3.3V are in the region of 4.7Kohm. Note The TIMI-130 can only function as a Master in an I2C bus, therefore it cannot be an I2C Slave to a Host at this time.","title":"I2C Interface"},{"location":"datasheets/timi/timi-130-datasheet/#pwm-audio-output","text":"TIMI-96 is capable of PWM Audio output using GPIO IO3, for connecting to a buzzer, piezo or amplifier/speaker via a filter, and is capable of audio RTTTL tones, frequencies and PWM Audio.","title":"PWM Audio Output"},{"location":"datasheets/timi/timi-130-datasheet/#hardware-requirements","text":"","title":"Hardware Requirements"},{"location":"datasheets/timi/timi-130-datasheet/#hardware-overview","text":"TIMI-130 is designed to be used in several ways, but the most basic configurations can be achieved with a TIMI-130 module and a BBM-Programmer, connected to your PC in a tethered configuration (See Programming Hardware section). The TIMI-130 can also be used with various Adaptors and Development Boards which feature a MatesBus interface, or simply into a breadboard directly. The hardware and software requirements for these configurations varies and will be described in documentation associated with those adaptors or boards.","title":"Hardware Overview"},{"location":"datasheets/timi/timi-130-datasheet/#what-you-will-need","text":"TIMI-130 Module BBM-Programmer MicroUSB Cable (Standard Type A USB to microUSB \u2013 Not included) Windows PC/Laptop running Windows 7 or higher, x86 or x64. ARM is currently not supported at this time. The BBM-Programmer does not come with the microUSB cable, this can be purchased from virtually any hardware/computer store. Currently Microsoft Windows is the only supported Operating System for Mates Studio. Announcements will be made when other OS\u2019s will become supported.","title":"What you will need"},{"location":"datasheets/timi/timi-130-datasheet/#optional-hardware","text":"These items are not required but will assist development in situations requiring components or other electronics modules. These are not required for direct PC interfacing. Standard or Extended Breadboard 5-pin Right Angle header (2.54mm pitch), included with the BBM-Programmer Jumper wires for interfacing to components and sensors","title":"Optional Hardware"},{"location":"datasheets/timi/timi-130-datasheet/#required-software","text":"All software development for the TIMI-130 module utilizes the Mates Studio IDE. The latest version of Mates Studio can be downloaded from the Breadboard Mates website or directly from this link here . Details specific about the Mates Studio IDE can be found in the Mates Studio IDE documentation .","title":"Required Software"},{"location":"datasheets/timi/timi-130-datasheet/#programming-hardware","text":"","title":"Programming Hardware"},{"location":"datasheets/timi/timi-130-datasheet/#overview","text":"TIMI-130 utilizes a USB to Serial programmer for application and firmware updates, which programs both the Processor Flash memory, along with the on-board SPI Flash memory. The Programmer, dubbed BBM-Prog, is the official BBM Programmer and can also be used for testing and debugging of TIMI applications using the Mates Studio IDE.","title":"Overview"},{"location":"datasheets/timi/timi-130-datasheet/#detail","text":"The BBM-PROG utilizes the Silicon Labs CP2104 USB to UART bridge, and uses the TIMI\u2019s Serial UART to load applications, firmware/PmmC and media content. The BBM-PROG features a 3-pin jumper with shunt, which is present to change the way the programmer handles the Reset line, utilized by TIMI and other devices. TIMI-130 requires the jumper to be positioned like the image above, closest to the 5-way female header. This makes the programmer compatible with programming the 4D Labs Pixxi-28 processor. If the jumper is placed on the 2 pins closest to the USB connector, this will make the programmer compatible with programming Atmel chips, such is used on many of the Arduino boards, or barebone chips. This may also be compatible with other microcontrollers too.","title":"Detail"},{"location":"datasheets/timi/timi-130-datasheet/#typical-connections","text":"","title":"Typical Connections"},{"location":"datasheets/timi/timi-130-datasheet/#breadboard-interface-with-programmer","text":"One of the simplest interfaces for TIMI-130 is connecting TIMI-130 to the bottom of a breadboard, connecting the 5-way right angle header into the breadboard next to the H2 header side of TIMI, and attaching the BBM-Programmer to the 5-way header.","title":"Breadboard Interface with Programmer"},{"location":"datasheets/timi/timi-130-datasheet/#breadboard-interface-to-a-host","text":"TIMI-130 can interface to virtually any microcontroller or Host, using a Serial UART interface. Simple wire connections can be achieved directly to TIMI or via a breadboard. If the microcontroller or Host utilizes 3.3V or 5.0V UART, then TIMI can be easily connected. Note Wiring is simplified, showing main wires only.","title":"Breadboard Interface to a Host"},{"location":"datasheets/timi/timi-130-datasheet/#interface-notes","text":"TIMI-130 has a single Serial UART, which is shared for the programming of TIMI-130 from the Mates Studio IDE, but it can also be used to interface to a Host or other device. When programming the TIMI-130, it needs to be isolated from any other circuit that might be connected to the UART. Unplug any UART connections from the RX and TX, and program the TIMI-130 module directly with the Programmer. When programming is complete, connect the UART RX/TX back up to allow communication to the host/device to resume. On some Adaptors/Development boards, a switch or jumper may be offered to isolate the RX pin, allowing only Programming TX signals to reach the TIMI-130\u2019s RX pin, until the switch is changed. This is useful as it means unplugging or unwiring the UART is no longer required when programming TIMI. The same situation applies for Hosts/Development boards which also only have a single UART, as programming them often uses the UART too so they would need to be disconnected from TIMI-130 to program them.","title":"Interface Notes"},{"location":"datasheets/timi/timi-130-datasheet/#hardware-drawing","text":"","title":"Hardware Drawing"},{"location":"datasheets/timi/timi-130-datasheet/#hardware-schematic","text":"","title":"Hardware Schematic"},{"location":"datasheets/timi/timi-130-datasheet/#specifications-ratings","text":"Recommended Operating Conditions Parameter Conditions / Information Min Typ Max Units Operating Temperature -20 \u2014 +70 \u00b0C Storage Temperature -30 \u2014 +80 \u00b0C Humidity (RH) Max 60\u00b0C \u2014 \u2014 90% RH Supply Voltage (VCC) Stable external supply required 4.0 5.0 5.5 V Processor voltage (VP) \u2014 3.3 \u2014 V Input Low Voltage (VIL) all pins GND \u2014 0.2VP V Input High Voltage (VIH) non 5V tolerant pins 0.8VP \u2014 3.3 V Input High Voltage (VIH) 5V Tolerant Pins, (RX pin) 0.8VP \u2014 VCC V Reset Pulse External Open Collector (RESET pin) 1.3 \u2014 \u2014 \u00b5s Operational Delay Power-Up or External Reset 500 \u2014 3000 ms Output Voltage (3V3) Output Voltage for User \u2014 3.3 \u2014 V Output Current Output Current capability for User \u2014 500 \u2014 mA GPIO Current Source / Sink \u2014 \u2014 15 mA Operating Characteristics Parameter Conditions / Information Min Typ Max Unit Supply Current (ICC) 5V Supply \u2013 Normal Operation \u2014 100 \u2014 mA Supply Current (ICC) 5V Supply \u2013 Sleep Mode \u2014 8 \u2014 mA Supply Current (ICC) 5V Supply \u2013 Deep Sleep Mode \u2014 3 \u2014 mA Display Endurance Hours of operation, measured to when display is 50% original brightness 30000 \u2014 \u2014 H LCD Display Information Parameter Conditions / Information Specification Display Type TFT IPS LCD Display Size 0.96\u201d Diagonal Display Resolution 240x240 pixels Display Brightness 5V Supply 400 cd/m2 (typical) Display Contrast Ratio 800:1 (typical) Display Viewing Angles Above, Below, Left and Right of Center 80 Degrees Display Viewing Direction ALL (IPS Display) Display Backlighting White LED Backlighting 2 LED Pixel Pitch 0.0975 x 0.0975mm (Square pixels) Pixel Density Number of pixels in 1 row in 25.4mm 260 DPI/PPI","title":"Specifications &amp; Ratings"},{"location":"datasheets/timi/timi-130-datasheet/#revision-history","text":"Document Revision Revision Number Date Description 0.1 10/05/2021 Initial Draft 0.2 11/05/2021 Draft Update 0.3 21/05/2021 Draft Update 0.4 19/07/2021 Formatting Update Addition of Power Draw spec 1.0 28/07/2021 Initial Public Release Hardware Revision Revision Number Date Description 1.0 19/10/2020 Concept Revision \u2013 Internal","title":"Revision History"},{"location":"datasheets/timi/timi-96-datasheet/","tags":["TIMI","TIMI-96"],"text":"Datasheet: TIMI-96 Introduction TIMI-96 (ref. TIMI) is a unique breadboard compatible display development module, aimed to speed up and reinvent the way electronic testing, development and projects are carried out, in either stand alone, host interfaced, PC tethered, or educational settings. TIMI is a 0.96\u201d TFT LCD display module that is driven directly by a PIXXI-28 graphics processor from 4D Labs. It features a unique MatesBus interface, which is simple to use in both breadboard applications, as well as on adaptors or directly into developed products. TIMI was created as a flexible design aid, primarily to simulate components readouts and meters, which would otherwise be cumbersome or demanding on hardware resources for breadboard or electronic development. Simulating component readouts allows accelerated development and retains the often-limited GPIO hardware associated with many developments. TIMI was designed for engineers, hobbyists, and students, from beginner to advanced levels, designed to make breadboarding or project development, easier. Product Features TIMI\u2019s main interface is a 3.3V level Asynchronous Serial UART and features 3 GPIO which can be used as Digital or Analog inputs, Digital Outputs, Master I2C Communication or PWM Audio output. These interfaces arm TIMI with resources to be either a stand-alone controller, a Host driven slave, or a tethered test instrument, while being capable of interfacing and powering external devices itself. Powered by 4D Labs Pixxi-28 Graphics Processor 160(W)x80(H) resolution TFT LCD, non-touch 3.3V (5V tolerant) Serial UART interface, capable 300 to 2187500 Baud Master I2C (3.3V level) interface bus 3 GPIO (3.3V level), 2 capable of Analog or I2C, 1 capable of PWM Audio 16MB of External SPI Flash Memory 32KB of Processor Flash Memory 14KB of Processor SRAM for User Variables Single supply 5V power input (*3.3V possible \u2013 See \u2018System Pins\u2019 Section) Dedicated 3.3V 500mA power output for User Standard 0.1\u201d (2.54mm) pitch male pin headers, breadboard compatible RoHS and REACH compliant PCB is UL 94V-0 Flammability Rated Weight approx. 5.0 grams Hardware Detail TIMI-96 utilizes the BBM MatesBus, which is a unique interface pinout designed to be simple and easy to use. The MatesBus is made up of 2 rows of 5 pins, 0.1\u201d (2.54mm) pitch, spaced 0.3\u201d (7.62mm) apart, ideal for direct plug into a breadboard, or compatible adaptor or development board. While the TIMI-96 can be orientated in any of its 4 positions, Portrait, Landscape, Portrait Reversed and Landscape Reversed, its natural position forms an upside-down \u2018T\u2019 shape and is designed to interface with the bottom of a breadboard, sitting closest to the User, leaving the top part of the breadboard free for components and wiring. Pin Configuration The TIMI-96 MatesBus has 10 physical pins, 5 on each side of the interface neck, and are spaced apart to easy connect onto a breadboard. The H2 Header doubles as a programming interface and features Power and Serial UART, while the H1 Header features Power Output and 3 GPIO (General Purpose IO). User I/O \u2013 Dual 5 way headers (H1 + H2) Header/Pin Symbol I/O Type Description Header1\u20131 GND Power Module / System GND Header1\u20132 IO3 I/O GPIO capable of Digital, PWM Audio Out (3.3V Level) Header1\u20133 IO2 I/O/A GPIO capable of Digital, Analog, I2C SDA (3.3V Level) Header1\u20134 IO1 I/O/A GPIO capable of Digital, Analog, I2C SCL (3.3V Level) Header1\u20135 3V3 OUT Power 3.3V 500mA Power Output for User Header2\u20131 RESET I System Reset, Active Low Header2\u20132 GND Power Module / System GND Header2\u20133 RX I Asynchronous Serial UART Receive Pin (3.3V, 5V Tolerant) Header2\u20134 TX O Asynchronous Serial UART Transmit Pin (3.3V Level) Header2\u20135 5V Power Module 5V Input, Main Power Hardware Interfaces The TIMI has hardware peripherals configured for interfacing with other external devices \u2013 general purpose digital input/output, analog input, UART, PWM and I2C. System Pins +5V (Device Supply Voltage) Display supply voltage pin. This pin should be connected to a stable supply voltage in the range of 4.0 Volts to 5.5 Volts DC. Nominal operating voltage is 5.0 Volts for optimal display performance. Note If absolutely required, 3.3V can be applied to the +5V input, and the module will operate correctly, but with a lower backlight brightness. For this reason, it is not a recommended configuration, but for systems without 5V it enables compatibility. Note the 3.3V regulators will be passing the input voltage and not regulating themselves, so ensure you are using a clean power supply input. 3V3 (Device Output Voltage) 3.3V Output of the user dedicated voltage regulator. Capable of approximately 500mA, for external use by the User to power circuits/devices. This is an OUTPUT only, and is not the same regulator as the main system. GND (Module Ground) Device ground pin. This pin must be connected to system ground. RESET (Module Master Reset) Device Master Reset pin. An active low pulse of greater than 2 microseconds will reset the device. Ideally use an open collector type circuit to reset the device if an external reset is required. Alternatively connect it to a GPIO from a host and drive the pin Low to reset and set the pin High (3.3V) to return to run. This pin is not driven low by any internal conditions but is pulled high with a pull up resistor on the TIMI-96 module itself. The pins primary use is for programming TIMI-96 and is required by the BBM Programmer for loading Firmware/PmmC and applications. General Purpose I/O The TIMI-96 has three general purpose input/output (GPIO) pins available. GPIO pins IO1, IO2 and IO3 can be individually set as a digital input or output. The pin mode of all the pins at power-up or reset is input by default. When set as digital inputs, the pins are 3.3V tolerant. These are not 5V tolerant and must not be connected directly to 5V devices outputs or 5V sources. When set as digital outputs, the pins output at 3.3V levels. Digital GPIO pins can source/sink 15 mA. GPIO pins IO1 and IO2 can also serve as analog input pins. The pin mode of all the pins at power-up or reset is input by default. The analog input pins have a range of 0 to 3.3V, each having a maximum 12-bit resolution. Do not exceed the maximal permissible input voltage on these GPIO. Serial Ports \u2013 TTL Level Serial The PIXXI-28 Processor has a single hardware asynchronous serial port with fixed pins TX/RX. The PIXXI-28\u2019s serial port can be used to communicate with external serial devices and is also used for programming the PIXXI-28 itself. The primary features are: Full-Duplex 8-bit data transmission and reception. Data format: 8-bits, No Parity, 1 Stop bit. Independent Baud rates from 300 baud up to 2187500 baud. This serial UART is also the programming interface for User program downloads. Once the compiled application is downloaded and the user code starts executing, the serial port is then available to the user application. TX pin (Serial Transmit) Dedicated Asynchronous Serial port transmit pin, TX. Connect this pin to external serial device receive (RX) signal. This pin outputs at 3.3V levels. RX pin (Serial Receive) Dedicated Asynchronous Serial port receive pin, RX. Connect this pin to external serial device transmit (TX) signal. This pin is 5.0V tolerant. Note The serial UART output at the level of TTL 3.3V, however is 5V tolerant on the RX pin, so can accept communications from 5V devices. I2C Interface The I2C peripheral operates up to 1 MHz, supporting standard mode, full speed, and fast mode. I2C clock output pin, SCL (IO1). Connect this pin to the SCL pin of an external I2C device. This is 3.3V tolerant only and must not be connected to 5V I2C buses. I2C data input/output pin, SDA (IO2). Connect this pin to the SDA pin of an external I2C device. This is 3.3V tolerant only and must not be connected to 5V I2C buses. No pull-up resistors are provided on TIMI-96, therefore external pull up resistors are required to be added by the User on the Breadboard/Bus. Typical pull up resistors to 3.3V are in the region of 4.7Kohm. Note The TIMI-96 can only function as a Master in an I2C bus, therefore it cannot be an I2C Slave to a Host at this time. PWM Audio Output TIMI-96 is capable of PWM Audio output using GPIO IO3, for connecting to a buzzer, piezo or amplifier/speaker via a filter, and is capable of audio RTTTL tones, frequencies and PWM Audio. Hardware Requirements Hardware Overview TIMI-96 is designed to be used in several ways, but the most basic configurations can be achieved with a TIMI-96 module and a BBM-Programmer, connected to your PC in a tethered configuration (See Programming Hardware section). The TIMI-96 can also be used with various Adaptors and Development Boards which feature a MatesBus interface, or simply into a breadboard directly. The hardware and software requirements for these configurations varies and will be described in documentation associated with those adaptors or boards. What you will need TIMI-96 Module BBM-Programmer MicroUSB Cable (Standard Type A USB to microUSB \u2013 Not included) Windows PC/Laptop running Windows 7 or higher, x86 or x64. ARM is currently not supported at this time. The BBM-Programmer does not come with the microUSB cable, this can be purchased from virtually any hardware/computer store. Currently Microsoft Windows is the only supported Operating System for Mates Studio. Announcements will be made when other OS\u2019s will become supported. Optional Hardware These items are not required but will assist development in situations requiring components or other electronics modules. These are not required for direct PC interfacing. Standard or Extended Breadboard 5-pin Right Angle header (2.54mm pitch), included with the BBM-Programmer Jumper wires for interfacing to components and sensors Required Software All software development for the TIMI-96 module utilizes the Mates Studio IDE. The latest version of Mates Studio can be downloaded from the Breadboard Mates website or directly from this link here . Details specific about the Mates Studio IDE can be found in the Mates Studio IDE documentation . Programming Hardware Overview TIMI utilizes a USB-to-Serial programmer for application and firmware updates, which programs both the Processor Flash memory, along with the on-board SPI Flash memory. The programmer, dubbed BBM-Prog, is the official BBM Programmer and can also be used for testing and debugging of TIMI applications using the Mates Studio IDE. Detail The BBM-PROG utilizes the Silicon Labs CP2104 USB to UART bridge, and uses the TIMI\u2019s Serial UART to load applications, firmware/PmmC and media content. The BBM-PROG features a 3-pin jumper with shunt, which is present to change the way the programmer handles the Reset line, utilized by TIMI and other devices. TIMI requires the jumper to be positioned like the image above, closest to the 5-way female header. This makes the programmer compatible with programming the 4D Labs Pixxi-28 processor. If the jumper is placed on the 2 pins closest to the USB connector, this will make the programmer compatible with programming Atmel chips, such is used on many of the Arduino boards, or barebone chips. This may also be compatible with other microcontrollers too. Typical Connections Breadboard Interface with Programmer One of the simplest interfaces for TIMI is connecting TIMI to the bottom of a breadboard, connecting the 5-way right angle header into the breadboard next to the H2 header side of TIMI, and attaching the BBM-Programmer to the 5-way header. Breadboard Interface to a Host TIMI can interface to virtually any microcontroller or Host, using a Serial UART interface. Simple wire connections can be achieved directly to TIMI or via a breadboard. If the microcontroller or Host utilizes 3.3V or 5.0V UART, then TIMI can be easily connected. Note Wiring is simplified, showing main wires only. Interface Notes TIMI has a single Serial UART, which is shared for the programming of TIMI from the Mates Studio IDE, but it can also be used to interface to a Host or other device. When programming the TIMI, it needs to be isolated from any other circuit that might be connected to the UART. Unplug any UART connections from the RX and TX, and program the TIMI module directly with the Programmer. When programming is complete, connect the UART RX/TX back up to allow communication to the host/device to resume. On some Adaptors/Development boards, a switch or jumper may be offered to isolate the RX pin, allowing only Programming TX signals to reach the TIMI\u2019s RX pin, until the switch is changed. This is useful as it means unplugging or unwiring the UART is no longer required when programming TIMI. The same situation applies for Hosts/Development boards which also only have a single UART, as programming them often uses the UART too so they would need to be disconnected from TIMI to program them. Hardware Drawing Hardware Schematic Specifications & Ratings Recommended Operating Conditions Parameter Conditions / Information Min Typ Max Units Operating Temperature -20 \u2014 +70 \u00b0C Storage Temperature -30 \u2014 +80 \u00b0C Humidity (RH) Max 60\u00b0C \u2014 \u2014 90% RH Supply Voltage (VCC) Stable external supply required 4.0 5.0 5.5 V Processor voltage (VP) \u2014 3.3 \u2014 V Input Low Voltage (VIL) all pins GND \u2014 0.2VP V Input High Voltage (VIH) non 5V tolerant pins 0.8VP \u2014 3.3 V Input High Voltage (VIH) 5V Tolerant Pins, (RX pin) 0.8VP \u2014 VCC V Reset Pulse External Open Collector (RESET pin) 1.3 \u2014 \u2014 \u00b5s Operational Delay Power-Up or External Reset 500 \u2014 3000 ms Output Voltage (3V3) Output Voltage for User \u2014 3.3 \u2014 V Output Current Output Current capability for User \u2014 500 \u2014 mA GPIO Current Source / Sink \u2014 \u2014 15 mA Operating Characteristics Parameter Conditions / Information Min Typ Max Unit Supply Current (ICC) 5V Supply \u2013 Normal Operation \u2014 90 \u2014 mA Supply Current (ICC) 5V Supply \u2013 Sleep Mode \u2014 3 \u2014 mA Supply Current (ICC) 5V Supply \u2013 Deep Sleep Mode \u2014 2 \u2014 mA Display Endurance Hours of operation, measured to when display is 50% original brightness 30000 \u2014 \u2014 H LCD Display Information Parameter Conditions / Information Specification Display Type TFT IPS LCD Display Size 0.96\u201d Diagonal Display Resolution 160\u00d780 pixels Display Brightness 5V Supply 120 cd/m2 (typical) Display Contrast Ratio 800:1 (typical) Display Viewing Angles Above, Below, Left and Right of Center 80 Degrees Display Viewing Direction ALL (IPS Display) Display Backlighting White LED Backlighting 1 LED Pixel Pitch 0.135 x 0.135mm (Square pixels) Pixel Density Number of pixels in 1 row in 25.4mm 187 DPI/PPI Revision History Document Revision Revision Number Date Description 0.1 19/02/2021 Initial Draft 0.2 05/05/2021 Draft Update 0.3 06/05/2021 Draft Update 0.4 07/05/2021 Draft Update 0.5 11/05/2021 Draft Update 0.6 19/07/2021 Formatting Update 1.0 28/07/2021 Initial Public Release Hardware Revision Revision Number Date Description 1.0 19/10/2020 Concept Revision \u2013 Internal 2.0 16/12/2020 Concept Revision \u2013 Internal 3.0 18/02/2021 Public Release","title":"TIMI-96"},{"location":"datasheets/timi/timi-96-datasheet/#datasheet-timi-96","text":"","title":"Datasheet: TIMI-96"},{"location":"datasheets/timi/timi-96-datasheet/#introduction","text":"TIMI-96 (ref. TIMI) is a unique breadboard compatible display development module, aimed to speed up and reinvent the way electronic testing, development and projects are carried out, in either stand alone, host interfaced, PC tethered, or educational settings. TIMI is a 0.96\u201d TFT LCD display module that is driven directly by a PIXXI-28 graphics processor from 4D Labs. It features a unique MatesBus interface, which is simple to use in both breadboard applications, as well as on adaptors or directly into developed products. TIMI was created as a flexible design aid, primarily to simulate components readouts and meters, which would otherwise be cumbersome or demanding on hardware resources for breadboard or electronic development. Simulating component readouts allows accelerated development and retains the often-limited GPIO hardware associated with many developments. TIMI was designed for engineers, hobbyists, and students, from beginner to advanced levels, designed to make breadboarding or project development, easier.","title":"Introduction"},{"location":"datasheets/timi/timi-96-datasheet/#product-features","text":"TIMI\u2019s main interface is a 3.3V level Asynchronous Serial UART and features 3 GPIO which can be used as Digital or Analog inputs, Digital Outputs, Master I2C Communication or PWM Audio output. These interfaces arm TIMI with resources to be either a stand-alone controller, a Host driven slave, or a tethered test instrument, while being capable of interfacing and powering external devices itself. Powered by 4D Labs Pixxi-28 Graphics Processor 160(W)x80(H) resolution TFT LCD, non-touch 3.3V (5V tolerant) Serial UART interface, capable 300 to 2187500 Baud Master I2C (3.3V level) interface bus 3 GPIO (3.3V level), 2 capable of Analog or I2C, 1 capable of PWM Audio 16MB of External SPI Flash Memory 32KB of Processor Flash Memory 14KB of Processor SRAM for User Variables Single supply 5V power input (*3.3V possible \u2013 See \u2018System Pins\u2019 Section) Dedicated 3.3V 500mA power output for User Standard 0.1\u201d (2.54mm) pitch male pin headers, breadboard compatible RoHS and REACH compliant PCB is UL 94V-0 Flammability Rated Weight approx. 5.0 grams","title":"Product Features"},{"location":"datasheets/timi/timi-96-datasheet/#hardware-detail","text":"TIMI-96 utilizes the BBM MatesBus, which is a unique interface pinout designed to be simple and easy to use. The MatesBus is made up of 2 rows of 5 pins, 0.1\u201d (2.54mm) pitch, spaced 0.3\u201d (7.62mm) apart, ideal for direct plug into a breadboard, or compatible adaptor or development board. While the TIMI-96 can be orientated in any of its 4 positions, Portrait, Landscape, Portrait Reversed and Landscape Reversed, its natural position forms an upside-down \u2018T\u2019 shape and is designed to interface with the bottom of a breadboard, sitting closest to the User, leaving the top part of the breadboard free for components and wiring.","title":"Hardware Detail"},{"location":"datasheets/timi/timi-96-datasheet/#pin-configuration","text":"The TIMI-96 MatesBus has 10 physical pins, 5 on each side of the interface neck, and are spaced apart to easy connect onto a breadboard. The H2 Header doubles as a programming interface and features Power and Serial UART, while the H1 Header features Power Output and 3 GPIO (General Purpose IO). User I/O \u2013 Dual 5 way headers (H1 + H2) Header/Pin Symbol I/O Type Description Header1\u20131 GND Power Module / System GND Header1\u20132 IO3 I/O GPIO capable of Digital, PWM Audio Out (3.3V Level) Header1\u20133 IO2 I/O/A GPIO capable of Digital, Analog, I2C SDA (3.3V Level) Header1\u20134 IO1 I/O/A GPIO capable of Digital, Analog, I2C SCL (3.3V Level) Header1\u20135 3V3 OUT Power 3.3V 500mA Power Output for User Header2\u20131 RESET I System Reset, Active Low Header2\u20132 GND Power Module / System GND Header2\u20133 RX I Asynchronous Serial UART Receive Pin (3.3V, 5V Tolerant) Header2\u20134 TX O Asynchronous Serial UART Transmit Pin (3.3V Level) Header2\u20135 5V Power Module 5V Input, Main Power","title":"Pin Configuration"},{"location":"datasheets/timi/timi-96-datasheet/#hardware-interfaces","text":"The TIMI has hardware peripherals configured for interfacing with other external devices \u2013 general purpose digital input/output, analog input, UART, PWM and I2C.","title":"Hardware Interfaces"},{"location":"datasheets/timi/timi-96-datasheet/#system-pins","text":"+5V (Device Supply Voltage) Display supply voltage pin. This pin should be connected to a stable supply voltage in the range of 4.0 Volts to 5.5 Volts DC. Nominal operating voltage is 5.0 Volts for optimal display performance. Note If absolutely required, 3.3V can be applied to the +5V input, and the module will operate correctly, but with a lower backlight brightness. For this reason, it is not a recommended configuration, but for systems without 5V it enables compatibility. Note the 3.3V regulators will be passing the input voltage and not regulating themselves, so ensure you are using a clean power supply input. 3V3 (Device Output Voltage) 3.3V Output of the user dedicated voltage regulator. Capable of approximately 500mA, for external use by the User to power circuits/devices. This is an OUTPUT only, and is not the same regulator as the main system. GND (Module Ground) Device ground pin. This pin must be connected to system ground. RESET (Module Master Reset) Device Master Reset pin. An active low pulse of greater than 2 microseconds will reset the device. Ideally use an open collector type circuit to reset the device if an external reset is required. Alternatively connect it to a GPIO from a host and drive the pin Low to reset and set the pin High (3.3V) to return to run. This pin is not driven low by any internal conditions but is pulled high with a pull up resistor on the TIMI-96 module itself. The pins primary use is for programming TIMI-96 and is required by the BBM Programmer for loading Firmware/PmmC and applications.","title":"System Pins"},{"location":"datasheets/timi/timi-96-datasheet/#general-purpose-io","text":"The TIMI-96 has three general purpose input/output (GPIO) pins available. GPIO pins IO1, IO2 and IO3 can be individually set as a digital input or output. The pin mode of all the pins at power-up or reset is input by default. When set as digital inputs, the pins are 3.3V tolerant. These are not 5V tolerant and must not be connected directly to 5V devices outputs or 5V sources. When set as digital outputs, the pins output at 3.3V levels. Digital GPIO pins can source/sink 15 mA. GPIO pins IO1 and IO2 can also serve as analog input pins. The pin mode of all the pins at power-up or reset is input by default. The analog input pins have a range of 0 to 3.3V, each having a maximum 12-bit resolution. Do not exceed the maximal permissible input voltage on these GPIO.","title":"General Purpose I/O"},{"location":"datasheets/timi/timi-96-datasheet/#serial-ports-ttl-level-serial","text":"The PIXXI-28 Processor has a single hardware asynchronous serial port with fixed pins TX/RX. The PIXXI-28\u2019s serial port can be used to communicate with external serial devices and is also used for programming the PIXXI-28 itself. The primary features are: Full-Duplex 8-bit data transmission and reception. Data format: 8-bits, No Parity, 1 Stop bit. Independent Baud rates from 300 baud up to 2187500 baud. This serial UART is also the programming interface for User program downloads. Once the compiled application is downloaded and the user code starts executing, the serial port is then available to the user application. TX pin (Serial Transmit) Dedicated Asynchronous Serial port transmit pin, TX. Connect this pin to external serial device receive (RX) signal. This pin outputs at 3.3V levels. RX pin (Serial Receive) Dedicated Asynchronous Serial port receive pin, RX. Connect this pin to external serial device transmit (TX) signal. This pin is 5.0V tolerant. Note The serial UART output at the level of TTL 3.3V, however is 5V tolerant on the RX pin, so can accept communications from 5V devices.","title":"Serial Ports \u2013 TTL Level Serial"},{"location":"datasheets/timi/timi-96-datasheet/#i2c-interface","text":"The I2C peripheral operates up to 1 MHz, supporting standard mode, full speed, and fast mode. I2C clock output pin, SCL (IO1). Connect this pin to the SCL pin of an external I2C device. This is 3.3V tolerant only and must not be connected to 5V I2C buses. I2C data input/output pin, SDA (IO2). Connect this pin to the SDA pin of an external I2C device. This is 3.3V tolerant only and must not be connected to 5V I2C buses. No pull-up resistors are provided on TIMI-96, therefore external pull up resistors are required to be added by the User on the Breadboard/Bus. Typical pull up resistors to 3.3V are in the region of 4.7Kohm. Note The TIMI-96 can only function as a Master in an I2C bus, therefore it cannot be an I2C Slave to a Host at this time.","title":"I2C Interface"},{"location":"datasheets/timi/timi-96-datasheet/#pwm-audio-output","text":"TIMI-96 is capable of PWM Audio output using GPIO IO3, for connecting to a buzzer, piezo or amplifier/speaker via a filter, and is capable of audio RTTTL tones, frequencies and PWM Audio.","title":"PWM Audio Output"},{"location":"datasheets/timi/timi-96-datasheet/#hardware-requirements","text":"","title":"Hardware Requirements"},{"location":"datasheets/timi/timi-96-datasheet/#hardware-overview","text":"TIMI-96 is designed to be used in several ways, but the most basic configurations can be achieved with a TIMI-96 module and a BBM-Programmer, connected to your PC in a tethered configuration (See Programming Hardware section). The TIMI-96 can also be used with various Adaptors and Development Boards which feature a MatesBus interface, or simply into a breadboard directly. The hardware and software requirements for these configurations varies and will be described in documentation associated with those adaptors or boards.","title":"Hardware Overview"},{"location":"datasheets/timi/timi-96-datasheet/#what-you-will-need","text":"TIMI-96 Module BBM-Programmer MicroUSB Cable (Standard Type A USB to microUSB \u2013 Not included) Windows PC/Laptop running Windows 7 or higher, x86 or x64. ARM is currently not supported at this time. The BBM-Programmer does not come with the microUSB cable, this can be purchased from virtually any hardware/computer store. Currently Microsoft Windows is the only supported Operating System for Mates Studio. Announcements will be made when other OS\u2019s will become supported.","title":"What you will need"},{"location":"datasheets/timi/timi-96-datasheet/#optional-hardware","text":"These items are not required but will assist development in situations requiring components or other electronics modules. These are not required for direct PC interfacing. Standard or Extended Breadboard 5-pin Right Angle header (2.54mm pitch), included with the BBM-Programmer Jumper wires for interfacing to components and sensors","title":"Optional Hardware"},{"location":"datasheets/timi/timi-96-datasheet/#required-software","text":"All software development for the TIMI-96 module utilizes the Mates Studio IDE. The latest version of Mates Studio can be downloaded from the Breadboard Mates website or directly from this link here . Details specific about the Mates Studio IDE can be found in the Mates Studio IDE documentation .","title":"Required Software"},{"location":"datasheets/timi/timi-96-datasheet/#programming-hardware","text":"","title":"Programming Hardware"},{"location":"datasheets/timi/timi-96-datasheet/#overview","text":"TIMI utilizes a USB-to-Serial programmer for application and firmware updates, which programs both the Processor Flash memory, along with the on-board SPI Flash memory. The programmer, dubbed BBM-Prog, is the official BBM Programmer and can also be used for testing and debugging of TIMI applications using the Mates Studio IDE.","title":"Overview"},{"location":"datasheets/timi/timi-96-datasheet/#detail","text":"The BBM-PROG utilizes the Silicon Labs CP2104 USB to UART bridge, and uses the TIMI\u2019s Serial UART to load applications, firmware/PmmC and media content. The BBM-PROG features a 3-pin jumper with shunt, which is present to change the way the programmer handles the Reset line, utilized by TIMI and other devices. TIMI requires the jumper to be positioned like the image above, closest to the 5-way female header. This makes the programmer compatible with programming the 4D Labs Pixxi-28 processor. If the jumper is placed on the 2 pins closest to the USB connector, this will make the programmer compatible with programming Atmel chips, such is used on many of the Arduino boards, or barebone chips. This may also be compatible with other microcontrollers too.","title":"Detail"},{"location":"datasheets/timi/timi-96-datasheet/#typical-connections","text":"","title":"Typical Connections"},{"location":"datasheets/timi/timi-96-datasheet/#breadboard-interface-with-programmer","text":"One of the simplest interfaces for TIMI is connecting TIMI to the bottom of a breadboard, connecting the 5-way right angle header into the breadboard next to the H2 header side of TIMI, and attaching the BBM-Programmer to the 5-way header.","title":"Breadboard Interface with Programmer"},{"location":"datasheets/timi/timi-96-datasheet/#breadboard-interface-to-a-host","text":"TIMI can interface to virtually any microcontroller or Host, using a Serial UART interface. Simple wire connections can be achieved directly to TIMI or via a breadboard. If the microcontroller or Host utilizes 3.3V or 5.0V UART, then TIMI can be easily connected. Note Wiring is simplified, showing main wires only.","title":"Breadboard Interface to a Host"},{"location":"datasheets/timi/timi-96-datasheet/#interface-notes","text":"TIMI has a single Serial UART, which is shared for the programming of TIMI from the Mates Studio IDE, but it can also be used to interface to a Host or other device. When programming the TIMI, it needs to be isolated from any other circuit that might be connected to the UART. Unplug any UART connections from the RX and TX, and program the TIMI module directly with the Programmer. When programming is complete, connect the UART RX/TX back up to allow communication to the host/device to resume. On some Adaptors/Development boards, a switch or jumper may be offered to isolate the RX pin, allowing only Programming TX signals to reach the TIMI\u2019s RX pin, until the switch is changed. This is useful as it means unplugging or unwiring the UART is no longer required when programming TIMI. The same situation applies for Hosts/Development boards which also only have a single UART, as programming them often uses the UART too so they would need to be disconnected from TIMI to program them.","title":"Interface Notes"},{"location":"datasheets/timi/timi-96-datasheet/#hardware-drawing","text":"","title":"Hardware Drawing"},{"location":"datasheets/timi/timi-96-datasheet/#hardware-schematic","text":"","title":"Hardware Schematic"},{"location":"datasheets/timi/timi-96-datasheet/#specifications-ratings","text":"Recommended Operating Conditions Parameter Conditions / Information Min Typ Max Units Operating Temperature -20 \u2014 +70 \u00b0C Storage Temperature -30 \u2014 +80 \u00b0C Humidity (RH) Max 60\u00b0C \u2014 \u2014 90% RH Supply Voltage (VCC) Stable external supply required 4.0 5.0 5.5 V Processor voltage (VP) \u2014 3.3 \u2014 V Input Low Voltage (VIL) all pins GND \u2014 0.2VP V Input High Voltage (VIH) non 5V tolerant pins 0.8VP \u2014 3.3 V Input High Voltage (VIH) 5V Tolerant Pins, (RX pin) 0.8VP \u2014 VCC V Reset Pulse External Open Collector (RESET pin) 1.3 \u2014 \u2014 \u00b5s Operational Delay Power-Up or External Reset 500 \u2014 3000 ms Output Voltage (3V3) Output Voltage for User \u2014 3.3 \u2014 V Output Current Output Current capability for User \u2014 500 \u2014 mA GPIO Current Source / Sink \u2014 \u2014 15 mA Operating Characteristics Parameter Conditions / Information Min Typ Max Unit Supply Current (ICC) 5V Supply \u2013 Normal Operation \u2014 90 \u2014 mA Supply Current (ICC) 5V Supply \u2013 Sleep Mode \u2014 3 \u2014 mA Supply Current (ICC) 5V Supply \u2013 Deep Sleep Mode \u2014 2 \u2014 mA Display Endurance Hours of operation, measured to when display is 50% original brightness 30000 \u2014 \u2014 H LCD Display Information Parameter Conditions / Information Specification Display Type TFT IPS LCD Display Size 0.96\u201d Diagonal Display Resolution 160\u00d780 pixels Display Brightness 5V Supply 120 cd/m2 (typical) Display Contrast Ratio 800:1 (typical) Display Viewing Angles Above, Below, Left and Right of Center 80 Degrees Display Viewing Direction ALL (IPS Display) Display Backlighting White LED Backlighting 1 LED Pixel Pitch 0.135 x 0.135mm (Square pixels) Pixel Density Number of pixels in 1 row in 25.4mm 187 DPI/PPI","title":"Specifications &amp; Ratings"},{"location":"datasheets/timi/timi-96-datasheet/#revision-history","text":"Document Revision Revision Number Date Description 0.1 19/02/2021 Initial Draft 0.2 05/05/2021 Draft Update 0.3 06/05/2021 Draft Update 0.4 07/05/2021 Draft Update 0.5 11/05/2021 Draft Update 0.6 19/07/2021 Formatting Update 1.0 28/07/2021 Initial Public Release Hardware Revision Revision Number Date Description 1.0 19/10/2020 Concept Revision \u2013 Internal 2.0 16/12/2020 Concept Revision \u2013 Internal 3.0 18/02/2021 Public Release","title":"Revision History"},{"location":"datasheets/timi/timi-mb-datasheet/","tags":["TIMI","TIMI-MB"],"text":"Datasheet: TIMI-MB","title":"TIMI-MB"},{"location":"datasheets/timi/timi-mb-datasheet/#datasheet-timi-mb","text":"","title":"Datasheet: TIMI-MB"},{"location":"projects/","text":"Breadboard Mates Projects","title":"Breadboard Mates Projects"},{"location":"projects/#breadboard-mates-projects","text":"","title":"Breadboard Mates Projects"},{"location":"projects/arduino/rgb-controller/","tags":["REPTOR","REPTOR-250","Arduino"],"text":"RGB Controller","title":"RGB Controller"},{"location":"projects/arduino/rgb-controller/#rgb-controller","text":"","title":"RGB Controller"},{"location":"projects/raspberrypi/status-monitor/","tags":["TIMI","TIMI-130","Raspberry Pi"],"text":"Status Monitor","title":"Status Monitor"},{"location":"projects/raspberrypi/status-monitor/#status-monitor","text":"","title":"Status Monitor"},{"location":"projects/standalone/pacman/","tags":["REPTOR","REPTOR-250"],"text":"Pacman Game","title":"Pacman"},{"location":"projects/standalone/pacman/#pacman-game","text":"","title":"Pacman Game"},{"location":"tutorials/","text":"Breadboard Mates Tutorials","title":"Breadboard Mates Tutorials"},{"location":"tutorials/#breadboard-mates-tutorials","text":"","title":"Breadboard Mates Tutorials"},{"location":"tutorials/architect/","tags":["Architect"],"text":"Getting Started with Architect Environment","title":"Getting Started with Architect Environment"},{"location":"tutorials/architect/#getting-started-with-architect-environment","text":"","title":"Getting Started with Architect Environment"},{"location":"tutorials/architect/tutorial-1/","text":"Tutorial No. 1","title":"Tutorial No.1"},{"location":"tutorials/architect/tutorial-1/#tutorial-no-1","text":"","title":"Tutorial No. 1"},{"location":"tutorials/builder/","tags":["Builder"],"text":"Getting Started with Builder Environment","title":"Getting Started with Builder Environment"},{"location":"tutorials/builder/#getting-started-with-builder-environment","text":"","title":"Getting Started with Builder Environment"},{"location":"tutorials/builder/tutorial-1/","text":"Tutorial No. 1","title":"Tutorial No.1"},{"location":"tutorials/builder/tutorial-1/#tutorial-no-1","text":"","title":"Tutorial No. 1"},{"location":"tutorials/commander/","tags":["Commander"],"text":"Getting Started with Commander Introduction Commander is a versatile environment which enables developers to create a full projects on BBM display modules that can be controlled by simple serial commands. Project can be quickly created from a selection of predesigned pages or custom pages designed using the other three Mates Studio environments. After adding pages to the project and uploading to the BBM module, each page can be tested fully by using a built-in host simulator. This simulator provides a simple user interface to navigate across pages and control the widgets to give a visualization of what the host controller can do with the project. All this can be achieved without entering a single piece of code for the BBM module and in many cases, with the vast library of predesigned pages, no need for any design work to quickly bring projects to life ready to accept simple serial commands from the chosen host microcontroller. Project Development Start a new Commander project for the target module. For this tutorial, TIMI-96 in it's default orientation will be used. Adding Pages Testing the Project Deploying the Project","title":"Getting Started with Commander"},{"location":"tutorials/commander/#getting-started-with-commander","text":"","title":"Getting Started with Commander"},{"location":"tutorials/commander/#introduction","text":"Commander is a versatile environment which enables developers to create a full projects on BBM display modules that can be controlled by simple serial commands. Project can be quickly created from a selection of predesigned pages or custom pages designed using the other three Mates Studio environments. After adding pages to the project and uploading to the BBM module, each page can be tested fully by using a built-in host simulator. This simulator provides a simple user interface to navigate across pages and control the widgets to give a visualization of what the host controller can do with the project. All this can be achieved without entering a single piece of code for the BBM module and in many cases, with the vast library of predesigned pages, no need for any design work to quickly bring projects to life ready to accept simple serial commands from the chosen host microcontroller.","title":"Introduction"},{"location":"tutorials/commander/#project-development","text":"Start a new Commander project for the target module. For this tutorial, TIMI-96 in it's default orientation will be used.","title":"Project Development"},{"location":"tutorials/commander/#adding-pages","text":"","title":"Adding Pages"},{"location":"tutorials/commander/#testing-the-project","text":"","title":"Testing the Project"},{"location":"tutorials/commander/#deploying-the-project","text":"","title":"Deploying the Project"},{"location":"tutorials/commander/tutorial-1/","text":"Tutorial No. 1","title":"Tutorial No.1"},{"location":"tutorials/commander/tutorial-1/#tutorial-no-1","text":"","title":"Tutorial No. 1"},{"location":"tutorials/genius/","tags":["Genius"],"text":"Getting Started with Genius Environment","title":"Getting Started with Genius Environment"},{"location":"tutorials/genius/#getting-started-with-genius-environment","text":"","title":"Getting Started with Genius Environment"},{"location":"tutorials/genius/tutorial-1/","text":"Tutorial No. 1","title":"Tutorial No.1"},{"location":"tutorials/genius/tutorial-1/#tutorial-no-1","text":"","title":"Tutorial No. 1"},{"location":"","text":"Welcome to Breadboard Mates Resource Centre Our Focus At Breadboard Mates, we create novel and exciting products that inspire creativity in the project-maker community. What We Provide An ever-increasing range of hardware and continuously evolving software suite and tools to aid project development About Us Breadboard Mates was established in October 2020 to bring breadboard-friendly products to the market, significantly reducing the time and components required to develop and experiment with electronics. From hobbyist to engineering professional, Breadboard Mates cutting edge products can be utilized for seamless development with the help of the integrated products like TIMI (Tiny Intelligent Modular Instrument) and the Mates Studio software development tool. Mates Studio is unlike any other, offering four different programming methods with a library of hundreds of pre-designed pages and widgets. The result is an unprecedented increase in development speed for stand-alone, host driven or PC testing applications. With investment backing from 4D Systems , Breadboard Mates operates as an independent venture, with its own engineering delivery model and dedicated management and R&D team focused on bringing breadboard-friendly products to the market. The partnership is predicted to significantly scale up the efforts of the fast-growth Breadboard Mates team, with support and resourcing coming from a highly reputable partner. Resource Tags Following is a list of relevant tags: Architect Arduino BBM Python C MicroPython Python RPi Python Mates Studio User Manual Command Protocol Controller Interface Graphics Editor Getting Started with Architect Environment Arduino Arduino RGB Controller BBM Programmer Mates Programmer Builder Mates Studio User Manual Blocks Editor Graphics Editor Getting Started with Builder Environment C C Commander Arduino BBM Python C MicroPython Python RPi Python Mates Studio User Manual Command Protocol Controller Interface Commander Editor Getting Started with Commander Feather Wing Adaptor Genius Mates Studio User Manual Code Editor Graphics Editor Getting Started with Genius Environment MatesBUS MatesBUS MicroPython MicroPython MikroBUS MB Adaptor Python BBM Python Python RPi Python REPTOR REPTOR-250 RGB Controller Pacman REPTOR-250 REPTOR-250 RGB Controller Pacman Raspberry Pi RPi Python Pi Adaptor Status Monitor TED TED-130 TED-96 TED-130 TED-130 TED-96 TED-96 TIMI TIMI-130 TIMI-96 TIMI-MB Status Monitor TIMI-130 TIMI-130 Status Monitor TIMI-96 TIMI-96 TIMI-MB TIMI-MB","title":"Home"},{"location":"#welcome-to-breadboard-mates-resource-centre","text":"","title":"Welcome to Breadboard Mates Resource Centre"},{"location":"#our-focus","text":"At Breadboard Mates, we create novel and exciting products that inspire creativity in the project-maker community.","title":"Our Focus"},{"location":"#what-we-provide","text":"An ever-increasing range of hardware and continuously evolving software suite and tools to aid project development","title":"What We Provide"},{"location":"#about-us","text":"Breadboard Mates was established in October 2020 to bring breadboard-friendly products to the market, significantly reducing the time and components required to develop and experiment with electronics. From hobbyist to engineering professional, Breadboard Mates cutting edge products can be utilized for seamless development with the help of the integrated products like TIMI (Tiny Intelligent Modular Instrument) and the Mates Studio software development tool. Mates Studio is unlike any other, offering four different programming methods with a library of hundreds of pre-designed pages and widgets. The result is an unprecedented increase in development speed for stand-alone, host driven or PC testing applications. With investment backing from 4D Systems , Breadboard Mates operates as an independent venture, with its own engineering delivery model and dedicated management and R&D team focused on bringing breadboard-friendly products to the market. The partnership is predicted to significantly scale up the efforts of the fast-growth Breadboard Mates team, with support and resourcing coming from a highly reputable partner.","title":"About Us"},{"location":"#resource-tags","text":"Following is a list of relevant tags:","title":"Resource Tags"},{"location":"#architect","text":"Arduino BBM Python C MicroPython Python RPi Python Mates Studio User Manual Command Protocol Controller Interface Graphics Editor Getting Started with Architect Environment","title":"Architect"},{"location":"#arduino","text":"Arduino RGB Controller","title":"Arduino"},{"location":"#bbm-programmer","text":"Mates Programmer","title":"BBM Programmer"},{"location":"#builder","text":"Mates Studio User Manual Blocks Editor Graphics Editor Getting Started with Builder Environment","title":"Builder"},{"location":"#c","text":"C","title":"C"},{"location":"#commander","text":"Arduino BBM Python C MicroPython Python RPi Python Mates Studio User Manual Command Protocol Controller Interface Commander Editor Getting Started with Commander","title":"Commander"},{"location":"#feather","text":"Wing Adaptor","title":"Feather"},{"location":"#genius","text":"Mates Studio User Manual Code Editor Graphics Editor Getting Started with Genius Environment","title":"Genius"},{"location":"#matesbus","text":"MatesBUS","title":"MatesBUS"},{"location":"#micropython","text":"MicroPython","title":"MicroPython"},{"location":"#mikrobus","text":"MB Adaptor","title":"MikroBUS"},{"location":"#python","text":"BBM Python Python RPi Python","title":"Python"},{"location":"#reptor","text":"REPTOR-250 RGB Controller Pacman","title":"REPTOR"},{"location":"#reptor-250","text":"REPTOR-250 RGB Controller Pacman","title":"REPTOR-250"},{"location":"#raspberry-pi","text":"RPi Python Pi Adaptor Status Monitor","title":"Raspberry Pi"},{"location":"#ted","text":"TED-130 TED-96","title":"TED"},{"location":"#ted-130","text":"TED-130","title":"TED-130"},{"location":"#ted-96","text":"TED-96","title":"TED-96"},{"location":"#timi","text":"TIMI-130 TIMI-96 TIMI-MB Status Monitor","title":"TIMI"},{"location":"#timi-130","text":"TIMI-130 Status Monitor","title":"TIMI-130"},{"location":"#timi-96","text":"TIMI-96","title":"TIMI-96"},{"location":"#timi-mb","text":"TIMI-MB","title":"TIMI-MB"}]}